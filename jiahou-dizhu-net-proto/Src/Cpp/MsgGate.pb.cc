// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MsgGate.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "MsgGate.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ProtoNet {

namespace {

const ::google::protobuf::Descriptor* AccountInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AccountInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* LastGameInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LastGameInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* LastGameInfoDetail_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LastGameInfoDetail_reflection_ = NULL;
const ::google::protobuf::Descriptor* GameZoneInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GameZoneInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ServerInfoIpsSafeDetail_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServerInfoIpsSafeDetail_reflection_ = NULL;
const ::google::protobuf::Descriptor* SafeIpAndPortDetail_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SafeIpAndPortDetail_reflection_ = NULL;
const ::google::protobuf::Descriptor* GoldRoomServerInfos_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GoldRoomServerInfos_reflection_ = NULL;
const ::google::protobuf::Descriptor* OpenRoomReplaceRecordInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OpenRoomReplaceRecordInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReplaceRecordOver_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReplaceRecordOver_reflection_ = NULL;
const ::google::protobuf::Descriptor* TimesInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TimesInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqGateLogin_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqGateLogin_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResGateLogin_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResGateLogin_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqGetAccountInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqGetAccountInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResGetAccountInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResGetAccountInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqGetGameZoneInfoList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqGetGameZoneInfoList_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResGetGameZoneInfoList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResGetGameZoneInfoList_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqGetGameZoneDetail_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqGetGameZoneDetail_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResGetGameZoneDetail_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResGetGameZoneDetail_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqJoinLogicGameRoom_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqJoinLogicGameRoom_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResJoinLogicGameRoom_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResJoinLogicGameRoom_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqQuickJoinGameRoom_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqQuickJoinGameRoom_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResQuickJoinGameRoom_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResQuickJoinGameRoom_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResNotifyBroadPlatMarquee_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResNotifyBroadPlatMarquee_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResNotifySelfDataChange_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResNotifySelfDataChange_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqGetRoomBrifeList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqGetRoomBrifeList_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResGetRoomBrifeList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResGetRoomBrifeList_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqCheckInMatch_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqCheckInMatch_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResCheckInMatch_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResCheckInMatch_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqOpenRoomReplace_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqOpenRoomReplace_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResOpenRoomReplace_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResOpenRoomReplace_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqOpenRoomReplaceRecordList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqOpenRoomReplaceRecordList_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResOpenRoomReplaceRecord_List_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResOpenRoomReplaceRecord_List_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqDissolutionOpenRoomReplace_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqDissolutionOpenRoomReplace_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResDissolutionOpenRoomReplace_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResDissolutionOpenRoomReplace_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqGameRoomList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqGameRoomList_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResGameRoomList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResGameRoomList_reflection_ = NULL;
const ::google::protobuf::Descriptor* GameRoomList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GameRoomList_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqClubGameRoomList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqClubGameRoomList_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResClubGameRoomList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResClubGameRoomList_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClubGameRoomList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClubGameRoomList_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoomRoleInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoomRoleInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqClubPipeiRoom_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqClubPipeiRoom_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResClubPipeiRoom_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResClubPipeiRoom_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqExitClubPipeiRoom_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqExitClubPipeiRoom_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResExitClubPipeiRoom_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResExitClubPipeiRoom_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqClubPipeiRoomStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqClubPipeiRoomStatus_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResClubPipeiRoomStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResClubPipeiRoomStatus_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResNotifyClubPipeiSuc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResNotifyClubPipeiSuc_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResNotifyRefreshClubGameRoomList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResNotifyRefreshClubGameRoomList_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResNotifyRefreshClubRedBotNews_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResNotifyRefreshClubRedBotNews_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResNotifyClubDismiss_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResNotifyClubDismiss_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResNotifyClubKickedOut_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResNotifyClubKickedOut_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResNotifyClubChangeGameType_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResNotifyClubChangeGameType_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_MsgGate_2eproto() {
  protobuf_AddDesc_MsgGate_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "MsgGate.proto");
  GOOGLE_CHECK(file != NULL);
  AccountInfo_descriptor_ = file->message_type(0);
  static const int AccountInfo_offsets_[15] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountInfo, nick_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountInfo, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountInfo, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountInfo, phone_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountInfo, email_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountInfo, head_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountInfo, headurl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountInfo, lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountInfo, vip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountInfo, ipaddress_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountInfo, address_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountInfo, inviter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountInfo, counts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountInfo, lastgameinfo_),
  };
  AccountInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AccountInfo_descriptor_,
      AccountInfo::default_instance_,
      AccountInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AccountInfo));
  LastGameInfo_descriptor_ = file->message_type(1);
  static const int LastGameInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LastGameInfo, gameid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LastGameInfo, detail_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LastGameInfo, gate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LastGameInfo, logic_),
  };
  LastGameInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LastGameInfo_descriptor_,
      LastGameInfo::default_instance_,
      LastGameInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LastGameInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LastGameInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LastGameInfo));
  LastGameInfoDetail_descriptor_ = file->message_type(2);
  static const int LastGameInfoDetail_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LastGameInfoDetail, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LastGameInfoDetail, roomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LastGameInfoDetail, status_),
  };
  LastGameInfoDetail_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LastGameInfoDetail_descriptor_,
      LastGameInfoDetail::default_instance_,
      LastGameInfoDetail_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LastGameInfoDetail, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LastGameInfoDetail, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LastGameInfoDetail));
  GameZoneInfo_descriptor_ = file->message_type(3);
  static const int GameZoneInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameZoneInfo, gameid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameZoneInfo, isopen_),
  };
  GameZoneInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GameZoneInfo_descriptor_,
      GameZoneInfo::default_instance_,
      GameZoneInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameZoneInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameZoneInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GameZoneInfo));
  ServerInfoIpsSafeDetail_descriptor_ = file->message_type(4);
  static const int ServerInfoIpsSafeDetail_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerInfoIpsSafeDetail, serverid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerInfoIpsSafeDetail, servername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerInfoIpsSafeDetail, playernum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerInfoIpsSafeDetail, isopen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerInfoIpsSafeDetail, safeipandportdetails_),
  };
  ServerInfoIpsSafeDetail_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ServerInfoIpsSafeDetail_descriptor_,
      ServerInfoIpsSafeDetail::default_instance_,
      ServerInfoIpsSafeDetail_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerInfoIpsSafeDetail, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerInfoIpsSafeDetail, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ServerInfoIpsSafeDetail));
  SafeIpAndPortDetail_descriptor_ = file->message_type(5);
  static const int SafeIpAndPortDetail_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SafeIpAndPortDetail, safeip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SafeIpAndPortDetail, safeport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SafeIpAndPortDetail, evironment_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SafeIpAndPortDetail, safehttpport_),
  };
  SafeIpAndPortDetail_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SafeIpAndPortDetail_descriptor_,
      SafeIpAndPortDetail::default_instance_,
      SafeIpAndPortDetail_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SafeIpAndPortDetail, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SafeIpAndPortDetail, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SafeIpAndPortDetail));
  GoldRoomServerInfos_descriptor_ = file->message_type(6);
  static const int GoldRoomServerInfos_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoldRoomServerInfos, roomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoldRoomServerInfos, roomname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoldRoomServerInfos, roomeruniqueid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoldRoomServerInfos, roomernickname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoldRoomServerInfos, roomerheadimg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoldRoomServerInfos, roomerheadtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoldRoomServerInfos, roomtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoldRoomServerInfos, gameid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoldRoomServerInfos, timestype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoldRoomServerInfos, serverinfo_),
  };
  GoldRoomServerInfos_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GoldRoomServerInfos_descriptor_,
      GoldRoomServerInfos::default_instance_,
      GoldRoomServerInfos_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoldRoomServerInfos, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoldRoomServerInfos, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GoldRoomServerInfos));
  OpenRoomReplaceRecordInfo_descriptor_ = file->message_type(7);
  static const int OpenRoomReplaceRecordInfo_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenRoomReplaceRecordInfo, roomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenRoomReplaceRecordInfo, roomeruniqueid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenRoomReplaceRecordInfo, roomernickname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenRoomReplaceRecordInfo, createtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenRoomReplaceRecordInfo, gameid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenRoomReplaceRecordInfo, roomtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenRoomReplaceRecordInfo, timestype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenRoomReplaceRecordInfo, totaltime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenRoomReplaceRecordInfo, serverinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenRoomReplaceRecordInfo, totalnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenRoomReplaceRecordInfo, replacerecordover_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenRoomReplaceRecordInfo, jsonparam_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenRoomReplaceRecordInfo, status_),
  };
  OpenRoomReplaceRecordInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OpenRoomReplaceRecordInfo_descriptor_,
      OpenRoomReplaceRecordInfo::default_instance_,
      OpenRoomReplaceRecordInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenRoomReplaceRecordInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenRoomReplaceRecordInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OpenRoomReplaceRecordInfo));
  ReplaceRecordOver_descriptor_ = file->message_type(8);
  static const int ReplaceRecordOver_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplaceRecordOver, uniqueid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplaceRecordOver, nick_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplaceRecordOver, headimg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplaceRecordOver, head_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplaceRecordOver, score_),
  };
  ReplaceRecordOver_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReplaceRecordOver_descriptor_,
      ReplaceRecordOver::default_instance_,
      ReplaceRecordOver_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplaceRecordOver, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplaceRecordOver, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReplaceRecordOver));
  TimesInfo_descriptor_ = file->message_type(9);
  static const int TimesInfo_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimesInfo, timestype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimesInfo, timesname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimesInfo, minneed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimesInfo, yazhu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimesInfo, atype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimesInfo, roomtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimesInfo, extendstr_),
  };
  TimesInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TimesInfo_descriptor_,
      TimesInfo::default_instance_,
      TimesInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimesInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimesInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TimesInfo));
  ReqGateLogin_descriptor_ = file->message_type(10);
  static const int ReqGateLogin_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqGateLogin, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqGateLogin, ticket_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqGateLogin, evironment_),
  };
  ReqGateLogin_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqGateLogin_descriptor_,
      ReqGateLogin::default_instance_,
      ReqGateLogin_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqGateLogin, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqGateLogin, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqGateLogin));
  ResGateLogin_descriptor_ = file->message_type(11);
  static const int ResGateLogin_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResGateLogin, result_),
  };
  ResGateLogin_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResGateLogin_descriptor_,
      ResGateLogin::default_instance_,
      ResGateLogin_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResGateLogin, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResGateLogin, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResGateLogin));
  ReqGetAccountInfo_descriptor_ = file->message_type(12);
  static const int ReqGetAccountInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqGetAccountInfo, playerid_),
  };
  ReqGetAccountInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqGetAccountInfo_descriptor_,
      ReqGetAccountInfo::default_instance_,
      ReqGetAccountInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqGetAccountInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqGetAccountInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqGetAccountInfo));
  ResGetAccountInfo_descriptor_ = file->message_type(13);
  static const int ResGetAccountInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResGetAccountInfo, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResGetAccountInfo, accountinfo_),
  };
  ResGetAccountInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResGetAccountInfo_descriptor_,
      ResGetAccountInfo::default_instance_,
      ResGetAccountInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResGetAccountInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResGetAccountInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResGetAccountInfo));
  ReqGetGameZoneInfoList_descriptor_ = file->message_type(14);
  static const int ReqGetGameZoneInfoList_offsets_[1] = {
  };
  ReqGetGameZoneInfoList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqGetGameZoneInfoList_descriptor_,
      ReqGetGameZoneInfoList::default_instance_,
      ReqGetGameZoneInfoList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqGetGameZoneInfoList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqGetGameZoneInfoList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqGetGameZoneInfoList));
  ResGetGameZoneInfoList_descriptor_ = file->message_type(15);
  static const int ResGetGameZoneInfoList_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResGetGameZoneInfoList, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResGetGameZoneInfoList, gamezoneinfos_),
  };
  ResGetGameZoneInfoList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResGetGameZoneInfoList_descriptor_,
      ResGetGameZoneInfoList::default_instance_,
      ResGetGameZoneInfoList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResGetGameZoneInfoList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResGetGameZoneInfoList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResGetGameZoneInfoList));
  ReqGetGameZoneDetail_descriptor_ = file->message_type(16);
  static const int ReqGetGameZoneDetail_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqGetGameZoneDetail, gameid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqGetGameZoneDetail, roomtype_),
  };
  ReqGetGameZoneDetail_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqGetGameZoneDetail_descriptor_,
      ReqGetGameZoneDetail::default_instance_,
      ReqGetGameZoneDetail_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqGetGameZoneDetail, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqGetGameZoneDetail, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqGetGameZoneDetail));
  ResGetGameZoneDetail_descriptor_ = file->message_type(17);
  static const int ResGetGameZoneDetail_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResGetGameZoneDetail, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResGetGameZoneDetail, gameid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResGetGameZoneDetail, logicdetails_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResGetGameZoneDetail, timesinfos_),
  };
  ResGetGameZoneDetail_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResGetGameZoneDetail_descriptor_,
      ResGetGameZoneDetail::default_instance_,
      ResGetGameZoneDetail_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResGetGameZoneDetail, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResGetGameZoneDetail, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResGetGameZoneDetail));
  ReqJoinLogicGameRoom_descriptor_ = file->message_type(18);
  static const int ReqJoinLogicGameRoom_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqJoinLogicGameRoom, roomid_),
  };
  ReqJoinLogicGameRoom_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqJoinLogicGameRoom_descriptor_,
      ReqJoinLogicGameRoom::default_instance_,
      ReqJoinLogicGameRoom_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqJoinLogicGameRoom, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqJoinLogicGameRoom, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqJoinLogicGameRoom));
  ResJoinLogicGameRoom_descriptor_ = file->message_type(19);
  static const int ResJoinLogicGameRoom_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResJoinLogicGameRoom, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResJoinLogicGameRoom, bestserverinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResJoinLogicGameRoom, gameid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResJoinLogicGameRoom, roomtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResJoinLogicGameRoom, timestype_),
  };
  ResJoinLogicGameRoom_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResJoinLogicGameRoom_descriptor_,
      ResJoinLogicGameRoom::default_instance_,
      ResJoinLogicGameRoom_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResJoinLogicGameRoom, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResJoinLogicGameRoom, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResJoinLogicGameRoom));
  ReqQuickJoinGameRoom_descriptor_ = file->message_type(20);
  static const int ReqQuickJoinGameRoom_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqQuickJoinGameRoom, gameid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqQuickJoinGameRoom, roomtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqQuickJoinGameRoom, timestype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqQuickJoinGameRoom, pipeiparam_),
  };
  ReqQuickJoinGameRoom_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqQuickJoinGameRoom_descriptor_,
      ReqQuickJoinGameRoom::default_instance_,
      ReqQuickJoinGameRoom_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqQuickJoinGameRoom, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqQuickJoinGameRoom, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqQuickJoinGameRoom));
  ResQuickJoinGameRoom_descriptor_ = file->message_type(21);
  static const int ResQuickJoinGameRoom_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResQuickJoinGameRoom, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResQuickJoinGameRoom, operate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResQuickJoinGameRoom, roomtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResQuickJoinGameRoom, bestserverinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResQuickJoinGameRoom, roomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResQuickJoinGameRoom, logicdetails_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResQuickJoinGameRoom, gameid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResQuickJoinGameRoom, timestype_),
  };
  ResQuickJoinGameRoom_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResQuickJoinGameRoom_descriptor_,
      ResQuickJoinGameRoom::default_instance_,
      ResQuickJoinGameRoom_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResQuickJoinGameRoom, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResQuickJoinGameRoom, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResQuickJoinGameRoom));
  ResNotifyBroadPlatMarquee_descriptor_ = file->message_type(22);
  static const int ResNotifyBroadPlatMarquee_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResNotifyBroadPlatMarquee, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResNotifyBroadPlatMarquee, msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResNotifyBroadPlatMarquee, count_),
  };
  ResNotifyBroadPlatMarquee_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResNotifyBroadPlatMarquee_descriptor_,
      ResNotifyBroadPlatMarquee::default_instance_,
      ResNotifyBroadPlatMarquee_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResNotifyBroadPlatMarquee, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResNotifyBroadPlatMarquee, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResNotifyBroadPlatMarquee));
  ResNotifySelfDataChange_descriptor_ = file->message_type(23);
  static const int ResNotifySelfDataChange_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResNotifySelfDataChange, accountinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResNotifySelfDataChange, charge_),
  };
  ResNotifySelfDataChange_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResNotifySelfDataChange_descriptor_,
      ResNotifySelfDataChange::default_instance_,
      ResNotifySelfDataChange_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResNotifySelfDataChange, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResNotifySelfDataChange, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResNotifySelfDataChange));
  ReqGetRoomBrifeList_descriptor_ = file->message_type(24);
  static const int ReqGetRoomBrifeList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqGetRoomBrifeList, gameid_),
  };
  ReqGetRoomBrifeList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqGetRoomBrifeList_descriptor_,
      ReqGetRoomBrifeList::default_instance_,
      ReqGetRoomBrifeList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqGetRoomBrifeList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqGetRoomBrifeList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqGetRoomBrifeList));
  ResGetRoomBrifeList_descriptor_ = file->message_type(25);
  static const int ResGetRoomBrifeList_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResGetRoomBrifeList, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResGetRoomBrifeList, goldroomserverinfos_),
  };
  ResGetRoomBrifeList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResGetRoomBrifeList_descriptor_,
      ResGetRoomBrifeList::default_instance_,
      ResGetRoomBrifeList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResGetRoomBrifeList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResGetRoomBrifeList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResGetRoomBrifeList));
  ReqCheckInMatch_descriptor_ = file->message_type(26);
  static const int ReqCheckInMatch_offsets_[1] = {
  };
  ReqCheckInMatch_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqCheckInMatch_descriptor_,
      ReqCheckInMatch::default_instance_,
      ReqCheckInMatch_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqCheckInMatch, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqCheckInMatch, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqCheckInMatch));
  ResCheckInMatch_descriptor_ = file->message_type(27);
  static const int ResCheckInMatch_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResCheckInMatch, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResCheckInMatch, inmatch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResCheckInMatch, randid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResCheckInMatch, matchconfigid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResCheckInMatch, gameid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResCheckInMatch, selfrank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResCheckInMatch, from_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResCheckInMatch, to_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResCheckInMatch, taotai_),
  };
  ResCheckInMatch_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResCheckInMatch_descriptor_,
      ResCheckInMatch::default_instance_,
      ResCheckInMatch_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResCheckInMatch, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResCheckInMatch, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResCheckInMatch));
  ReqOpenRoomReplace_descriptor_ = file->message_type(28);
  static const int ReqOpenRoomReplace_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqOpenRoomReplace, roomtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqOpenRoomReplace, times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqOpenRoomReplace, paramstring_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqOpenRoomReplace, timestype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqOpenRoomReplace, halfwayjoin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqOpenRoomReplace, maxplayernum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqOpenRoomReplace, yazhu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqOpenRoomReplace, gameid_),
  };
  ReqOpenRoomReplace_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqOpenRoomReplace_descriptor_,
      ReqOpenRoomReplace::default_instance_,
      ReqOpenRoomReplace_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqOpenRoomReplace, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqOpenRoomReplace, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqOpenRoomReplace));
  ResOpenRoomReplace_descriptor_ = file->message_type(29);
  static const int ResOpenRoomReplace_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResOpenRoomReplace, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResOpenRoomReplace, roomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResOpenRoomReplace, roomtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResOpenRoomReplace, times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResOpenRoomReplace, paramstring_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResOpenRoomReplace, timestype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResOpenRoomReplace, halfwayjoin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResOpenRoomReplace, maxplayernum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResOpenRoomReplace, yazhu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResOpenRoomReplace, gameid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResOpenRoomReplace, serverinfo_),
  };
  ResOpenRoomReplace_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResOpenRoomReplace_descriptor_,
      ResOpenRoomReplace::default_instance_,
      ResOpenRoomReplace_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResOpenRoomReplace, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResOpenRoomReplace, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResOpenRoomReplace));
  ReqOpenRoomReplaceRecordList_descriptor_ = file->message_type(30);
  static const int ReqOpenRoomReplaceRecordList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqOpenRoomReplaceRecordList, status_),
  };
  ReqOpenRoomReplaceRecordList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqOpenRoomReplaceRecordList_descriptor_,
      ReqOpenRoomReplaceRecordList::default_instance_,
      ReqOpenRoomReplaceRecordList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqOpenRoomReplaceRecordList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqOpenRoomReplaceRecordList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqOpenRoomReplaceRecordList));
  ResOpenRoomReplaceRecord_List_descriptor_ = file->message_type(31);
  static const int ResOpenRoomReplaceRecord_List_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResOpenRoomReplaceRecord_List, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResOpenRoomReplaceRecord_List, infos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResOpenRoomReplaceRecord_List, daikaifangrecordnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResOpenRoomReplaceRecord_List, status_),
  };
  ResOpenRoomReplaceRecord_List_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResOpenRoomReplaceRecord_List_descriptor_,
      ResOpenRoomReplaceRecord_List::default_instance_,
      ResOpenRoomReplaceRecord_List_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResOpenRoomReplaceRecord_List, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResOpenRoomReplaceRecord_List, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResOpenRoomReplaceRecord_List));
  ReqDissolutionOpenRoomReplace_descriptor_ = file->message_type(32);
  static const int ReqDissolutionOpenRoomReplace_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqDissolutionOpenRoomReplace, roomid_),
  };
  ReqDissolutionOpenRoomReplace_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqDissolutionOpenRoomReplace_descriptor_,
      ReqDissolutionOpenRoomReplace::default_instance_,
      ReqDissolutionOpenRoomReplace_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqDissolutionOpenRoomReplace, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqDissolutionOpenRoomReplace, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqDissolutionOpenRoomReplace));
  ResDissolutionOpenRoomReplace_descriptor_ = file->message_type(33);
  static const int ResDissolutionOpenRoomReplace_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResDissolutionOpenRoomReplace, result_),
  };
  ResDissolutionOpenRoomReplace_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResDissolutionOpenRoomReplace_descriptor_,
      ResDissolutionOpenRoomReplace::default_instance_,
      ResDissolutionOpenRoomReplace_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResDissolutionOpenRoomReplace, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResDissolutionOpenRoomReplace, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResDissolutionOpenRoomReplace));
  ReqGameRoomList_descriptor_ = file->message_type(34);
  static const int ReqGameRoomList_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqGameRoomList, gameid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqGameRoomList, timestype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqGameRoomList, fangkajinbi_),
  };
  ReqGameRoomList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqGameRoomList_descriptor_,
      ReqGameRoomList::default_instance_,
      ReqGameRoomList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqGameRoomList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqGameRoomList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqGameRoomList));
  ResGameRoomList_descriptor_ = file->message_type(35);
  static const int ResGameRoomList_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResGameRoomList, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResGameRoomList, list_),
  };
  ResGameRoomList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResGameRoomList_descriptor_,
      ResGameRoomList::default_instance_,
      ResGameRoomList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResGameRoomList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResGameRoomList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResGameRoomList));
  GameRoomList_descriptor_ = file->message_type(36);
  static const int GameRoomList_offsets_[17] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameRoomList, roomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameRoomList, paramstring_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameRoomList, yazhu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameRoomList, halfwayjoin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameRoomList, maxplayernum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameRoomList, fangkajinbi_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameRoomList, minneed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameRoomList, pipeiparam_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameRoomList, serverinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameRoomList, gameid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameRoomList, currentplayernum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameRoomList, roomstatus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameRoomList, currentwatchplayernum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameRoomList, roomtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameRoomList, timestype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameRoomList, roomroleinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameRoomList, tablenum_),
  };
  GameRoomList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GameRoomList_descriptor_,
      GameRoomList::default_instance_,
      GameRoomList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameRoomList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameRoomList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GameRoomList));
  ReqClubGameRoomList_descriptor_ = file->message_type(37);
  static const int ReqClubGameRoomList_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqClubGameRoomList, roomtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqClubGameRoomList, gameid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqClubGameRoomList, clubid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqClubGameRoomList, clubpipeiparam_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqClubGameRoomList, clubgametypeid_),
  };
  ReqClubGameRoomList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqClubGameRoomList_descriptor_,
      ReqClubGameRoomList::default_instance_,
      ReqClubGameRoomList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqClubGameRoomList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqClubGameRoomList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqClubGameRoomList));
  ResClubGameRoomList_descriptor_ = file->message_type(38);
  static const int ResClubGameRoomList_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResClubGameRoomList, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResClubGameRoomList, list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResClubGameRoomList, clubcurnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResClubGameRoomList, clubtotalnumlimit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResClubGameRoomList, onlinetotal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResClubGameRoomList, clubid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResClubGameRoomList, totalcard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResClubGameRoomList, intro_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResClubGameRoomList, playingnum_),
  };
  ResClubGameRoomList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResClubGameRoomList_descriptor_,
      ResClubGameRoomList::default_instance_,
      ResClubGameRoomList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResClubGameRoomList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResClubGameRoomList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResClubGameRoomList));
  ClubGameRoomList_descriptor_ = file->message_type(39);
  static const int ClubGameRoomList_offsets_[18] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubGameRoomList, roomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubGameRoomList, paramstring_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubGameRoomList, yazhu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubGameRoomList, halfwayjoin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubGameRoomList, maxplayernum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubGameRoomList, fangkajinbi_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubGameRoomList, minneed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubGameRoomList, pipeiparam_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubGameRoomList, serverinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubGameRoomList, gameid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubGameRoomList, currentplayernum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubGameRoomList, roomstatus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubGameRoomList, currentwatchplayernum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubGameRoomList, roomtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubGameRoomList, timestype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubGameRoomList, tablenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubGameRoomList, roomroleinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubGameRoomList, roomeruniqueid_),
  };
  ClubGameRoomList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClubGameRoomList_descriptor_,
      ClubGameRoomList::default_instance_,
      ClubGameRoomList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubGameRoomList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubGameRoomList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClubGameRoomList));
  RoomRoleInfo_descriptor_ = file->message_type(40);
  static const int RoomRoleInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomRoleInfo, uniqueid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomRoleInfo, nickname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomRoleInfo, headimg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomRoleInfo, head_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomRoleInfo, pos_),
  };
  RoomRoleInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoomRoleInfo_descriptor_,
      RoomRoleInfo::default_instance_,
      RoomRoleInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomRoleInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomRoleInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoomRoleInfo));
  ReqClubPipeiRoom_descriptor_ = file->message_type(41);
  static const int ReqClubPipeiRoom_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqClubPipeiRoom, roomtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqClubPipeiRoom, times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqClubPipeiRoom, paramstring_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqClubPipeiRoom, timestype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqClubPipeiRoom, halfwayjoin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqClubPipeiRoom, maxplayernum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqClubPipeiRoom, yazhu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqClubPipeiRoom, gameid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqClubPipeiRoom, clubid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqClubPipeiRoom, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqClubPipeiRoom, paytype_),
  };
  ReqClubPipeiRoom_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqClubPipeiRoom_descriptor_,
      ReqClubPipeiRoom::default_instance_,
      ReqClubPipeiRoom_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqClubPipeiRoom, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqClubPipeiRoom, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqClubPipeiRoom));
  ResClubPipeiRoom_descriptor_ = file->message_type(42);
  static const int ResClubPipeiRoom_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResClubPipeiRoom, result_),
  };
  ResClubPipeiRoom_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResClubPipeiRoom_descriptor_,
      ResClubPipeiRoom::default_instance_,
      ResClubPipeiRoom_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResClubPipeiRoom, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResClubPipeiRoom, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResClubPipeiRoom));
  ReqExitClubPipeiRoom_descriptor_ = file->message_type(43);
  static const int ReqExitClubPipeiRoom_offsets_[1] = {
  };
  ReqExitClubPipeiRoom_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqExitClubPipeiRoom_descriptor_,
      ReqExitClubPipeiRoom::default_instance_,
      ReqExitClubPipeiRoom_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqExitClubPipeiRoom, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqExitClubPipeiRoom, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqExitClubPipeiRoom));
  ResExitClubPipeiRoom_descriptor_ = file->message_type(44);
  static const int ResExitClubPipeiRoom_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResExitClubPipeiRoom, result_),
  };
  ResExitClubPipeiRoom_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResExitClubPipeiRoom_descriptor_,
      ResExitClubPipeiRoom::default_instance_,
      ResExitClubPipeiRoom_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResExitClubPipeiRoom, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResExitClubPipeiRoom, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResExitClubPipeiRoom));
  ReqClubPipeiRoomStatus_descriptor_ = file->message_type(45);
  static const int ReqClubPipeiRoomStatus_offsets_[1] = {
  };
  ReqClubPipeiRoomStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqClubPipeiRoomStatus_descriptor_,
      ReqClubPipeiRoomStatus::default_instance_,
      ReqClubPipeiRoomStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqClubPipeiRoomStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqClubPipeiRoomStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqClubPipeiRoomStatus));
  ResClubPipeiRoomStatus_descriptor_ = file->message_type(46);
  static const int ResClubPipeiRoomStatus_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResClubPipeiRoomStatus, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResClubPipeiRoomStatus, gameid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResClubPipeiRoomStatus, clubid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResClubPipeiRoomStatus, times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResClubPipeiRoomStatus, paramstring_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResClubPipeiRoomStatus, maxplayernum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResClubPipeiRoomStatus, matchplayernum_),
  };
  ResClubPipeiRoomStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResClubPipeiRoomStatus_descriptor_,
      ResClubPipeiRoomStatus::default_instance_,
      ResClubPipeiRoomStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResClubPipeiRoomStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResClubPipeiRoomStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResClubPipeiRoomStatus));
  ResNotifyClubPipeiSuc_descriptor_ = file->message_type(47);
  static const int ResNotifyClubPipeiSuc_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResNotifyClubPipeiSuc, clubid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResNotifyClubPipeiSuc, roomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResNotifyClubPipeiSuc, roomtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResNotifyClubPipeiSuc, times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResNotifyClubPipeiSuc, paramstring_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResNotifyClubPipeiSuc, timestype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResNotifyClubPipeiSuc, halfwayjoin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResNotifyClubPipeiSuc, maxplayernum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResNotifyClubPipeiSuc, yazhu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResNotifyClubPipeiSuc, gameid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResNotifyClubPipeiSuc, serverinfo_),
  };
  ResNotifyClubPipeiSuc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResNotifyClubPipeiSuc_descriptor_,
      ResNotifyClubPipeiSuc::default_instance_,
      ResNotifyClubPipeiSuc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResNotifyClubPipeiSuc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResNotifyClubPipeiSuc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResNotifyClubPipeiSuc));
  ResNotifyRefreshClubGameRoomList_descriptor_ = file->message_type(48);
  static const int ResNotifyRefreshClubGameRoomList_offsets_[1] = {
  };
  ResNotifyRefreshClubGameRoomList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResNotifyRefreshClubGameRoomList_descriptor_,
      ResNotifyRefreshClubGameRoomList::default_instance_,
      ResNotifyRefreshClubGameRoomList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResNotifyRefreshClubGameRoomList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResNotifyRefreshClubGameRoomList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResNotifyRefreshClubGameRoomList));
  ResNotifyRefreshClubRedBotNews_descriptor_ = file->message_type(49);
  static const int ResNotifyRefreshClubRedBotNews_offsets_[1] = {
  };
  ResNotifyRefreshClubRedBotNews_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResNotifyRefreshClubRedBotNews_descriptor_,
      ResNotifyRefreshClubRedBotNews::default_instance_,
      ResNotifyRefreshClubRedBotNews_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResNotifyRefreshClubRedBotNews, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResNotifyRefreshClubRedBotNews, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResNotifyRefreshClubRedBotNews));
  ResNotifyClubDismiss_descriptor_ = file->message_type(50);
  static const int ResNotifyClubDismiss_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResNotifyClubDismiss, clubid_),
  };
  ResNotifyClubDismiss_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResNotifyClubDismiss_descriptor_,
      ResNotifyClubDismiss::default_instance_,
      ResNotifyClubDismiss_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResNotifyClubDismiss, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResNotifyClubDismiss, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResNotifyClubDismiss));
  ResNotifyClubKickedOut_descriptor_ = file->message_type(51);
  static const int ResNotifyClubKickedOut_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResNotifyClubKickedOut, clubid_),
  };
  ResNotifyClubKickedOut_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResNotifyClubKickedOut_descriptor_,
      ResNotifyClubKickedOut::default_instance_,
      ResNotifyClubKickedOut_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResNotifyClubKickedOut, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResNotifyClubKickedOut, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResNotifyClubKickedOut));
  ResNotifyClubChangeGameType_descriptor_ = file->message_type(52);
  static const int ResNotifyClubChangeGameType_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResNotifyClubChangeGameType, clubid_),
  };
  ResNotifyClubChangeGameType_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResNotifyClubChangeGameType_descriptor_,
      ResNotifyClubChangeGameType::default_instance_,
      ResNotifyClubChangeGameType_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResNotifyClubChangeGameType, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResNotifyClubChangeGameType, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResNotifyClubChangeGameType));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_MsgGate_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AccountInfo_descriptor_, &AccountInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LastGameInfo_descriptor_, &LastGameInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LastGameInfoDetail_descriptor_, &LastGameInfoDetail::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GameZoneInfo_descriptor_, &GameZoneInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ServerInfoIpsSafeDetail_descriptor_, &ServerInfoIpsSafeDetail::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SafeIpAndPortDetail_descriptor_, &SafeIpAndPortDetail::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GoldRoomServerInfos_descriptor_, &GoldRoomServerInfos::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OpenRoomReplaceRecordInfo_descriptor_, &OpenRoomReplaceRecordInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReplaceRecordOver_descriptor_, &ReplaceRecordOver::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TimesInfo_descriptor_, &TimesInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqGateLogin_descriptor_, &ReqGateLogin::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResGateLogin_descriptor_, &ResGateLogin::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqGetAccountInfo_descriptor_, &ReqGetAccountInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResGetAccountInfo_descriptor_, &ResGetAccountInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqGetGameZoneInfoList_descriptor_, &ReqGetGameZoneInfoList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResGetGameZoneInfoList_descriptor_, &ResGetGameZoneInfoList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqGetGameZoneDetail_descriptor_, &ReqGetGameZoneDetail::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResGetGameZoneDetail_descriptor_, &ResGetGameZoneDetail::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqJoinLogicGameRoom_descriptor_, &ReqJoinLogicGameRoom::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResJoinLogicGameRoom_descriptor_, &ResJoinLogicGameRoom::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqQuickJoinGameRoom_descriptor_, &ReqQuickJoinGameRoom::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResQuickJoinGameRoom_descriptor_, &ResQuickJoinGameRoom::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResNotifyBroadPlatMarquee_descriptor_, &ResNotifyBroadPlatMarquee::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResNotifySelfDataChange_descriptor_, &ResNotifySelfDataChange::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqGetRoomBrifeList_descriptor_, &ReqGetRoomBrifeList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResGetRoomBrifeList_descriptor_, &ResGetRoomBrifeList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqCheckInMatch_descriptor_, &ReqCheckInMatch::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResCheckInMatch_descriptor_, &ResCheckInMatch::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqOpenRoomReplace_descriptor_, &ReqOpenRoomReplace::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResOpenRoomReplace_descriptor_, &ResOpenRoomReplace::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqOpenRoomReplaceRecordList_descriptor_, &ReqOpenRoomReplaceRecordList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResOpenRoomReplaceRecord_List_descriptor_, &ResOpenRoomReplaceRecord_List::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqDissolutionOpenRoomReplace_descriptor_, &ReqDissolutionOpenRoomReplace::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResDissolutionOpenRoomReplace_descriptor_, &ResDissolutionOpenRoomReplace::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqGameRoomList_descriptor_, &ReqGameRoomList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResGameRoomList_descriptor_, &ResGameRoomList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GameRoomList_descriptor_, &GameRoomList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqClubGameRoomList_descriptor_, &ReqClubGameRoomList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResClubGameRoomList_descriptor_, &ResClubGameRoomList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClubGameRoomList_descriptor_, &ClubGameRoomList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoomRoleInfo_descriptor_, &RoomRoleInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqClubPipeiRoom_descriptor_, &ReqClubPipeiRoom::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResClubPipeiRoom_descriptor_, &ResClubPipeiRoom::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqExitClubPipeiRoom_descriptor_, &ReqExitClubPipeiRoom::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResExitClubPipeiRoom_descriptor_, &ResExitClubPipeiRoom::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqClubPipeiRoomStatus_descriptor_, &ReqClubPipeiRoomStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResClubPipeiRoomStatus_descriptor_, &ResClubPipeiRoomStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResNotifyClubPipeiSuc_descriptor_, &ResNotifyClubPipeiSuc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResNotifyRefreshClubGameRoomList_descriptor_, &ResNotifyRefreshClubGameRoomList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResNotifyRefreshClubRedBotNews_descriptor_, &ResNotifyRefreshClubRedBotNews::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResNotifyClubDismiss_descriptor_, &ResNotifyClubDismiss::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResNotifyClubKickedOut_descriptor_, &ResNotifyClubKickedOut::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResNotifyClubChangeGameType_descriptor_, &ResNotifyClubChangeGameType::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_MsgGate_2eproto() {
  delete AccountInfo::default_instance_;
  delete AccountInfo_reflection_;
  delete LastGameInfo::default_instance_;
  delete LastGameInfo_reflection_;
  delete LastGameInfoDetail::default_instance_;
  delete LastGameInfoDetail_reflection_;
  delete GameZoneInfo::default_instance_;
  delete GameZoneInfo_reflection_;
  delete ServerInfoIpsSafeDetail::default_instance_;
  delete ServerInfoIpsSafeDetail_reflection_;
  delete SafeIpAndPortDetail::default_instance_;
  delete SafeIpAndPortDetail_reflection_;
  delete GoldRoomServerInfos::default_instance_;
  delete GoldRoomServerInfos_reflection_;
  delete OpenRoomReplaceRecordInfo::default_instance_;
  delete OpenRoomReplaceRecordInfo_reflection_;
  delete ReplaceRecordOver::default_instance_;
  delete ReplaceRecordOver_reflection_;
  delete TimesInfo::default_instance_;
  delete TimesInfo_reflection_;
  delete ReqGateLogin::default_instance_;
  delete ReqGateLogin_reflection_;
  delete ResGateLogin::default_instance_;
  delete ResGateLogin_reflection_;
  delete ReqGetAccountInfo::default_instance_;
  delete ReqGetAccountInfo_reflection_;
  delete ResGetAccountInfo::default_instance_;
  delete ResGetAccountInfo_reflection_;
  delete ReqGetGameZoneInfoList::default_instance_;
  delete ReqGetGameZoneInfoList_reflection_;
  delete ResGetGameZoneInfoList::default_instance_;
  delete ResGetGameZoneInfoList_reflection_;
  delete ReqGetGameZoneDetail::default_instance_;
  delete ReqGetGameZoneDetail_reflection_;
  delete ResGetGameZoneDetail::default_instance_;
  delete ResGetGameZoneDetail_reflection_;
  delete ReqJoinLogicGameRoom::default_instance_;
  delete ReqJoinLogicGameRoom_reflection_;
  delete ResJoinLogicGameRoom::default_instance_;
  delete ResJoinLogicGameRoom_reflection_;
  delete ReqQuickJoinGameRoom::default_instance_;
  delete ReqQuickJoinGameRoom_reflection_;
  delete ResQuickJoinGameRoom::default_instance_;
  delete ResQuickJoinGameRoom_reflection_;
  delete ResNotifyBroadPlatMarquee::default_instance_;
  delete ResNotifyBroadPlatMarquee_reflection_;
  delete ResNotifySelfDataChange::default_instance_;
  delete ResNotifySelfDataChange_reflection_;
  delete ReqGetRoomBrifeList::default_instance_;
  delete ReqGetRoomBrifeList_reflection_;
  delete ResGetRoomBrifeList::default_instance_;
  delete ResGetRoomBrifeList_reflection_;
  delete ReqCheckInMatch::default_instance_;
  delete ReqCheckInMatch_reflection_;
  delete ResCheckInMatch::default_instance_;
  delete ResCheckInMatch_reflection_;
  delete ReqOpenRoomReplace::default_instance_;
  delete ReqOpenRoomReplace_reflection_;
  delete ResOpenRoomReplace::default_instance_;
  delete ResOpenRoomReplace_reflection_;
  delete ReqOpenRoomReplaceRecordList::default_instance_;
  delete ReqOpenRoomReplaceRecordList_reflection_;
  delete ResOpenRoomReplaceRecord_List::default_instance_;
  delete ResOpenRoomReplaceRecord_List_reflection_;
  delete ReqDissolutionOpenRoomReplace::default_instance_;
  delete ReqDissolutionOpenRoomReplace_reflection_;
  delete ResDissolutionOpenRoomReplace::default_instance_;
  delete ResDissolutionOpenRoomReplace_reflection_;
  delete ReqGameRoomList::default_instance_;
  delete ReqGameRoomList_reflection_;
  delete ResGameRoomList::default_instance_;
  delete ResGameRoomList_reflection_;
  delete GameRoomList::default_instance_;
  delete GameRoomList_reflection_;
  delete ReqClubGameRoomList::default_instance_;
  delete ReqClubGameRoomList_reflection_;
  delete ResClubGameRoomList::default_instance_;
  delete ResClubGameRoomList_reflection_;
  delete ClubGameRoomList::default_instance_;
  delete ClubGameRoomList_reflection_;
  delete RoomRoleInfo::default_instance_;
  delete RoomRoleInfo_reflection_;
  delete ReqClubPipeiRoom::default_instance_;
  delete ReqClubPipeiRoom_reflection_;
  delete ResClubPipeiRoom::default_instance_;
  delete ResClubPipeiRoom_reflection_;
  delete ReqExitClubPipeiRoom::default_instance_;
  delete ReqExitClubPipeiRoom_reflection_;
  delete ResExitClubPipeiRoom::default_instance_;
  delete ResExitClubPipeiRoom_reflection_;
  delete ReqClubPipeiRoomStatus::default_instance_;
  delete ReqClubPipeiRoomStatus_reflection_;
  delete ResClubPipeiRoomStatus::default_instance_;
  delete ResClubPipeiRoomStatus_reflection_;
  delete ResNotifyClubPipeiSuc::default_instance_;
  delete ResNotifyClubPipeiSuc_reflection_;
  delete ResNotifyRefreshClubGameRoomList::default_instance_;
  delete ResNotifyRefreshClubGameRoomList_reflection_;
  delete ResNotifyRefreshClubRedBotNews::default_instance_;
  delete ResNotifyRefreshClubRedBotNews_reflection_;
  delete ResNotifyClubDismiss::default_instance_;
  delete ResNotifyClubDismiss_reflection_;
  delete ResNotifyClubKickedOut::default_instance_;
  delete ResNotifyClubKickedOut_reflection_;
  delete ResNotifyClubChangeGameType::default_instance_;
  delete ResNotifyClubChangeGameType_reflection_;
}

void protobuf_AddDesc_MsgGate_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::ProtoNet::protobuf_AddDesc_MsgCode_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rMsgGate.proto\022\010ProtoNet\032\rMsgCode.proto"
    "\"\245\002\n\013AccountInfo\022\014\n\004name\030\001 \001(\t\022\014\n\004nick\030\002"
    " \001(\t\022\013\n\003uid\030\003 \001(\005\022\013\n\003sex\030\004 \001(\005\022\r\n\005phone\030"
    "\005 \001(\t\022\r\n\005email\030\006 \001(\t\022\014\n\004head\030\007 \001(\005\022\017\n\007he"
    "adUrl\030\010 \001(\t\022\n\n\002lv\030\t \001(\005\022\013\n\003vip\030\n \001(\005\022\021\n\t"
    "ipaddress\030\013 \001(\t\022\017\n\007address\030\014 \001(\t\022\017\n\007invi"
    "ter\030\r \001(\005\022\'\n\006counts\030\016 \003(\0132\027.ProtoNet.Pla"
    "yerAccount\022,\n\014lastGameInfo\030\017 \001(\0132\026.Proto"
    "Net.LastGameInfo\"\257\001\n\014LastGameInfo\022\016\n\006gam"
    "eId\030\001 \001(\005\022,\n\006detail\030\002 \001(\0132\034.ProtoNet.Las"
    "tGameInfoDetail\022/\n\004gate\030\003 \001(\0132!.ProtoNet"
    ".ServerInfoIpsSafeDetail\0220\n\005logic\030\004 \001(\0132"
    "!.ProtoNet.ServerInfoIpsSafeDetail\"B\n\022La"
    "stGameInfoDetail\022\014\n\004type\030\001 \001(\005\022\016\n\006roomId"
    "\030\002 \001(\t\022\016\n\006status\030\003 \001(\005\".\n\014GameZoneInfo\022\016"
    "\n\006gameId\030\001 \001(\005\022\016\n\006isOpen\030\003 \001(\010\"\237\001\n\027Serve"
    "rInfoIpsSafeDetail\022\020\n\010serverId\030\001 \001(\005\022\022\n\n"
    "serverName\030\002 \001(\t\022\021\n\tplayerNum\030\003 \001(\005\022\016\n\006i"
    "sOpen\030\004 \001(\010\022;\n\024safeIpAndPortDetails\030\005 \003("
    "\0132\035.ProtoNet.SafeIpAndPortDetail\"a\n\023Safe"
    "IpAndPortDetail\022\016\n\006safeIp\030\001 \001(\t\022\020\n\010safeP"
    "ort\030\002 \001(\t\022\022\n\nevironment\030\003 \001(\t\022\024\n\014safeHtt"
    "pPort\030\004 \001(\t\"\202\002\n\023GoldRoomServerInfos\022\016\n\006r"
    "oomId\030\001 \002(\t\022\020\n\010roomName\030\002 \002(\t\022\026\n\016roomerU"
    "niqueId\030\003 \002(\t\022\026\n\016roomerNickName\030\004 \002(\t\022\025\n"
    "\rroomerHeadImg\030\005 \002(\t\022\026\n\016roomerHeadType\030\006"
    " \002(\005\022\020\n\010roomType\030\007 \002(\005\022\016\n\006gameId\030\010 \002(\005\022\021"
    "\n\ttimesType\030\t \002(\005\0225\n\nserverInfo\030\n \002(\0132!."
    "ProtoNet.ServerInfoIpsSafeDetail\"\333\002\n\031Ope"
    "nRoomReplaceRecordInfo\022\016\n\006roomId\030\001 \002(\t\022\026"
    "\n\016roomerUniqueId\030\002 \002(\t\022\026\n\016roomerNickName"
    "\030\003 \002(\t\022\022\n\ncreateTime\030\004 \002(\003\022\016\n\006gameId\030\005 \002"
    "(\005\022\020\n\010roomType\030\006 \002(\005\022\021\n\ttimesType\030\007 \002(\005\022"
    "\021\n\ttotalTime\030\010 \002(\005\0225\n\nserverInfo\030\t \002(\0132!"
    ".ProtoNet.ServerInfoIpsSafeDetail\022\020\n\010tot"
    "alNum\030\n \002(\005\0226\n\021replaceRecordOver\030\013 \003(\0132\033"
    ".ProtoNet.ReplaceRecordOver\022\021\n\tjsonParam"
    "\030\014 \002(\t\022\016\n\006status\030\r \002(\005\"a\n\021ReplaceRecordO"
    "ver\022\020\n\010uniqueId\030\001 \002(\t\022\014\n\004nick\030\002 \002(\t\022\017\n\007h"
    "eadImg\030\003 \002(\t\022\014\n\004head\030\004 \002(\005\022\r\n\005score\030\005 \001("
    "\001\"\205\001\n\tTimesInfo\022\021\n\ttimesType\030\001 \002(\005\022\021\n\tti"
    "mesName\030\002 \002(\t\022\017\n\007minNeed\030\003 \002(\001\022\r\n\005yazhu\030"
    "\004 \002(\001\022\r\n\005atype\030\005 \002(\005\022\020\n\010roomType\030\006 \002(\005\022\021"
    "\n\textendStr\030\007 \001(\t\"D\n\014ReqGateLogin\022\020\n\010pla"
    "yerId\030\001 \002(\005\022\016\n\006ticket\030\002 \002(\t\022\022\n\nevironmen"
    "t\030\003 \002(\t\"8\n\014ResGateLogin\022(\n\006result\030\001 \002(\0132"
    "\030.ProtoNet.ResponseResult\"%\n\021ReqGetAccou"
    "ntInfo\022\020\n\010playerId\030\001 \002(\005\"i\n\021ResGetAccoun"
    "tInfo\022(\n\006result\030\001 \002(\0132\030.ProtoNet.Respons"
    "eResult\022*\n\013accountInfo\030\002 \001(\0132\025.ProtoNet."
    "AccountInfo\"\030\n\026ReqGetGameZoneInfoList\"q\n"
    "\026ResGetGameZoneInfoList\022(\n\006result\030\001 \002(\0132"
    "\030.ProtoNet.ResponseResult\022-\n\rgameZoneInf"
    "os\030\002 \003(\0132\026.ProtoNet.GameZoneInfo\"8\n\024ReqG"
    "etGameZoneDetail\022\016\n\006gameId\030\001 \002(\005\022\020\n\010room"
    "Type\030\002 \002(\005\"\262\001\n\024ResGetGameZoneDetail\022(\n\006r"
    "esult\030\001 \002(\0132\030.ProtoNet.ResponseResult\022\016\n"
    "\006gameId\030\002 \001(\005\0227\n\014logicDetails\030\003 \003(\0132!.Pr"
    "otoNet.ServerInfoIpsSafeDetail\022\'\n\ntimesI"
    "nfos\030\004 \003(\0132\023.ProtoNet.TimesInfo\"&\n\024ReqJo"
    "inLogicGameRoom\022\016\n\006roomId\030\001 \002(\t\"\260\001\n\024ResJ"
    "oinLogicGameRoom\022(\n\006result\030\001 \002(\0132\030.Proto"
    "Net.ResponseResult\0229\n\016bestServerInfo\030\002 \001"
    "(\0132!.ProtoNet.ServerInfoIpsSafeDetail\022\016\n"
    "\006gameId\030\003 \001(\005\022\020\n\010roomType\030\004 \001(\005\022\021\n\ttimes"
    "Type\030\005 \001(\005\"_\n\024ReqQuickJoinGameRoom\022\016\n\006ga"
    "meId\030\001 \002(\005\022\020\n\010roomType\030\002 \002(\005\022\021\n\ttimesTyp"
    "e\030\003 \002(\005\022\022\n\npipeiParam\030\004 \001(\t\"\212\002\n\024ResQuick"
    "JoinGameRoom\022(\n\006result\030\001 \002(\0132\030.ProtoNet."
    "ResponseResult\022\017\n\007operate\030\002 \001(\005\022\020\n\010roomT"
    "ype\030\003 \001(\005\0229\n\016bestServerInfo\030\004 \001(\0132!.Prot"
    "oNet.ServerInfoIpsSafeDetail\022\016\n\006roomId\030\005"
    " \001(\t\0227\n\014logicDetails\030\006 \003(\0132!.ProtoNet.Se"
    "rverInfoIpsSafeDetail\022\016\n\006gameId\030\007 \001(\005\022\021\n"
    "\ttimesType\030\010 \001(\005\"E\n\031ResNotifyBroadPlatMa"
    "rquee\022\014\n\004type\030\001 \002(\005\022\013\n\003msg\030\002 \002(\t\022\r\n\005coun"
    "t\030\003 \002(\005\"U\n\027ResNotifySelfDataChange\022*\n\013ac"
    "countInfo\030\001 \002(\0132\025.ProtoNet.AccountInfo\022\016"
    "\n\006charge\030\002 \001(\005\"%\n\023ReqGetRoomBrifeList\022\016\n"
    "\006gameId\030\001 \002(\005\"{\n\023ResGetRoomBrifeList\022(\n\006"
    "result\030\001 \002(\0132\030.ProtoNet.ResponseResult\022:"
    "\n\023goldRoomServerInfos\030\002 \003(\0132\035.ProtoNet.G"
    "oldRoomServerInfos\"\021\n\017ReqCheckInMatch\"\277\001"
    "\n\017ResCheckInMatch\022(\n\006result\030\001 \002(\0132\030.Prot"
    "oNet.ResponseResult\022\017\n\007inMatch\030\002 \001(\005\022\016\n\006"
    "randId\030\003 \001(\t\022\025\n\rmatchConfigId\030\004 \001(\005\022\016\n\006g"
    "ameId\030\005 \001(\005\022\020\n\010selfRank\030\006 \001(\005\022\014\n\004from\030\007 "
    "\001(\005\022\n\n\002to\030\010 \001(\005\022\016\n\006taotai\030\t \001(\005\"\247\001\n\022ReqO"
    "penRoomReplace\022\020\n\010roomType\030\001 \002(\005\022\r\n\005time"
    "s\030\002 \002(\005\022\023\n\013paramString\030\003 \001(\t\022\021\n\ttimesTyp"
    "e\030\004 \002(\005\022\023\n\013halfWayJoin\030\005 \001(\005\022\024\n\014maxPlaye"
    "rNum\030\006 \001(\005\022\r\n\005yazhu\030\007 \001(\001\022\016\n\006gameId\030\010 \002("
    "\005\"\230\002\n\022ResOpenRoomReplace\022(\n\006result\030\001 \002(\013"
    "2\030.ProtoNet.ResponseResult\022\016\n\006roomId\030\002 \001"
    "(\t\022\020\n\010roomType\030\003 \001(\005\022\r\n\005times\030\004 \001(\005\022\023\n\013p"
    "aramString\030\005 \001(\t\022\021\n\ttimesType\030\006 \001(\005\022\023\n\013h"
    "alfWayJoin\030\007 \001(\005\022\024\n\014maxPlayerNum\030\010 \001(\005\022\r"
    "\n\005yazhu\030\t \001(\001\022\016\n\006gameId\030\n \001(\005\0225\n\nserverI"
    "nfo\030\013 \001(\0132!.ProtoNet.ServerInfoIpsSafeDe"
    "tail\".\n\034ReqOpenRoomReplaceRecordList\022\016\n\006"
    "status\030\001 \002(\005\"\252\001\n\035ResOpenRoomReplaceRecor"
    "d_List\022(\n\006result\030\001 \002(\0132\030.ProtoNet.Respon"
    "seResult\0222\n\005infos\030\002 \003(\0132#.ProtoNet.OpenR"
    "oomReplaceRecordInfo\022\033\n\023daikaifangRecord"
    "Num\030\003 \001(\005\022\016\n\006status\030\004 \001(\005\"/\n\035ReqDissolut"
    "ionOpenRoomReplace\022\016\n\006roomId\030\001 \002(\t\"I\n\035Re"
    "sDissolutionOpenRoomReplace\022(\n\006result\030\001 "
    "\002(\0132\030.ProtoNet.ResponseResult\"I\n\017ReqGame"
    "RoomList\022\016\n\006gameId\030\001 \002(\005\022\021\n\ttimesType\030\002 "
    "\002(\005\022\023\n\013fangkaJinbi\030\003 \002(\005\"a\n\017ResGameRoomL"
    "ist\022(\n\006result\030\001 \002(\0132\030.ProtoNet.ResponseR"
    "esult\022$\n\004list\030\002 \003(\0132\026.ProtoNet.GameRoomL"
    "ist\"\240\003\n\014GameRoomList\022\016\n\006roomId\030\001 \002(\t\022\023\n\013"
    "paramString\030\002 \002(\t\022\r\n\005yazhu\030\003 \002(\001\022\023\n\013half"
    "WayJoin\030\004 \002(\005\022\024\n\014maxPlayerNum\030\005 \002(\005\022\023\n\013f"
    "angkaJinbi\030\006 \002(\005\022\017\n\007minNeed\030\007 \002(\001\022\022\n\npip"
    "eiParam\030\010 \002(\t\0225\n\nserverInfo\030\t \002(\0132!.Prot"
    "oNet.ServerInfoIpsSafeDetail\022\016\n\006gameId\030\n"
    " \002(\005\022\030\n\020currentPlayerNum\030\013 \002(\005\022\022\n\nroomSt"
    "atus\030\014 \002(\005\022\035\n\025currentWatchPlayerNum\030\r \002("
    "\005\022\020\n\010roomType\030\016 \001(\005\022\021\n\ttimesType\030\017 \001(\005\022,"
    "\n\014roomRoleInfo\030\020 \003(\0132\026.ProtoNet.RoomRole"
    "Info\022\020\n\010tableNum\030\021 \001(\t\"w\n\023ReqClubGameRoo"
    "mList\022\020\n\010roomType\030\001 \002(\005\022\016\n\006gameId\030\002 \002(\005\022"
    "\016\n\006clubId\030\003 \002(\t\022\026\n\016clubPipeiParam\030\004 \002(\t\022"
    "\026\n\016clubGameTypeId\030\005 \001(\t\"\363\001\n\023ResClubGameR"
    "oomList\022(\n\006result\030\001 \002(\0132\030.ProtoNet.Respo"
    "nseResult\022(\n\004list\030\002 \003(\0132\032.ProtoNet.ClubG"
    "ameRoomList\022\022\n\nclubCurNum\030\003 \001(\005\022\031\n\021clubT"
    "otalNumLimit\030\004 \001(\005\022\023\n\013onlineTotal\030\005 \001(\005\022"
    "\016\n\006clubId\030\006 \001(\t\022\021\n\ttotalCard\030\007 \001(\005\022\r\n\005in"
    "tro\030\010 \001(\t\022\022\n\nplayingNum\030\t \001(\005\"\274\003\n\020ClubGa"
    "meRoomList\022\016\n\006roomId\030\001 \002(\t\022\023\n\013paramStrin"
    "g\030\002 \002(\t\022\r\n\005yazhu\030\003 \002(\001\022\023\n\013halfWayJoin\030\004 "
    "\002(\005\022\024\n\014maxPlayerNum\030\005 \002(\005\022\023\n\013fangkaJinbi"
    "\030\006 \002(\005\022\017\n\007minNeed\030\007 \002(\001\022\022\n\npipeiParam\030\010 "
    "\002(\t\0225\n\nserverInfo\030\t \002(\0132!.ProtoNet.Serve"
    "rInfoIpsSafeDetail\022\016\n\006gameId\030\n \002(\005\022\030\n\020cu"
    "rrentPlayerNum\030\013 \002(\005\022\022\n\nroomStatus\030\014 \002(\005"
    "\022\035\n\025currentWatchPlayerNum\030\r \002(\005\022\020\n\010roomT"
    "ype\030\016 \002(\005\022\021\n\ttimesType\030\017 \002(\005\022\020\n\010tableNum"
    "\030\020 \001(\t\022,\n\014roomRoleInfo\030\021 \003(\0132\026.ProtoNet."
    "RoomRoleInfo\022\026\n\016roomerUniqueId\030\022 \001(\t\"^\n\014"
    "RoomRoleInfo\022\020\n\010uniqueId\030\001 \002(\t\022\020\n\010nickNa"
    "me\030\002 \002(\t\022\017\n\007headImg\030\003 \002(\t\022\014\n\004head\030\004 \002(\005\022"
    "\013\n\003pos\030\005 \002(\005\"\330\001\n\020ReqClubPipeiRoom\022\020\n\010roo"
    "mType\030\001 \001(\005\022\r\n\005times\030\002 \001(\005\022\023\n\013paramStrin"
    "g\030\003 \001(\t\022\021\n\ttimesType\030\004 \001(\005\022\023\n\013halfWayJoi"
    "n\030\005 \001(\005\022\024\n\014maxPlayerNum\030\006 \001(\005\022\r\n\005yazhu\030\007"
    " \001(\001\022\016\n\006gameId\030\010 \001(\005\022\016\n\006clubId\030\t \001(\005\022\020\n\010"
    "playerId\030\n \001(\005\022\017\n\007payType\030\013 \001(\005\"<\n\020ResCl"
    "ubPipeiRoom\022(\n\006result\030\001 \002(\0132\030.ProtoNet.R"
    "esponseResult\"\026\n\024ReqExitClubPipeiRoom\"@\n"
    "\024ResExitClubPipeiRoom\022(\n\006result\030\001 \002(\0132\030."
    "ProtoNet.ResponseResult\"\030\n\026ReqClubPipeiR"
    "oomStatus\"\264\001\n\026ResClubPipeiRoomStatus\022(\n\006"
    "result\030\001 \002(\0132\030.ProtoNet.ResponseResult\022\016"
    "\n\006gameId\030\002 \001(\005\022\016\n\006clubId\030\003 \001(\005\022\r\n\005times\030"
    "\004 \001(\005\022\023\n\013paramString\030\005 \001(\t\022\024\n\014maxPlayerN"
    "um\030\006 \001(\005\022\026\n\016matchPlayerNum\030\007 \001(\005\"\201\002\n\025Res"
    "NotifyClubPipeiSuc\022\016\n\006clubId\030\001 \001(\t\022\016\n\006ro"
    "omId\030\002 \001(\t\022\020\n\010roomType\030\003 \001(\005\022\r\n\005times\030\004 "
    "\001(\005\022\023\n\013paramString\030\005 \001(\t\022\021\n\ttimesType\030\006 "
    "\001(\005\022\023\n\013halfWayJoin\030\007 \001(\005\022\024\n\014maxPlayerNum"
    "\030\010 \001(\005\022\r\n\005yazhu\030\t \001(\001\022\016\n\006gameId\030\n \001(\005\0225\n"
    "\nserverInfo\030\013 \001(\0132!.ProtoNet.ServerInfoI"
    "psSafeDetail\"\"\n ResNotifyRefreshClubGame"
    "RoomList\" \n\036ResNotifyRefreshClubRedBotNe"
    "ws\"&\n\024ResNotifyClubDismiss\022\016\n\006clubId\030\001 \001"
    "(\t\"(\n\026ResNotifyClubKickedOut\022\016\n\006clubId\030\001"
    " \001(\t\"-\n\033ResNotifyClubChangeGameType\022\016\n\006c"
    "lubId\030\001 \001(\tB\031\n\027com.version.protobuf.pb", 6878);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "MsgGate.proto", &protobuf_RegisterTypes);
  AccountInfo::default_instance_ = new AccountInfo();
  LastGameInfo::default_instance_ = new LastGameInfo();
  LastGameInfoDetail::default_instance_ = new LastGameInfoDetail();
  GameZoneInfo::default_instance_ = new GameZoneInfo();
  ServerInfoIpsSafeDetail::default_instance_ = new ServerInfoIpsSafeDetail();
  SafeIpAndPortDetail::default_instance_ = new SafeIpAndPortDetail();
  GoldRoomServerInfos::default_instance_ = new GoldRoomServerInfos();
  OpenRoomReplaceRecordInfo::default_instance_ = new OpenRoomReplaceRecordInfo();
  ReplaceRecordOver::default_instance_ = new ReplaceRecordOver();
  TimesInfo::default_instance_ = new TimesInfo();
  ReqGateLogin::default_instance_ = new ReqGateLogin();
  ResGateLogin::default_instance_ = new ResGateLogin();
  ReqGetAccountInfo::default_instance_ = new ReqGetAccountInfo();
  ResGetAccountInfo::default_instance_ = new ResGetAccountInfo();
  ReqGetGameZoneInfoList::default_instance_ = new ReqGetGameZoneInfoList();
  ResGetGameZoneInfoList::default_instance_ = new ResGetGameZoneInfoList();
  ReqGetGameZoneDetail::default_instance_ = new ReqGetGameZoneDetail();
  ResGetGameZoneDetail::default_instance_ = new ResGetGameZoneDetail();
  ReqJoinLogicGameRoom::default_instance_ = new ReqJoinLogicGameRoom();
  ResJoinLogicGameRoom::default_instance_ = new ResJoinLogicGameRoom();
  ReqQuickJoinGameRoom::default_instance_ = new ReqQuickJoinGameRoom();
  ResQuickJoinGameRoom::default_instance_ = new ResQuickJoinGameRoom();
  ResNotifyBroadPlatMarquee::default_instance_ = new ResNotifyBroadPlatMarquee();
  ResNotifySelfDataChange::default_instance_ = new ResNotifySelfDataChange();
  ReqGetRoomBrifeList::default_instance_ = new ReqGetRoomBrifeList();
  ResGetRoomBrifeList::default_instance_ = new ResGetRoomBrifeList();
  ReqCheckInMatch::default_instance_ = new ReqCheckInMatch();
  ResCheckInMatch::default_instance_ = new ResCheckInMatch();
  ReqOpenRoomReplace::default_instance_ = new ReqOpenRoomReplace();
  ResOpenRoomReplace::default_instance_ = new ResOpenRoomReplace();
  ReqOpenRoomReplaceRecordList::default_instance_ = new ReqOpenRoomReplaceRecordList();
  ResOpenRoomReplaceRecord_List::default_instance_ = new ResOpenRoomReplaceRecord_List();
  ReqDissolutionOpenRoomReplace::default_instance_ = new ReqDissolutionOpenRoomReplace();
  ResDissolutionOpenRoomReplace::default_instance_ = new ResDissolutionOpenRoomReplace();
  ReqGameRoomList::default_instance_ = new ReqGameRoomList();
  ResGameRoomList::default_instance_ = new ResGameRoomList();
  GameRoomList::default_instance_ = new GameRoomList();
  ReqClubGameRoomList::default_instance_ = new ReqClubGameRoomList();
  ResClubGameRoomList::default_instance_ = new ResClubGameRoomList();
  ClubGameRoomList::default_instance_ = new ClubGameRoomList();
  RoomRoleInfo::default_instance_ = new RoomRoleInfo();
  ReqClubPipeiRoom::default_instance_ = new ReqClubPipeiRoom();
  ResClubPipeiRoom::default_instance_ = new ResClubPipeiRoom();
  ReqExitClubPipeiRoom::default_instance_ = new ReqExitClubPipeiRoom();
  ResExitClubPipeiRoom::default_instance_ = new ResExitClubPipeiRoom();
  ReqClubPipeiRoomStatus::default_instance_ = new ReqClubPipeiRoomStatus();
  ResClubPipeiRoomStatus::default_instance_ = new ResClubPipeiRoomStatus();
  ResNotifyClubPipeiSuc::default_instance_ = new ResNotifyClubPipeiSuc();
  ResNotifyRefreshClubGameRoomList::default_instance_ = new ResNotifyRefreshClubGameRoomList();
  ResNotifyRefreshClubRedBotNews::default_instance_ = new ResNotifyRefreshClubRedBotNews();
  ResNotifyClubDismiss::default_instance_ = new ResNotifyClubDismiss();
  ResNotifyClubKickedOut::default_instance_ = new ResNotifyClubKickedOut();
  ResNotifyClubChangeGameType::default_instance_ = new ResNotifyClubChangeGameType();
  AccountInfo::default_instance_->InitAsDefaultInstance();
  LastGameInfo::default_instance_->InitAsDefaultInstance();
  LastGameInfoDetail::default_instance_->InitAsDefaultInstance();
  GameZoneInfo::default_instance_->InitAsDefaultInstance();
  ServerInfoIpsSafeDetail::default_instance_->InitAsDefaultInstance();
  SafeIpAndPortDetail::default_instance_->InitAsDefaultInstance();
  GoldRoomServerInfos::default_instance_->InitAsDefaultInstance();
  OpenRoomReplaceRecordInfo::default_instance_->InitAsDefaultInstance();
  ReplaceRecordOver::default_instance_->InitAsDefaultInstance();
  TimesInfo::default_instance_->InitAsDefaultInstance();
  ReqGateLogin::default_instance_->InitAsDefaultInstance();
  ResGateLogin::default_instance_->InitAsDefaultInstance();
  ReqGetAccountInfo::default_instance_->InitAsDefaultInstance();
  ResGetAccountInfo::default_instance_->InitAsDefaultInstance();
  ReqGetGameZoneInfoList::default_instance_->InitAsDefaultInstance();
  ResGetGameZoneInfoList::default_instance_->InitAsDefaultInstance();
  ReqGetGameZoneDetail::default_instance_->InitAsDefaultInstance();
  ResGetGameZoneDetail::default_instance_->InitAsDefaultInstance();
  ReqJoinLogicGameRoom::default_instance_->InitAsDefaultInstance();
  ResJoinLogicGameRoom::default_instance_->InitAsDefaultInstance();
  ReqQuickJoinGameRoom::default_instance_->InitAsDefaultInstance();
  ResQuickJoinGameRoom::default_instance_->InitAsDefaultInstance();
  ResNotifyBroadPlatMarquee::default_instance_->InitAsDefaultInstance();
  ResNotifySelfDataChange::default_instance_->InitAsDefaultInstance();
  ReqGetRoomBrifeList::default_instance_->InitAsDefaultInstance();
  ResGetRoomBrifeList::default_instance_->InitAsDefaultInstance();
  ReqCheckInMatch::default_instance_->InitAsDefaultInstance();
  ResCheckInMatch::default_instance_->InitAsDefaultInstance();
  ReqOpenRoomReplace::default_instance_->InitAsDefaultInstance();
  ResOpenRoomReplace::default_instance_->InitAsDefaultInstance();
  ReqOpenRoomReplaceRecordList::default_instance_->InitAsDefaultInstance();
  ResOpenRoomReplaceRecord_List::default_instance_->InitAsDefaultInstance();
  ReqDissolutionOpenRoomReplace::default_instance_->InitAsDefaultInstance();
  ResDissolutionOpenRoomReplace::default_instance_->InitAsDefaultInstance();
  ReqGameRoomList::default_instance_->InitAsDefaultInstance();
  ResGameRoomList::default_instance_->InitAsDefaultInstance();
  GameRoomList::default_instance_->InitAsDefaultInstance();
  ReqClubGameRoomList::default_instance_->InitAsDefaultInstance();
  ResClubGameRoomList::default_instance_->InitAsDefaultInstance();
  ClubGameRoomList::default_instance_->InitAsDefaultInstance();
  RoomRoleInfo::default_instance_->InitAsDefaultInstance();
  ReqClubPipeiRoom::default_instance_->InitAsDefaultInstance();
  ResClubPipeiRoom::default_instance_->InitAsDefaultInstance();
  ReqExitClubPipeiRoom::default_instance_->InitAsDefaultInstance();
  ResExitClubPipeiRoom::default_instance_->InitAsDefaultInstance();
  ReqClubPipeiRoomStatus::default_instance_->InitAsDefaultInstance();
  ResClubPipeiRoomStatus::default_instance_->InitAsDefaultInstance();
  ResNotifyClubPipeiSuc::default_instance_->InitAsDefaultInstance();
  ResNotifyRefreshClubGameRoomList::default_instance_->InitAsDefaultInstance();
  ResNotifyRefreshClubRedBotNews::default_instance_->InitAsDefaultInstance();
  ResNotifyClubDismiss::default_instance_->InitAsDefaultInstance();
  ResNotifyClubKickedOut::default_instance_->InitAsDefaultInstance();
  ResNotifyClubChangeGameType::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_MsgGate_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_MsgGate_2eproto {
  StaticDescriptorInitializer_MsgGate_2eproto() {
    protobuf_AddDesc_MsgGate_2eproto();
  }
} static_descriptor_initializer_MsgGate_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int AccountInfo::kNameFieldNumber;
const int AccountInfo::kNickFieldNumber;
const int AccountInfo::kUidFieldNumber;
const int AccountInfo::kSexFieldNumber;
const int AccountInfo::kPhoneFieldNumber;
const int AccountInfo::kEmailFieldNumber;
const int AccountInfo::kHeadFieldNumber;
const int AccountInfo::kHeadUrlFieldNumber;
const int AccountInfo::kLvFieldNumber;
const int AccountInfo::kVipFieldNumber;
const int AccountInfo::kIpaddressFieldNumber;
const int AccountInfo::kAddressFieldNumber;
const int AccountInfo::kInviterFieldNumber;
const int AccountInfo::kCountsFieldNumber;
const int AccountInfo::kLastGameInfoFieldNumber;
#endif  // !_MSC_VER

AccountInfo::AccountInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AccountInfo::InitAsDefaultInstance() {
  lastgameinfo_ = const_cast< ::ProtoNet::LastGameInfo*>(&::ProtoNet::LastGameInfo::default_instance());
}

AccountInfo::AccountInfo(const AccountInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AccountInfo::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  nick_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  uid_ = 0;
  sex_ = 0;
  phone_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  email_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  head_ = 0;
  headurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  lv_ = 0;
  vip_ = 0;
  ipaddress_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  address_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  inviter_ = 0;
  lastgameinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AccountInfo::~AccountInfo() {
  SharedDtor();
}

void AccountInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (nick_ != &::google::protobuf::internal::kEmptyString) {
    delete nick_;
  }
  if (phone_ != &::google::protobuf::internal::kEmptyString) {
    delete phone_;
  }
  if (email_ != &::google::protobuf::internal::kEmptyString) {
    delete email_;
  }
  if (headurl_ != &::google::protobuf::internal::kEmptyString) {
    delete headurl_;
  }
  if (ipaddress_ != &::google::protobuf::internal::kEmptyString) {
    delete ipaddress_;
  }
  if (address_ != &::google::protobuf::internal::kEmptyString) {
    delete address_;
  }
  if (this != default_instance_) {
    delete lastgameinfo_;
  }
}

void AccountInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AccountInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AccountInfo_descriptor_;
}

const AccountInfo& AccountInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgGate_2eproto();
  return *default_instance_;
}

AccountInfo* AccountInfo::default_instance_ = NULL;

AccountInfo* AccountInfo::New() const {
  return new AccountInfo;
}

void AccountInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_nick()) {
      if (nick_ != &::google::protobuf::internal::kEmptyString) {
        nick_->clear();
      }
    }
    uid_ = 0;
    sex_ = 0;
    if (has_phone()) {
      if (phone_ != &::google::protobuf::internal::kEmptyString) {
        phone_->clear();
      }
    }
    if (has_email()) {
      if (email_ != &::google::protobuf::internal::kEmptyString) {
        email_->clear();
      }
    }
    head_ = 0;
    if (has_headurl()) {
      if (headurl_ != &::google::protobuf::internal::kEmptyString) {
        headurl_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    lv_ = 0;
    vip_ = 0;
    if (has_ipaddress()) {
      if (ipaddress_ != &::google::protobuf::internal::kEmptyString) {
        ipaddress_->clear();
      }
    }
    if (has_address()) {
      if (address_ != &::google::protobuf::internal::kEmptyString) {
        address_->clear();
      }
    }
    inviter_ = 0;
    if (has_lastgameinfo()) {
      if (lastgameinfo_ != NULL) lastgameinfo_->::ProtoNet::LastGameInfo::Clear();
    }
  }
  counts_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AccountInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_nick;
        break;
      }

      // optional string nick = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nick:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nick()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->nick().data(), this->nick().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_uid;
        break;
      }

      // optional int32 uid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_sex;
        break;
      }

      // optional int32 sex = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sex_)));
          set_has_sex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_phone;
        break;
      }

      // optional string phone = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_phone:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_phone()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->phone().data(), this->phone().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_email;
        break;
      }

      // optional string email = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_email:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_email()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->email().data(), this->email().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_head;
        break;
      }

      // optional int32 head = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_head:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &head_)));
          set_has_head();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_headUrl;
        break;
      }

      // optional string headUrl = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_headUrl:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_headurl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->headurl().data(), this->headurl().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_lv;
        break;
      }

      // optional int32 lv = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lv_)));
          set_has_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_vip;
        break;
      }

      // optional int32 vip = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vip_)));
          set_has_vip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_ipaddress;
        break;
      }

      // optional string ipaddress = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ipaddress:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ipaddress()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ipaddress().data(), this->ipaddress().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_address;
        break;
      }

      // optional string address = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_address:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_address()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->address().data(), this->address().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_inviter;
        break;
      }

      // optional int32 inviter = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_inviter:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &inviter_)));
          set_has_inviter();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_counts;
        break;
      }

      // repeated .ProtoNet.PlayerAccount counts = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_counts:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_counts()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_counts;
        if (input->ExpectTag(122)) goto parse_lastGameInfo;
        break;
      }

      // optional .ProtoNet.LastGameInfo lastGameInfo = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_lastGameInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_lastgameinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AccountInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // optional string nick = 2;
  if (has_nick()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nick().data(), this->nick().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->nick(), output);
  }

  // optional int32 uid = 3;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->uid(), output);
  }

  // optional int32 sex = 4;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->sex(), output);
  }

  // optional string phone = 5;
  if (has_phone()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->phone().data(), this->phone().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->phone(), output);
  }

  // optional string email = 6;
  if (has_email()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->email().data(), this->email().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->email(), output);
  }

  // optional int32 head = 7;
  if (has_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->head(), output);
  }

  // optional string headUrl = 8;
  if (has_headurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->headurl().data(), this->headurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->headurl(), output);
  }

  // optional int32 lv = 9;
  if (has_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->lv(), output);
  }

  // optional int32 vip = 10;
  if (has_vip()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->vip(), output);
  }

  // optional string ipaddress = 11;
  if (has_ipaddress()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ipaddress().data(), this->ipaddress().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->ipaddress(), output);
  }

  // optional string address = 12;
  if (has_address()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->address().data(), this->address().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->address(), output);
  }

  // optional int32 inviter = 13;
  if (has_inviter()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->inviter(), output);
  }

  // repeated .ProtoNet.PlayerAccount counts = 14;
  for (int i = 0; i < this->counts_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->counts(i), output);
  }

  // optional .ProtoNet.LastGameInfo lastGameInfo = 15;
  if (has_lastgameinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->lastgameinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AccountInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional string nick = 2;
  if (has_nick()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nick().data(), this->nick().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->nick(), target);
  }

  // optional int32 uid = 3;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->uid(), target);
  }

  // optional int32 sex = 4;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->sex(), target);
  }

  // optional string phone = 5;
  if (has_phone()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->phone().data(), this->phone().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->phone(), target);
  }

  // optional string email = 6;
  if (has_email()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->email().data(), this->email().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->email(), target);
  }

  // optional int32 head = 7;
  if (has_head()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->head(), target);
  }

  // optional string headUrl = 8;
  if (has_headurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->headurl().data(), this->headurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->headurl(), target);
  }

  // optional int32 lv = 9;
  if (has_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->lv(), target);
  }

  // optional int32 vip = 10;
  if (has_vip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->vip(), target);
  }

  // optional string ipaddress = 11;
  if (has_ipaddress()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ipaddress().data(), this->ipaddress().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->ipaddress(), target);
  }

  // optional string address = 12;
  if (has_address()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->address().data(), this->address().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->address(), target);
  }

  // optional int32 inviter = 13;
  if (has_inviter()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->inviter(), target);
  }

  // repeated .ProtoNet.PlayerAccount counts = 14;
  for (int i = 0; i < this->counts_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->counts(i), target);
  }

  // optional .ProtoNet.LastGameInfo lastGameInfo = 15;
  if (has_lastgameinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->lastgameinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AccountInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string nick = 2;
    if (has_nick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nick());
    }

    // optional int32 uid = 3;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->uid());
    }

    // optional int32 sex = 4;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sex());
    }

    // optional string phone = 5;
    if (has_phone()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->phone());
    }

    // optional string email = 6;
    if (has_email()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->email());
    }

    // optional int32 head = 7;
    if (has_head()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->head());
    }

    // optional string headUrl = 8;
    if (has_headurl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->headurl());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 lv = 9;
    if (has_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lv());
    }

    // optional int32 vip = 10;
    if (has_vip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vip());
    }

    // optional string ipaddress = 11;
    if (has_ipaddress()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ipaddress());
    }

    // optional string address = 12;
    if (has_address()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->address());
    }

    // optional int32 inviter = 13;
    if (has_inviter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->inviter());
    }

    // optional .ProtoNet.LastGameInfo lastGameInfo = 15;
    if (has_lastgameinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->lastgameinfo());
    }

  }
  // repeated .ProtoNet.PlayerAccount counts = 14;
  total_size += 1 * this->counts_size();
  for (int i = 0; i < this->counts_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->counts(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AccountInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AccountInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AccountInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AccountInfo::MergeFrom(const AccountInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  counts_.MergeFrom(from.counts_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_nick()) {
      set_nick(from.nick());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
    if (from.has_phone()) {
      set_phone(from.phone());
    }
    if (from.has_email()) {
      set_email(from.email());
    }
    if (from.has_head()) {
      set_head(from.head());
    }
    if (from.has_headurl()) {
      set_headurl(from.headurl());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_lv()) {
      set_lv(from.lv());
    }
    if (from.has_vip()) {
      set_vip(from.vip());
    }
    if (from.has_ipaddress()) {
      set_ipaddress(from.ipaddress());
    }
    if (from.has_address()) {
      set_address(from.address());
    }
    if (from.has_inviter()) {
      set_inviter(from.inviter());
    }
    if (from.has_lastgameinfo()) {
      mutable_lastgameinfo()->::ProtoNet::LastGameInfo::MergeFrom(from.lastgameinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AccountInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AccountInfo::CopyFrom(const AccountInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccountInfo::IsInitialized() const {

  return true;
}

void AccountInfo::Swap(AccountInfo* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(nick_, other->nick_);
    std::swap(uid_, other->uid_);
    std::swap(sex_, other->sex_);
    std::swap(phone_, other->phone_);
    std::swap(email_, other->email_);
    std::swap(head_, other->head_);
    std::swap(headurl_, other->headurl_);
    std::swap(lv_, other->lv_);
    std::swap(vip_, other->vip_);
    std::swap(ipaddress_, other->ipaddress_);
    std::swap(address_, other->address_);
    std::swap(inviter_, other->inviter_);
    counts_.Swap(&other->counts_);
    std::swap(lastgameinfo_, other->lastgameinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AccountInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AccountInfo_descriptor_;
  metadata.reflection = AccountInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LastGameInfo::kGameIdFieldNumber;
const int LastGameInfo::kDetailFieldNumber;
const int LastGameInfo::kGateFieldNumber;
const int LastGameInfo::kLogicFieldNumber;
#endif  // !_MSC_VER

LastGameInfo::LastGameInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LastGameInfo::InitAsDefaultInstance() {
  detail_ = const_cast< ::ProtoNet::LastGameInfoDetail*>(&::ProtoNet::LastGameInfoDetail::default_instance());
  gate_ = const_cast< ::ProtoNet::ServerInfoIpsSafeDetail*>(&::ProtoNet::ServerInfoIpsSafeDetail::default_instance());
  logic_ = const_cast< ::ProtoNet::ServerInfoIpsSafeDetail*>(&::ProtoNet::ServerInfoIpsSafeDetail::default_instance());
}

LastGameInfo::LastGameInfo(const LastGameInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LastGameInfo::SharedCtor() {
  _cached_size_ = 0;
  gameid_ = 0;
  detail_ = NULL;
  gate_ = NULL;
  logic_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LastGameInfo::~LastGameInfo() {
  SharedDtor();
}

void LastGameInfo::SharedDtor() {
  if (this != default_instance_) {
    delete detail_;
    delete gate_;
    delete logic_;
  }
}

void LastGameInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LastGameInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LastGameInfo_descriptor_;
}

const LastGameInfo& LastGameInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgGate_2eproto();
  return *default_instance_;
}

LastGameInfo* LastGameInfo::default_instance_ = NULL;

LastGameInfo* LastGameInfo::New() const {
  return new LastGameInfo;
}

void LastGameInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gameid_ = 0;
    if (has_detail()) {
      if (detail_ != NULL) detail_->::ProtoNet::LastGameInfoDetail::Clear();
    }
    if (has_gate()) {
      if (gate_ != NULL) gate_->::ProtoNet::ServerInfoIpsSafeDetail::Clear();
    }
    if (has_logic()) {
      if (logic_ != NULL) logic_->::ProtoNet::ServerInfoIpsSafeDetail::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LastGameInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 gameId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_detail;
        break;
      }

      // optional .ProtoNet.LastGameInfoDetail detail = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_detail:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_detail()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_gate;
        break;
      }

      // optional .ProtoNet.ServerInfoIpsSafeDetail gate = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gate()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_logic;
        break;
      }

      // optional .ProtoNet.ServerInfoIpsSafeDetail logic = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_logic:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_logic()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LastGameInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 gameId = 1;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->gameid(), output);
  }

  // optional .ProtoNet.LastGameInfoDetail detail = 2;
  if (has_detail()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->detail(), output);
  }

  // optional .ProtoNet.ServerInfoIpsSafeDetail gate = 3;
  if (has_gate()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->gate(), output);
  }

  // optional .ProtoNet.ServerInfoIpsSafeDetail logic = 4;
  if (has_logic()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->logic(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LastGameInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 gameId = 1;
  if (has_gameid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->gameid(), target);
  }

  // optional .ProtoNet.LastGameInfoDetail detail = 2;
  if (has_detail()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->detail(), target);
  }

  // optional .ProtoNet.ServerInfoIpsSafeDetail gate = 3;
  if (has_gate()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->gate(), target);
  }

  // optional .ProtoNet.ServerInfoIpsSafeDetail logic = 4;
  if (has_logic()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->logic(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LastGameInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 gameId = 1;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gameid());
    }

    // optional .ProtoNet.LastGameInfoDetail detail = 2;
    if (has_detail()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->detail());
    }

    // optional .ProtoNet.ServerInfoIpsSafeDetail gate = 3;
    if (has_gate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gate());
    }

    // optional .ProtoNet.ServerInfoIpsSafeDetail logic = 4;
    if (has_logic()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->logic());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LastGameInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LastGameInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LastGameInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LastGameInfo::MergeFrom(const LastGameInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_detail()) {
      mutable_detail()->::ProtoNet::LastGameInfoDetail::MergeFrom(from.detail());
    }
    if (from.has_gate()) {
      mutable_gate()->::ProtoNet::ServerInfoIpsSafeDetail::MergeFrom(from.gate());
    }
    if (from.has_logic()) {
      mutable_logic()->::ProtoNet::ServerInfoIpsSafeDetail::MergeFrom(from.logic());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LastGameInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LastGameInfo::CopyFrom(const LastGameInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LastGameInfo::IsInitialized() const {

  return true;
}

void LastGameInfo::Swap(LastGameInfo* other) {
  if (other != this) {
    std::swap(gameid_, other->gameid_);
    std::swap(detail_, other->detail_);
    std::swap(gate_, other->gate_);
    std::swap(logic_, other->logic_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LastGameInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LastGameInfo_descriptor_;
  metadata.reflection = LastGameInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LastGameInfoDetail::kTypeFieldNumber;
const int LastGameInfoDetail::kRoomIdFieldNumber;
const int LastGameInfoDetail::kStatusFieldNumber;
#endif  // !_MSC_VER

LastGameInfoDetail::LastGameInfoDetail()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LastGameInfoDetail::InitAsDefaultInstance() {
}

LastGameInfoDetail::LastGameInfoDetail(const LastGameInfoDetail& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LastGameInfoDetail::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  roomid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LastGameInfoDetail::~LastGameInfoDetail() {
  SharedDtor();
}

void LastGameInfoDetail::SharedDtor() {
  if (roomid_ != &::google::protobuf::internal::kEmptyString) {
    delete roomid_;
  }
  if (this != default_instance_) {
  }
}

void LastGameInfoDetail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LastGameInfoDetail::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LastGameInfoDetail_descriptor_;
}

const LastGameInfoDetail& LastGameInfoDetail::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgGate_2eproto();
  return *default_instance_;
}

LastGameInfoDetail* LastGameInfoDetail::default_instance_ = NULL;

LastGameInfoDetail* LastGameInfoDetail::New() const {
  return new LastGameInfoDetail;
}

void LastGameInfoDetail::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    if (has_roomid()) {
      if (roomid_ != &::google::protobuf::internal::kEmptyString) {
        roomid_->clear();
      }
    }
    status_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LastGameInfoDetail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_roomId;
        break;
      }

      // optional string roomId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_roomId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_roomid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->roomid().data(), this->roomid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_status;
        break;
      }

      // optional int32 status = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LastGameInfoDetail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // optional string roomId = 2;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->roomid().data(), this->roomid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->roomid(), output);
  }

  // optional int32 status = 3;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LastGameInfoDetail::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // optional string roomId = 2;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->roomid().data(), this->roomid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->roomid(), target);
  }

  // optional int32 status = 3;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LastGameInfoDetail::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional string roomId = 2;
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->roomid());
    }

    // optional int32 status = 3;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LastGameInfoDetail::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LastGameInfoDetail* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LastGameInfoDetail*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LastGameInfoDetail::MergeFrom(const LastGameInfoDetail& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LastGameInfoDetail::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LastGameInfoDetail::CopyFrom(const LastGameInfoDetail& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LastGameInfoDetail::IsInitialized() const {

  return true;
}

void LastGameInfoDetail::Swap(LastGameInfoDetail* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(roomid_, other->roomid_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LastGameInfoDetail::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LastGameInfoDetail_descriptor_;
  metadata.reflection = LastGameInfoDetail_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GameZoneInfo::kGameIdFieldNumber;
const int GameZoneInfo::kIsOpenFieldNumber;
#endif  // !_MSC_VER

GameZoneInfo::GameZoneInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GameZoneInfo::InitAsDefaultInstance() {
}

GameZoneInfo::GameZoneInfo(const GameZoneInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GameZoneInfo::SharedCtor() {
  _cached_size_ = 0;
  gameid_ = 0;
  isopen_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameZoneInfo::~GameZoneInfo() {
  SharedDtor();
}

void GameZoneInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GameZoneInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameZoneInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameZoneInfo_descriptor_;
}

const GameZoneInfo& GameZoneInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgGate_2eproto();
  return *default_instance_;
}

GameZoneInfo* GameZoneInfo::default_instance_ = NULL;

GameZoneInfo* GameZoneInfo::New() const {
  return new GameZoneInfo;
}

void GameZoneInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gameid_ = 0;
    isopen_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GameZoneInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 gameId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_isOpen;
        break;
      }

      // optional bool isOpen = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isOpen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isopen_)));
          set_has_isopen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GameZoneInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 gameId = 1;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->gameid(), output);
  }

  // optional bool isOpen = 3;
  if (has_isopen()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->isopen(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GameZoneInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 gameId = 1;
  if (has_gameid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->gameid(), target);
  }

  // optional bool isOpen = 3;
  if (has_isopen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->isopen(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GameZoneInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 gameId = 1;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gameid());
    }

    // optional bool isOpen = 3;
    if (has_isopen()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameZoneInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GameZoneInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GameZoneInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GameZoneInfo::MergeFrom(const GameZoneInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_isopen()) {
      set_isopen(from.isopen());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GameZoneInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameZoneInfo::CopyFrom(const GameZoneInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameZoneInfo::IsInitialized() const {

  return true;
}

void GameZoneInfo::Swap(GameZoneInfo* other) {
  if (other != this) {
    std::swap(gameid_, other->gameid_);
    std::swap(isopen_, other->isopen_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GameZoneInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GameZoneInfo_descriptor_;
  metadata.reflection = GameZoneInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ServerInfoIpsSafeDetail::kServerIdFieldNumber;
const int ServerInfoIpsSafeDetail::kServerNameFieldNumber;
const int ServerInfoIpsSafeDetail::kPlayerNumFieldNumber;
const int ServerInfoIpsSafeDetail::kIsOpenFieldNumber;
const int ServerInfoIpsSafeDetail::kSafeIpAndPortDetailsFieldNumber;
#endif  // !_MSC_VER

ServerInfoIpsSafeDetail::ServerInfoIpsSafeDetail()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ServerInfoIpsSafeDetail::InitAsDefaultInstance() {
}

ServerInfoIpsSafeDetail::ServerInfoIpsSafeDetail(const ServerInfoIpsSafeDetail& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ServerInfoIpsSafeDetail::SharedCtor() {
  _cached_size_ = 0;
  serverid_ = 0;
  servername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  playernum_ = 0;
  isopen_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServerInfoIpsSafeDetail::~ServerInfoIpsSafeDetail() {
  SharedDtor();
}

void ServerInfoIpsSafeDetail::SharedDtor() {
  if (servername_ != &::google::protobuf::internal::kEmptyString) {
    delete servername_;
  }
  if (this != default_instance_) {
  }
}

void ServerInfoIpsSafeDetail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServerInfoIpsSafeDetail::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServerInfoIpsSafeDetail_descriptor_;
}

const ServerInfoIpsSafeDetail& ServerInfoIpsSafeDetail::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgGate_2eproto();
  return *default_instance_;
}

ServerInfoIpsSafeDetail* ServerInfoIpsSafeDetail::default_instance_ = NULL;

ServerInfoIpsSafeDetail* ServerInfoIpsSafeDetail::New() const {
  return new ServerInfoIpsSafeDetail;
}

void ServerInfoIpsSafeDetail::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    serverid_ = 0;
    if (has_servername()) {
      if (servername_ != &::google::protobuf::internal::kEmptyString) {
        servername_->clear();
      }
    }
    playernum_ = 0;
    isopen_ = false;
  }
  safeipandportdetails_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ServerInfoIpsSafeDetail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 serverId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &serverid_)));
          set_has_serverid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_serverName;
        break;
      }

      // optional string serverName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_serverName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_servername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->servername().data(), this->servername().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_playerNum;
        break;
      }

      // optional int32 playerNum = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playerNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &playernum_)));
          set_has_playernum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_isOpen;
        break;
      }

      // optional bool isOpen = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isOpen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isopen_)));
          set_has_isopen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_safeIpAndPortDetails;
        break;
      }

      // repeated .ProtoNet.SafeIpAndPortDetail safeIpAndPortDetails = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_safeIpAndPortDetails:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_safeipandportdetails()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_safeIpAndPortDetails;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ServerInfoIpsSafeDetail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 serverId = 1;
  if (has_serverid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->serverid(), output);
  }

  // optional string serverName = 2;
  if (has_servername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->servername().data(), this->servername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->servername(), output);
  }

  // optional int32 playerNum = 3;
  if (has_playernum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->playernum(), output);
  }

  // optional bool isOpen = 4;
  if (has_isopen()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->isopen(), output);
  }

  // repeated .ProtoNet.SafeIpAndPortDetail safeIpAndPortDetails = 5;
  for (int i = 0; i < this->safeipandportdetails_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->safeipandportdetails(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ServerInfoIpsSafeDetail::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 serverId = 1;
  if (has_serverid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->serverid(), target);
  }

  // optional string serverName = 2;
  if (has_servername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->servername().data(), this->servername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->servername(), target);
  }

  // optional int32 playerNum = 3;
  if (has_playernum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->playernum(), target);
  }

  // optional bool isOpen = 4;
  if (has_isopen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->isopen(), target);
  }

  // repeated .ProtoNet.SafeIpAndPortDetail safeIpAndPortDetails = 5;
  for (int i = 0; i < this->safeipandportdetails_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->safeipandportdetails(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ServerInfoIpsSafeDetail::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 serverId = 1;
    if (has_serverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->serverid());
    }

    // optional string serverName = 2;
    if (has_servername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->servername());
    }

    // optional int32 playerNum = 3;
    if (has_playernum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->playernum());
    }

    // optional bool isOpen = 4;
    if (has_isopen()) {
      total_size += 1 + 1;
    }

  }
  // repeated .ProtoNet.SafeIpAndPortDetail safeIpAndPortDetails = 5;
  total_size += 1 * this->safeipandportdetails_size();
  for (int i = 0; i < this->safeipandportdetails_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->safeipandportdetails(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerInfoIpsSafeDetail::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ServerInfoIpsSafeDetail* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ServerInfoIpsSafeDetail*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ServerInfoIpsSafeDetail::MergeFrom(const ServerInfoIpsSafeDetail& from) {
  GOOGLE_CHECK_NE(&from, this);
  safeipandportdetails_.MergeFrom(from.safeipandportdetails_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_serverid()) {
      set_serverid(from.serverid());
    }
    if (from.has_servername()) {
      set_servername(from.servername());
    }
    if (from.has_playernum()) {
      set_playernum(from.playernum());
    }
    if (from.has_isopen()) {
      set_isopen(from.isopen());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ServerInfoIpsSafeDetail::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerInfoIpsSafeDetail::CopyFrom(const ServerInfoIpsSafeDetail& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerInfoIpsSafeDetail::IsInitialized() const {

  return true;
}

void ServerInfoIpsSafeDetail::Swap(ServerInfoIpsSafeDetail* other) {
  if (other != this) {
    std::swap(serverid_, other->serverid_);
    std::swap(servername_, other->servername_);
    std::swap(playernum_, other->playernum_);
    std::swap(isopen_, other->isopen_);
    safeipandportdetails_.Swap(&other->safeipandportdetails_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ServerInfoIpsSafeDetail::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServerInfoIpsSafeDetail_descriptor_;
  metadata.reflection = ServerInfoIpsSafeDetail_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SafeIpAndPortDetail::kSafeIpFieldNumber;
const int SafeIpAndPortDetail::kSafePortFieldNumber;
const int SafeIpAndPortDetail::kEvironmentFieldNumber;
const int SafeIpAndPortDetail::kSafeHttpPortFieldNumber;
#endif  // !_MSC_VER

SafeIpAndPortDetail::SafeIpAndPortDetail()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SafeIpAndPortDetail::InitAsDefaultInstance() {
}

SafeIpAndPortDetail::SafeIpAndPortDetail(const SafeIpAndPortDetail& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SafeIpAndPortDetail::SharedCtor() {
  _cached_size_ = 0;
  safeip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  safeport_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  evironment_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  safehttpport_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SafeIpAndPortDetail::~SafeIpAndPortDetail() {
  SharedDtor();
}

void SafeIpAndPortDetail::SharedDtor() {
  if (safeip_ != &::google::protobuf::internal::kEmptyString) {
    delete safeip_;
  }
  if (safeport_ != &::google::protobuf::internal::kEmptyString) {
    delete safeport_;
  }
  if (evironment_ != &::google::protobuf::internal::kEmptyString) {
    delete evironment_;
  }
  if (safehttpport_ != &::google::protobuf::internal::kEmptyString) {
    delete safehttpport_;
  }
  if (this != default_instance_) {
  }
}

void SafeIpAndPortDetail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SafeIpAndPortDetail::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SafeIpAndPortDetail_descriptor_;
}

const SafeIpAndPortDetail& SafeIpAndPortDetail::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgGate_2eproto();
  return *default_instance_;
}

SafeIpAndPortDetail* SafeIpAndPortDetail::default_instance_ = NULL;

SafeIpAndPortDetail* SafeIpAndPortDetail::New() const {
  return new SafeIpAndPortDetail;
}

void SafeIpAndPortDetail::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_safeip()) {
      if (safeip_ != &::google::protobuf::internal::kEmptyString) {
        safeip_->clear();
      }
    }
    if (has_safeport()) {
      if (safeport_ != &::google::protobuf::internal::kEmptyString) {
        safeport_->clear();
      }
    }
    if (has_evironment()) {
      if (evironment_ != &::google::protobuf::internal::kEmptyString) {
        evironment_->clear();
      }
    }
    if (has_safehttpport()) {
      if (safehttpport_ != &::google::protobuf::internal::kEmptyString) {
        safehttpport_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SafeIpAndPortDetail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string safeIp = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_safeip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->safeip().data(), this->safeip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_safePort;
        break;
      }

      // optional string safePort = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_safePort:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_safeport()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->safeport().data(), this->safeport().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_evironment;
        break;
      }

      // optional string evironment = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_evironment:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_evironment()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->evironment().data(), this->evironment().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_safeHttpPort;
        break;
      }

      // optional string safeHttpPort = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_safeHttpPort:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_safehttpport()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->safehttpport().data(), this->safehttpport().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SafeIpAndPortDetail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string safeIp = 1;
  if (has_safeip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->safeip().data(), this->safeip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->safeip(), output);
  }

  // optional string safePort = 2;
  if (has_safeport()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->safeport().data(), this->safeport().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->safeport(), output);
  }

  // optional string evironment = 3;
  if (has_evironment()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->evironment().data(), this->evironment().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->evironment(), output);
  }

  // optional string safeHttpPort = 4;
  if (has_safehttpport()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->safehttpport().data(), this->safehttpport().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->safehttpport(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SafeIpAndPortDetail::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string safeIp = 1;
  if (has_safeip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->safeip().data(), this->safeip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->safeip(), target);
  }

  // optional string safePort = 2;
  if (has_safeport()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->safeport().data(), this->safeport().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->safeport(), target);
  }

  // optional string evironment = 3;
  if (has_evironment()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->evironment().data(), this->evironment().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->evironment(), target);
  }

  // optional string safeHttpPort = 4;
  if (has_safehttpport()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->safehttpport().data(), this->safehttpport().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->safehttpport(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SafeIpAndPortDetail::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string safeIp = 1;
    if (has_safeip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->safeip());
    }

    // optional string safePort = 2;
    if (has_safeport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->safeport());
    }

    // optional string evironment = 3;
    if (has_evironment()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->evironment());
    }

    // optional string safeHttpPort = 4;
    if (has_safehttpport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->safehttpport());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SafeIpAndPortDetail::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SafeIpAndPortDetail* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SafeIpAndPortDetail*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SafeIpAndPortDetail::MergeFrom(const SafeIpAndPortDetail& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_safeip()) {
      set_safeip(from.safeip());
    }
    if (from.has_safeport()) {
      set_safeport(from.safeport());
    }
    if (from.has_evironment()) {
      set_evironment(from.evironment());
    }
    if (from.has_safehttpport()) {
      set_safehttpport(from.safehttpport());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SafeIpAndPortDetail::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SafeIpAndPortDetail::CopyFrom(const SafeIpAndPortDetail& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SafeIpAndPortDetail::IsInitialized() const {

  return true;
}

void SafeIpAndPortDetail::Swap(SafeIpAndPortDetail* other) {
  if (other != this) {
    std::swap(safeip_, other->safeip_);
    std::swap(safeport_, other->safeport_);
    std::swap(evironment_, other->evironment_);
    std::swap(safehttpport_, other->safehttpport_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SafeIpAndPortDetail::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SafeIpAndPortDetail_descriptor_;
  metadata.reflection = SafeIpAndPortDetail_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GoldRoomServerInfos::kRoomIdFieldNumber;
const int GoldRoomServerInfos::kRoomNameFieldNumber;
const int GoldRoomServerInfos::kRoomerUniqueIdFieldNumber;
const int GoldRoomServerInfos::kRoomerNickNameFieldNumber;
const int GoldRoomServerInfos::kRoomerHeadImgFieldNumber;
const int GoldRoomServerInfos::kRoomerHeadTypeFieldNumber;
const int GoldRoomServerInfos::kRoomTypeFieldNumber;
const int GoldRoomServerInfos::kGameIdFieldNumber;
const int GoldRoomServerInfos::kTimesTypeFieldNumber;
const int GoldRoomServerInfos::kServerInfoFieldNumber;
#endif  // !_MSC_VER

GoldRoomServerInfos::GoldRoomServerInfos()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GoldRoomServerInfos::InitAsDefaultInstance() {
  serverinfo_ = const_cast< ::ProtoNet::ServerInfoIpsSafeDetail*>(&::ProtoNet::ServerInfoIpsSafeDetail::default_instance());
}

GoldRoomServerInfos::GoldRoomServerInfos(const GoldRoomServerInfos& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GoldRoomServerInfos::SharedCtor() {
  _cached_size_ = 0;
  roomid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  roomname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  roomeruniqueid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  roomernickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  roomerheadimg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  roomerheadtype_ = 0;
  roomtype_ = 0;
  gameid_ = 0;
  timestype_ = 0;
  serverinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GoldRoomServerInfos::~GoldRoomServerInfos() {
  SharedDtor();
}

void GoldRoomServerInfos::SharedDtor() {
  if (roomid_ != &::google::protobuf::internal::kEmptyString) {
    delete roomid_;
  }
  if (roomname_ != &::google::protobuf::internal::kEmptyString) {
    delete roomname_;
  }
  if (roomeruniqueid_ != &::google::protobuf::internal::kEmptyString) {
    delete roomeruniqueid_;
  }
  if (roomernickname_ != &::google::protobuf::internal::kEmptyString) {
    delete roomernickname_;
  }
  if (roomerheadimg_ != &::google::protobuf::internal::kEmptyString) {
    delete roomerheadimg_;
  }
  if (this != default_instance_) {
    delete serverinfo_;
  }
}

void GoldRoomServerInfos::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GoldRoomServerInfos::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GoldRoomServerInfos_descriptor_;
}

const GoldRoomServerInfos& GoldRoomServerInfos::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgGate_2eproto();
  return *default_instance_;
}

GoldRoomServerInfos* GoldRoomServerInfos::default_instance_ = NULL;

GoldRoomServerInfos* GoldRoomServerInfos::New() const {
  return new GoldRoomServerInfos;
}

void GoldRoomServerInfos::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_roomid()) {
      if (roomid_ != &::google::protobuf::internal::kEmptyString) {
        roomid_->clear();
      }
    }
    if (has_roomname()) {
      if (roomname_ != &::google::protobuf::internal::kEmptyString) {
        roomname_->clear();
      }
    }
    if (has_roomeruniqueid()) {
      if (roomeruniqueid_ != &::google::protobuf::internal::kEmptyString) {
        roomeruniqueid_->clear();
      }
    }
    if (has_roomernickname()) {
      if (roomernickname_ != &::google::protobuf::internal::kEmptyString) {
        roomernickname_->clear();
      }
    }
    if (has_roomerheadimg()) {
      if (roomerheadimg_ != &::google::protobuf::internal::kEmptyString) {
        roomerheadimg_->clear();
      }
    }
    roomerheadtype_ = 0;
    roomtype_ = 0;
    gameid_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    timestype_ = 0;
    if (has_serverinfo()) {
      if (serverinfo_ != NULL) serverinfo_->::ProtoNet::ServerInfoIpsSafeDetail::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GoldRoomServerInfos::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string roomId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_roomid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->roomid().data(), this->roomid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_roomName;
        break;
      }

      // required string roomName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_roomName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_roomname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->roomname().data(), this->roomname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_roomerUniqueId;
        break;
      }

      // required string roomerUniqueId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_roomerUniqueId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_roomeruniqueid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->roomeruniqueid().data(), this->roomeruniqueid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_roomerNickName;
        break;
      }

      // required string roomerNickName = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_roomerNickName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_roomernickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->roomernickname().data(), this->roomernickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_roomerHeadImg;
        break;
      }

      // required string roomerHeadImg = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_roomerHeadImg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_roomerheadimg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->roomerheadimg().data(), this->roomerheadimg().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_roomerHeadType;
        break;
      }

      // required int32 roomerHeadType = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roomerHeadType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomerheadtype_)));
          set_has_roomerheadtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_roomType;
        break;
      }

      // required int32 roomType = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roomType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomtype_)));
          set_has_roomtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_gameId;
        break;
      }

      // required int32 gameId = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gameId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_timesType;
        break;
      }

      // required int32 timesType = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_timesType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &timestype_)));
          set_has_timestype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_serverInfo;
        break;
      }

      // required .ProtoNet.ServerInfoIpsSafeDetail serverInfo = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_serverInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_serverinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GoldRoomServerInfos::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string roomId = 1;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->roomid().data(), this->roomid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->roomid(), output);
  }

  // required string roomName = 2;
  if (has_roomname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->roomname().data(), this->roomname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->roomname(), output);
  }

  // required string roomerUniqueId = 3;
  if (has_roomeruniqueid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->roomeruniqueid().data(), this->roomeruniqueid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->roomeruniqueid(), output);
  }

  // required string roomerNickName = 4;
  if (has_roomernickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->roomernickname().data(), this->roomernickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->roomernickname(), output);
  }

  // required string roomerHeadImg = 5;
  if (has_roomerheadimg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->roomerheadimg().data(), this->roomerheadimg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->roomerheadimg(), output);
  }

  // required int32 roomerHeadType = 6;
  if (has_roomerheadtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->roomerheadtype(), output);
  }

  // required int32 roomType = 7;
  if (has_roomtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->roomtype(), output);
  }

  // required int32 gameId = 8;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->gameid(), output);
  }

  // required int32 timesType = 9;
  if (has_timestype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->timestype(), output);
  }

  // required .ProtoNet.ServerInfoIpsSafeDetail serverInfo = 10;
  if (has_serverinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->serverinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GoldRoomServerInfos::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string roomId = 1;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->roomid().data(), this->roomid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->roomid(), target);
  }

  // required string roomName = 2;
  if (has_roomname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->roomname().data(), this->roomname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->roomname(), target);
  }

  // required string roomerUniqueId = 3;
  if (has_roomeruniqueid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->roomeruniqueid().data(), this->roomeruniqueid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->roomeruniqueid(), target);
  }

  // required string roomerNickName = 4;
  if (has_roomernickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->roomernickname().data(), this->roomernickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->roomernickname(), target);
  }

  // required string roomerHeadImg = 5;
  if (has_roomerheadimg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->roomerheadimg().data(), this->roomerheadimg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->roomerheadimg(), target);
  }

  // required int32 roomerHeadType = 6;
  if (has_roomerheadtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->roomerheadtype(), target);
  }

  // required int32 roomType = 7;
  if (has_roomtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->roomtype(), target);
  }

  // required int32 gameId = 8;
  if (has_gameid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->gameid(), target);
  }

  // required int32 timesType = 9;
  if (has_timestype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->timestype(), target);
  }

  // required .ProtoNet.ServerInfoIpsSafeDetail serverInfo = 10;
  if (has_serverinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->serverinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GoldRoomServerInfos::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string roomId = 1;
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->roomid());
    }

    // required string roomName = 2;
    if (has_roomname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->roomname());
    }

    // required string roomerUniqueId = 3;
    if (has_roomeruniqueid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->roomeruniqueid());
    }

    // required string roomerNickName = 4;
    if (has_roomernickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->roomernickname());
    }

    // required string roomerHeadImg = 5;
    if (has_roomerheadimg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->roomerheadimg());
    }

    // required int32 roomerHeadType = 6;
    if (has_roomerheadtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roomerheadtype());
    }

    // required int32 roomType = 7;
    if (has_roomtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roomtype());
    }

    // required int32 gameId = 8;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gameid());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int32 timesType = 9;
    if (has_timestype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->timestype());
    }

    // required .ProtoNet.ServerInfoIpsSafeDetail serverInfo = 10;
    if (has_serverinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->serverinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GoldRoomServerInfos::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GoldRoomServerInfos* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GoldRoomServerInfos*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GoldRoomServerInfos::MergeFrom(const GoldRoomServerInfos& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
    if (from.has_roomname()) {
      set_roomname(from.roomname());
    }
    if (from.has_roomeruniqueid()) {
      set_roomeruniqueid(from.roomeruniqueid());
    }
    if (from.has_roomernickname()) {
      set_roomernickname(from.roomernickname());
    }
    if (from.has_roomerheadimg()) {
      set_roomerheadimg(from.roomerheadimg());
    }
    if (from.has_roomerheadtype()) {
      set_roomerheadtype(from.roomerheadtype());
    }
    if (from.has_roomtype()) {
      set_roomtype(from.roomtype());
    }
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_timestype()) {
      set_timestype(from.timestype());
    }
    if (from.has_serverinfo()) {
      mutable_serverinfo()->::ProtoNet::ServerInfoIpsSafeDetail::MergeFrom(from.serverinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GoldRoomServerInfos::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GoldRoomServerInfos::CopyFrom(const GoldRoomServerInfos& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GoldRoomServerInfos::IsInitialized() const {
  if ((_has_bits_[0] & 0x000003ff) != 0x000003ff) return false;

  return true;
}

void GoldRoomServerInfos::Swap(GoldRoomServerInfos* other) {
  if (other != this) {
    std::swap(roomid_, other->roomid_);
    std::swap(roomname_, other->roomname_);
    std::swap(roomeruniqueid_, other->roomeruniqueid_);
    std::swap(roomernickname_, other->roomernickname_);
    std::swap(roomerheadimg_, other->roomerheadimg_);
    std::swap(roomerheadtype_, other->roomerheadtype_);
    std::swap(roomtype_, other->roomtype_);
    std::swap(gameid_, other->gameid_);
    std::swap(timestype_, other->timestype_);
    std::swap(serverinfo_, other->serverinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GoldRoomServerInfos::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GoldRoomServerInfos_descriptor_;
  metadata.reflection = GoldRoomServerInfos_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OpenRoomReplaceRecordInfo::kRoomIdFieldNumber;
const int OpenRoomReplaceRecordInfo::kRoomerUniqueIdFieldNumber;
const int OpenRoomReplaceRecordInfo::kRoomerNickNameFieldNumber;
const int OpenRoomReplaceRecordInfo::kCreateTimeFieldNumber;
const int OpenRoomReplaceRecordInfo::kGameIdFieldNumber;
const int OpenRoomReplaceRecordInfo::kRoomTypeFieldNumber;
const int OpenRoomReplaceRecordInfo::kTimesTypeFieldNumber;
const int OpenRoomReplaceRecordInfo::kTotalTimeFieldNumber;
const int OpenRoomReplaceRecordInfo::kServerInfoFieldNumber;
const int OpenRoomReplaceRecordInfo::kTotalNumFieldNumber;
const int OpenRoomReplaceRecordInfo::kReplaceRecordOverFieldNumber;
const int OpenRoomReplaceRecordInfo::kJsonParamFieldNumber;
const int OpenRoomReplaceRecordInfo::kStatusFieldNumber;
#endif  // !_MSC_VER

OpenRoomReplaceRecordInfo::OpenRoomReplaceRecordInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OpenRoomReplaceRecordInfo::InitAsDefaultInstance() {
  serverinfo_ = const_cast< ::ProtoNet::ServerInfoIpsSafeDetail*>(&::ProtoNet::ServerInfoIpsSafeDetail::default_instance());
}

OpenRoomReplaceRecordInfo::OpenRoomReplaceRecordInfo(const OpenRoomReplaceRecordInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OpenRoomReplaceRecordInfo::SharedCtor() {
  _cached_size_ = 0;
  roomid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  roomeruniqueid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  roomernickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  createtime_ = GOOGLE_LONGLONG(0);
  gameid_ = 0;
  roomtype_ = 0;
  timestype_ = 0;
  totaltime_ = 0;
  serverinfo_ = NULL;
  totalnum_ = 0;
  jsonparam_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OpenRoomReplaceRecordInfo::~OpenRoomReplaceRecordInfo() {
  SharedDtor();
}

void OpenRoomReplaceRecordInfo::SharedDtor() {
  if (roomid_ != &::google::protobuf::internal::kEmptyString) {
    delete roomid_;
  }
  if (roomeruniqueid_ != &::google::protobuf::internal::kEmptyString) {
    delete roomeruniqueid_;
  }
  if (roomernickname_ != &::google::protobuf::internal::kEmptyString) {
    delete roomernickname_;
  }
  if (jsonparam_ != &::google::protobuf::internal::kEmptyString) {
    delete jsonparam_;
  }
  if (this != default_instance_) {
    delete serverinfo_;
  }
}

void OpenRoomReplaceRecordInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OpenRoomReplaceRecordInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OpenRoomReplaceRecordInfo_descriptor_;
}

const OpenRoomReplaceRecordInfo& OpenRoomReplaceRecordInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgGate_2eproto();
  return *default_instance_;
}

OpenRoomReplaceRecordInfo* OpenRoomReplaceRecordInfo::default_instance_ = NULL;

OpenRoomReplaceRecordInfo* OpenRoomReplaceRecordInfo::New() const {
  return new OpenRoomReplaceRecordInfo;
}

void OpenRoomReplaceRecordInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_roomid()) {
      if (roomid_ != &::google::protobuf::internal::kEmptyString) {
        roomid_->clear();
      }
    }
    if (has_roomeruniqueid()) {
      if (roomeruniqueid_ != &::google::protobuf::internal::kEmptyString) {
        roomeruniqueid_->clear();
      }
    }
    if (has_roomernickname()) {
      if (roomernickname_ != &::google::protobuf::internal::kEmptyString) {
        roomernickname_->clear();
      }
    }
    createtime_ = GOOGLE_LONGLONG(0);
    gameid_ = 0;
    roomtype_ = 0;
    timestype_ = 0;
    totaltime_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_serverinfo()) {
      if (serverinfo_ != NULL) serverinfo_->::ProtoNet::ServerInfoIpsSafeDetail::Clear();
    }
    totalnum_ = 0;
    if (has_jsonparam()) {
      if (jsonparam_ != &::google::protobuf::internal::kEmptyString) {
        jsonparam_->clear();
      }
    }
    status_ = 0;
  }
  replacerecordover_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OpenRoomReplaceRecordInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string roomId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_roomid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->roomid().data(), this->roomid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_roomerUniqueId;
        break;
      }

      // required string roomerUniqueId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_roomerUniqueId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_roomeruniqueid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->roomeruniqueid().data(), this->roomeruniqueid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_roomerNickName;
        break;
      }

      // required string roomerNickName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_roomerNickName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_roomernickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->roomernickname().data(), this->roomernickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_createTime;
        break;
      }

      // required int64 createTime = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_createTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &createtime_)));
          set_has_createtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_gameId;
        break;
      }

      // required int32 gameId = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gameId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_roomType;
        break;
      }

      // required int32 roomType = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roomType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomtype_)));
          set_has_roomtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_timesType;
        break;
      }

      // required int32 timesType = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_timesType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &timestype_)));
          set_has_timestype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_totalTime;
        break;
      }

      // required int32 totalTime = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_totalTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &totaltime_)));
          set_has_totaltime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_serverInfo;
        break;
      }

      // required .ProtoNet.ServerInfoIpsSafeDetail serverInfo = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_serverInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_serverinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_totalNum;
        break;
      }

      // required int32 totalNum = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_totalNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &totalnum_)));
          set_has_totalnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_replaceRecordOver;
        break;
      }

      // repeated .ProtoNet.ReplaceRecordOver replaceRecordOver = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_replaceRecordOver:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_replacerecordover()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_replaceRecordOver;
        if (input->ExpectTag(98)) goto parse_jsonParam;
        break;
      }

      // required string jsonParam = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_jsonParam:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_jsonparam()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->jsonparam().data(), this->jsonparam().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_status;
        break;
      }

      // required int32 status = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OpenRoomReplaceRecordInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string roomId = 1;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->roomid().data(), this->roomid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->roomid(), output);
  }

  // required string roomerUniqueId = 2;
  if (has_roomeruniqueid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->roomeruniqueid().data(), this->roomeruniqueid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->roomeruniqueid(), output);
  }

  // required string roomerNickName = 3;
  if (has_roomernickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->roomernickname().data(), this->roomernickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->roomernickname(), output);
  }

  // required int64 createTime = 4;
  if (has_createtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->createtime(), output);
  }

  // required int32 gameId = 5;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->gameid(), output);
  }

  // required int32 roomType = 6;
  if (has_roomtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->roomtype(), output);
  }

  // required int32 timesType = 7;
  if (has_timestype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->timestype(), output);
  }

  // required int32 totalTime = 8;
  if (has_totaltime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->totaltime(), output);
  }

  // required .ProtoNet.ServerInfoIpsSafeDetail serverInfo = 9;
  if (has_serverinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->serverinfo(), output);
  }

  // required int32 totalNum = 10;
  if (has_totalnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->totalnum(), output);
  }

  // repeated .ProtoNet.ReplaceRecordOver replaceRecordOver = 11;
  for (int i = 0; i < this->replacerecordover_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->replacerecordover(i), output);
  }

  // required string jsonParam = 12;
  if (has_jsonparam()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->jsonparam().data(), this->jsonparam().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->jsonparam(), output);
  }

  // required int32 status = 13;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OpenRoomReplaceRecordInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string roomId = 1;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->roomid().data(), this->roomid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->roomid(), target);
  }

  // required string roomerUniqueId = 2;
  if (has_roomeruniqueid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->roomeruniqueid().data(), this->roomeruniqueid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->roomeruniqueid(), target);
  }

  // required string roomerNickName = 3;
  if (has_roomernickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->roomernickname().data(), this->roomernickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->roomernickname(), target);
  }

  // required int64 createTime = 4;
  if (has_createtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->createtime(), target);
  }

  // required int32 gameId = 5;
  if (has_gameid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->gameid(), target);
  }

  // required int32 roomType = 6;
  if (has_roomtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->roomtype(), target);
  }

  // required int32 timesType = 7;
  if (has_timestype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->timestype(), target);
  }

  // required int32 totalTime = 8;
  if (has_totaltime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->totaltime(), target);
  }

  // required .ProtoNet.ServerInfoIpsSafeDetail serverInfo = 9;
  if (has_serverinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->serverinfo(), target);
  }

  // required int32 totalNum = 10;
  if (has_totalnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->totalnum(), target);
  }

  // repeated .ProtoNet.ReplaceRecordOver replaceRecordOver = 11;
  for (int i = 0; i < this->replacerecordover_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->replacerecordover(i), target);
  }

  // required string jsonParam = 12;
  if (has_jsonparam()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->jsonparam().data(), this->jsonparam().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->jsonparam(), target);
  }

  // required int32 status = 13;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OpenRoomReplaceRecordInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string roomId = 1;
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->roomid());
    }

    // required string roomerUniqueId = 2;
    if (has_roomeruniqueid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->roomeruniqueid());
    }

    // required string roomerNickName = 3;
    if (has_roomernickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->roomernickname());
    }

    // required int64 createTime = 4;
    if (has_createtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->createtime());
    }

    // required int32 gameId = 5;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gameid());
    }

    // required int32 roomType = 6;
    if (has_roomtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roomtype());
    }

    // required int32 timesType = 7;
    if (has_timestype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->timestype());
    }

    // required int32 totalTime = 8;
    if (has_totaltime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->totaltime());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required .ProtoNet.ServerInfoIpsSafeDetail serverInfo = 9;
    if (has_serverinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->serverinfo());
    }

    // required int32 totalNum = 10;
    if (has_totalnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->totalnum());
    }

    // required string jsonParam = 12;
    if (has_jsonparam()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->jsonparam());
    }

    // required int32 status = 13;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }

  }
  // repeated .ProtoNet.ReplaceRecordOver replaceRecordOver = 11;
  total_size += 1 * this->replacerecordover_size();
  for (int i = 0; i < this->replacerecordover_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->replacerecordover(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OpenRoomReplaceRecordInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OpenRoomReplaceRecordInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OpenRoomReplaceRecordInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OpenRoomReplaceRecordInfo::MergeFrom(const OpenRoomReplaceRecordInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  replacerecordover_.MergeFrom(from.replacerecordover_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
    if (from.has_roomeruniqueid()) {
      set_roomeruniqueid(from.roomeruniqueid());
    }
    if (from.has_roomernickname()) {
      set_roomernickname(from.roomernickname());
    }
    if (from.has_createtime()) {
      set_createtime(from.createtime());
    }
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_roomtype()) {
      set_roomtype(from.roomtype());
    }
    if (from.has_timestype()) {
      set_timestype(from.timestype());
    }
    if (from.has_totaltime()) {
      set_totaltime(from.totaltime());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_serverinfo()) {
      mutable_serverinfo()->::ProtoNet::ServerInfoIpsSafeDetail::MergeFrom(from.serverinfo());
    }
    if (from.has_totalnum()) {
      set_totalnum(from.totalnum());
    }
    if (from.has_jsonparam()) {
      set_jsonparam(from.jsonparam());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OpenRoomReplaceRecordInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OpenRoomReplaceRecordInfo::CopyFrom(const OpenRoomReplaceRecordInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpenRoomReplaceRecordInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00001bff) != 0x00001bff) return false;

  for (int i = 0; i < replacerecordover_size(); i++) {
    if (!this->replacerecordover(i).IsInitialized()) return false;
  }
  return true;
}

void OpenRoomReplaceRecordInfo::Swap(OpenRoomReplaceRecordInfo* other) {
  if (other != this) {
    std::swap(roomid_, other->roomid_);
    std::swap(roomeruniqueid_, other->roomeruniqueid_);
    std::swap(roomernickname_, other->roomernickname_);
    std::swap(createtime_, other->createtime_);
    std::swap(gameid_, other->gameid_);
    std::swap(roomtype_, other->roomtype_);
    std::swap(timestype_, other->timestype_);
    std::swap(totaltime_, other->totaltime_);
    std::swap(serverinfo_, other->serverinfo_);
    std::swap(totalnum_, other->totalnum_);
    replacerecordover_.Swap(&other->replacerecordover_);
    std::swap(jsonparam_, other->jsonparam_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OpenRoomReplaceRecordInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OpenRoomReplaceRecordInfo_descriptor_;
  metadata.reflection = OpenRoomReplaceRecordInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReplaceRecordOver::kUniqueIdFieldNumber;
const int ReplaceRecordOver::kNickFieldNumber;
const int ReplaceRecordOver::kHeadImgFieldNumber;
const int ReplaceRecordOver::kHeadFieldNumber;
const int ReplaceRecordOver::kScoreFieldNumber;
#endif  // !_MSC_VER

ReplaceRecordOver::ReplaceRecordOver()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReplaceRecordOver::InitAsDefaultInstance() {
}

ReplaceRecordOver::ReplaceRecordOver(const ReplaceRecordOver& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReplaceRecordOver::SharedCtor() {
  _cached_size_ = 0;
  uniqueid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  nick_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  headimg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  head_ = 0;
  score_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReplaceRecordOver::~ReplaceRecordOver() {
  SharedDtor();
}

void ReplaceRecordOver::SharedDtor() {
  if (uniqueid_ != &::google::protobuf::internal::kEmptyString) {
    delete uniqueid_;
  }
  if (nick_ != &::google::protobuf::internal::kEmptyString) {
    delete nick_;
  }
  if (headimg_ != &::google::protobuf::internal::kEmptyString) {
    delete headimg_;
  }
  if (this != default_instance_) {
  }
}

void ReplaceRecordOver::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReplaceRecordOver::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReplaceRecordOver_descriptor_;
}

const ReplaceRecordOver& ReplaceRecordOver::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgGate_2eproto();
  return *default_instance_;
}

ReplaceRecordOver* ReplaceRecordOver::default_instance_ = NULL;

ReplaceRecordOver* ReplaceRecordOver::New() const {
  return new ReplaceRecordOver;
}

void ReplaceRecordOver::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_uniqueid()) {
      if (uniqueid_ != &::google::protobuf::internal::kEmptyString) {
        uniqueid_->clear();
      }
    }
    if (has_nick()) {
      if (nick_ != &::google::protobuf::internal::kEmptyString) {
        nick_->clear();
      }
    }
    if (has_headimg()) {
      if (headimg_ != &::google::protobuf::internal::kEmptyString) {
        headimg_->clear();
      }
    }
    head_ = 0;
    score_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReplaceRecordOver::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string uniqueId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uniqueid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->uniqueid().data(), this->uniqueid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_nick;
        break;
      }

      // required string nick = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nick:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nick()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->nick().data(), this->nick().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_headImg;
        break;
      }

      // required string headImg = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_headImg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_headimg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->headimg().data(), this->headimg().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_head;
        break;
      }

      // required int32 head = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_head:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &head_)));
          set_has_head();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_score;
        break;
      }

      // optional double score = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReplaceRecordOver::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string uniqueId = 1;
  if (has_uniqueid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uniqueid().data(), this->uniqueid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->uniqueid(), output);
  }

  // required string nick = 2;
  if (has_nick()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nick().data(), this->nick().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->nick(), output);
  }

  // required string headImg = 3;
  if (has_headimg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->headimg().data(), this->headimg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->headimg(), output);
  }

  // required int32 head = 4;
  if (has_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->head(), output);
  }

  // optional double score = 5;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->score(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReplaceRecordOver::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string uniqueId = 1;
  if (has_uniqueid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uniqueid().data(), this->uniqueid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->uniqueid(), target);
  }

  // required string nick = 2;
  if (has_nick()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nick().data(), this->nick().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->nick(), target);
  }

  // required string headImg = 3;
  if (has_headimg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->headimg().data(), this->headimg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->headimg(), target);
  }

  // required int32 head = 4;
  if (has_head()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->head(), target);
  }

  // optional double score = 5;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->score(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReplaceRecordOver::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string uniqueId = 1;
    if (has_uniqueid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uniqueid());
    }

    // required string nick = 2;
    if (has_nick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nick());
    }

    // required string headImg = 3;
    if (has_headimg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->headimg());
    }

    // required int32 head = 4;
    if (has_head()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->head());
    }

    // optional double score = 5;
    if (has_score()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReplaceRecordOver::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReplaceRecordOver* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReplaceRecordOver*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReplaceRecordOver::MergeFrom(const ReplaceRecordOver& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uniqueid()) {
      set_uniqueid(from.uniqueid());
    }
    if (from.has_nick()) {
      set_nick(from.nick());
    }
    if (from.has_headimg()) {
      set_headimg(from.headimg());
    }
    if (from.has_head()) {
      set_head(from.head());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReplaceRecordOver::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReplaceRecordOver::CopyFrom(const ReplaceRecordOver& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReplaceRecordOver::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void ReplaceRecordOver::Swap(ReplaceRecordOver* other) {
  if (other != this) {
    std::swap(uniqueid_, other->uniqueid_);
    std::swap(nick_, other->nick_);
    std::swap(headimg_, other->headimg_);
    std::swap(head_, other->head_);
    std::swap(score_, other->score_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReplaceRecordOver::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReplaceRecordOver_descriptor_;
  metadata.reflection = ReplaceRecordOver_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TimesInfo::kTimesTypeFieldNumber;
const int TimesInfo::kTimesNameFieldNumber;
const int TimesInfo::kMinNeedFieldNumber;
const int TimesInfo::kYazhuFieldNumber;
const int TimesInfo::kAtypeFieldNumber;
const int TimesInfo::kRoomTypeFieldNumber;
const int TimesInfo::kExtendStrFieldNumber;
#endif  // !_MSC_VER

TimesInfo::TimesInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TimesInfo::InitAsDefaultInstance() {
}

TimesInfo::TimesInfo(const TimesInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TimesInfo::SharedCtor() {
  _cached_size_ = 0;
  timestype_ = 0;
  timesname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  minneed_ = 0;
  yazhu_ = 0;
  atype_ = 0;
  roomtype_ = 0;
  extendstr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TimesInfo::~TimesInfo() {
  SharedDtor();
}

void TimesInfo::SharedDtor() {
  if (timesname_ != &::google::protobuf::internal::kEmptyString) {
    delete timesname_;
  }
  if (extendstr_ != &::google::protobuf::internal::kEmptyString) {
    delete extendstr_;
  }
  if (this != default_instance_) {
  }
}

void TimesInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TimesInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TimesInfo_descriptor_;
}

const TimesInfo& TimesInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgGate_2eproto();
  return *default_instance_;
}

TimesInfo* TimesInfo::default_instance_ = NULL;

TimesInfo* TimesInfo::New() const {
  return new TimesInfo;
}

void TimesInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    timestype_ = 0;
    if (has_timesname()) {
      if (timesname_ != &::google::protobuf::internal::kEmptyString) {
        timesname_->clear();
      }
    }
    minneed_ = 0;
    yazhu_ = 0;
    atype_ = 0;
    roomtype_ = 0;
    if (has_extendstr()) {
      if (extendstr_ != &::google::protobuf::internal::kEmptyString) {
        extendstr_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TimesInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 timesType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &timestype_)));
          set_has_timestype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_timesName;
        break;
      }

      // required string timesName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_timesName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_timesname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->timesname().data(), this->timesname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_minNeed;
        break;
      }

      // required double minNeed = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_minNeed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &minneed_)));
          set_has_minneed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_yazhu;
        break;
      }

      // required double yazhu = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_yazhu:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &yazhu_)));
          set_has_yazhu();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_atype;
        break;
      }

      // required int32 atype = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_atype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &atype_)));
          set_has_atype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_roomType;
        break;
      }

      // required int32 roomType = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roomType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomtype_)));
          set_has_roomtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_extendStr;
        break;
      }

      // optional string extendStr = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_extendStr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_extendstr()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->extendstr().data(), this->extendstr().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TimesInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 timesType = 1;
  if (has_timestype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->timestype(), output);
  }

  // required string timesName = 2;
  if (has_timesname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->timesname().data(), this->timesname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->timesname(), output);
  }

  // required double minNeed = 3;
  if (has_minneed()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->minneed(), output);
  }

  // required double yazhu = 4;
  if (has_yazhu()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->yazhu(), output);
  }

  // required int32 atype = 5;
  if (has_atype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->atype(), output);
  }

  // required int32 roomType = 6;
  if (has_roomtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->roomtype(), output);
  }

  // optional string extendStr = 7;
  if (has_extendstr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->extendstr().data(), this->extendstr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->extendstr(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TimesInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 timesType = 1;
  if (has_timestype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->timestype(), target);
  }

  // required string timesName = 2;
  if (has_timesname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->timesname().data(), this->timesname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->timesname(), target);
  }

  // required double minNeed = 3;
  if (has_minneed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->minneed(), target);
  }

  // required double yazhu = 4;
  if (has_yazhu()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->yazhu(), target);
  }

  // required int32 atype = 5;
  if (has_atype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->atype(), target);
  }

  // required int32 roomType = 6;
  if (has_roomtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->roomtype(), target);
  }

  // optional string extendStr = 7;
  if (has_extendstr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->extendstr().data(), this->extendstr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->extendstr(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TimesInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 timesType = 1;
    if (has_timestype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->timestype());
    }

    // required string timesName = 2;
    if (has_timesname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->timesname());
    }

    // required double minNeed = 3;
    if (has_minneed()) {
      total_size += 1 + 8;
    }

    // required double yazhu = 4;
    if (has_yazhu()) {
      total_size += 1 + 8;
    }

    // required int32 atype = 5;
    if (has_atype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->atype());
    }

    // required int32 roomType = 6;
    if (has_roomtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roomtype());
    }

    // optional string extendStr = 7;
    if (has_extendstr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->extendstr());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TimesInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TimesInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TimesInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TimesInfo::MergeFrom(const TimesInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_timestype()) {
      set_timestype(from.timestype());
    }
    if (from.has_timesname()) {
      set_timesname(from.timesname());
    }
    if (from.has_minneed()) {
      set_minneed(from.minneed());
    }
    if (from.has_yazhu()) {
      set_yazhu(from.yazhu());
    }
    if (from.has_atype()) {
      set_atype(from.atype());
    }
    if (from.has_roomtype()) {
      set_roomtype(from.roomtype());
    }
    if (from.has_extendstr()) {
      set_extendstr(from.extendstr());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TimesInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TimesInfo::CopyFrom(const TimesInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TimesInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void TimesInfo::Swap(TimesInfo* other) {
  if (other != this) {
    std::swap(timestype_, other->timestype_);
    std::swap(timesname_, other->timesname_);
    std::swap(minneed_, other->minneed_);
    std::swap(yazhu_, other->yazhu_);
    std::swap(atype_, other->atype_);
    std::swap(roomtype_, other->roomtype_);
    std::swap(extendstr_, other->extendstr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TimesInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TimesInfo_descriptor_;
  metadata.reflection = TimesInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqGateLogin::kPlayerIdFieldNumber;
const int ReqGateLogin::kTicketFieldNumber;
const int ReqGateLogin::kEvironmentFieldNumber;
#endif  // !_MSC_VER

ReqGateLogin::ReqGateLogin()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqGateLogin::InitAsDefaultInstance() {
}

ReqGateLogin::ReqGateLogin(const ReqGateLogin& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqGateLogin::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = 0;
  ticket_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  evironment_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqGateLogin::~ReqGateLogin() {
  SharedDtor();
}

void ReqGateLogin::SharedDtor() {
  if (ticket_ != &::google::protobuf::internal::kEmptyString) {
    delete ticket_;
  }
  if (evironment_ != &::google::protobuf::internal::kEmptyString) {
    delete evironment_;
  }
  if (this != default_instance_) {
  }
}

void ReqGateLogin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqGateLogin::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqGateLogin_descriptor_;
}

const ReqGateLogin& ReqGateLogin::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgGate_2eproto();
  return *default_instance_;
}

ReqGateLogin* ReqGateLogin::default_instance_ = NULL;

ReqGateLogin* ReqGateLogin::New() const {
  return new ReqGateLogin;
}

void ReqGateLogin::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = 0;
    if (has_ticket()) {
      if (ticket_ != &::google::protobuf::internal::kEmptyString) {
        ticket_->clear();
      }
    }
    if (has_evironment()) {
      if (evironment_ != &::google::protobuf::internal::kEmptyString) {
        evironment_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqGateLogin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 playerId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ticket;
        break;
      }

      // required string ticket = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ticket:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ticket()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ticket().data(), this->ticket().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_evironment;
        break;
      }

      // required string evironment = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_evironment:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_evironment()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->evironment().data(), this->evironment().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqGateLogin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 playerId = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->playerid(), output);
  }

  // required string ticket = 2;
  if (has_ticket()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ticket().data(), this->ticket().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->ticket(), output);
  }

  // required string evironment = 3;
  if (has_evironment()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->evironment().data(), this->evironment().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->evironment(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqGateLogin::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 playerId = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->playerid(), target);
  }

  // required string ticket = 2;
  if (has_ticket()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ticket().data(), this->ticket().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->ticket(), target);
  }

  // required string evironment = 3;
  if (has_evironment()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->evironment().data(), this->evironment().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->evironment(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqGateLogin::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 playerId = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->playerid());
    }

    // required string ticket = 2;
    if (has_ticket()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ticket());
    }

    // required string evironment = 3;
    if (has_evironment()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->evironment());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqGateLogin::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqGateLogin* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqGateLogin*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqGateLogin::MergeFrom(const ReqGateLogin& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_ticket()) {
      set_ticket(from.ticket());
    }
    if (from.has_evironment()) {
      set_evironment(from.evironment());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqGateLogin::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqGateLogin::CopyFrom(const ReqGateLogin& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqGateLogin::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void ReqGateLogin::Swap(ReqGateLogin* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(ticket_, other->ticket_);
    std::swap(evironment_, other->evironment_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqGateLogin::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqGateLogin_descriptor_;
  metadata.reflection = ReqGateLogin_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResGateLogin::kResultFieldNumber;
#endif  // !_MSC_VER

ResGateLogin::ResGateLogin()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResGateLogin::InitAsDefaultInstance() {
  result_ = const_cast< ::ProtoNet::ResponseResult*>(&::ProtoNet::ResponseResult::default_instance());
}

ResGateLogin::ResGateLogin(const ResGateLogin& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResGateLogin::SharedCtor() {
  _cached_size_ = 0;
  result_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResGateLogin::~ResGateLogin() {
  SharedDtor();
}

void ResGateLogin::SharedDtor() {
  if (this != default_instance_) {
    delete result_;
  }
}

void ResGateLogin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResGateLogin::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResGateLogin_descriptor_;
}

const ResGateLogin& ResGateLogin::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgGate_2eproto();
  return *default_instance_;
}

ResGateLogin* ResGateLogin::default_instance_ = NULL;

ResGateLogin* ResGateLogin::New() const {
  return new ResGateLogin;
}

void ResGateLogin::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_result()) {
      if (result_ != NULL) result_->::ProtoNet::ResponseResult::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResGateLogin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ProtoNet.ResponseResult result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResGateLogin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .ProtoNet.ResponseResult result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResGateLogin::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .ProtoNet.ResponseResult result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResGateLogin::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ProtoNet.ResponseResult result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResGateLogin::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResGateLogin* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResGateLogin*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResGateLogin::MergeFrom(const ResGateLogin& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      mutable_result()->::ProtoNet::ResponseResult::MergeFrom(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResGateLogin::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResGateLogin::CopyFrom(const ResGateLogin& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResGateLogin::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_result()) {
    if (!this->result().IsInitialized()) return false;
  }
  return true;
}

void ResGateLogin::Swap(ResGateLogin* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResGateLogin::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResGateLogin_descriptor_;
  metadata.reflection = ResGateLogin_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqGetAccountInfo::kPlayerIdFieldNumber;
#endif  // !_MSC_VER

ReqGetAccountInfo::ReqGetAccountInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqGetAccountInfo::InitAsDefaultInstance() {
}

ReqGetAccountInfo::ReqGetAccountInfo(const ReqGetAccountInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqGetAccountInfo::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqGetAccountInfo::~ReqGetAccountInfo() {
  SharedDtor();
}

void ReqGetAccountInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqGetAccountInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqGetAccountInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqGetAccountInfo_descriptor_;
}

const ReqGetAccountInfo& ReqGetAccountInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgGate_2eproto();
  return *default_instance_;
}

ReqGetAccountInfo* ReqGetAccountInfo::default_instance_ = NULL;

ReqGetAccountInfo* ReqGetAccountInfo::New() const {
  return new ReqGetAccountInfo;
}

void ReqGetAccountInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqGetAccountInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 playerId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqGetAccountInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 playerId = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->playerid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqGetAccountInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 playerId = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->playerid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqGetAccountInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 playerId = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->playerid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqGetAccountInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqGetAccountInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqGetAccountInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqGetAccountInfo::MergeFrom(const ReqGetAccountInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqGetAccountInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqGetAccountInfo::CopyFrom(const ReqGetAccountInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqGetAccountInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ReqGetAccountInfo::Swap(ReqGetAccountInfo* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqGetAccountInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqGetAccountInfo_descriptor_;
  metadata.reflection = ReqGetAccountInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResGetAccountInfo::kResultFieldNumber;
const int ResGetAccountInfo::kAccountInfoFieldNumber;
#endif  // !_MSC_VER

ResGetAccountInfo::ResGetAccountInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResGetAccountInfo::InitAsDefaultInstance() {
  result_ = const_cast< ::ProtoNet::ResponseResult*>(&::ProtoNet::ResponseResult::default_instance());
  accountinfo_ = const_cast< ::ProtoNet::AccountInfo*>(&::ProtoNet::AccountInfo::default_instance());
}

ResGetAccountInfo::ResGetAccountInfo(const ResGetAccountInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResGetAccountInfo::SharedCtor() {
  _cached_size_ = 0;
  result_ = NULL;
  accountinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResGetAccountInfo::~ResGetAccountInfo() {
  SharedDtor();
}

void ResGetAccountInfo::SharedDtor() {
  if (this != default_instance_) {
    delete result_;
    delete accountinfo_;
  }
}

void ResGetAccountInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResGetAccountInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResGetAccountInfo_descriptor_;
}

const ResGetAccountInfo& ResGetAccountInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgGate_2eproto();
  return *default_instance_;
}

ResGetAccountInfo* ResGetAccountInfo::default_instance_ = NULL;

ResGetAccountInfo* ResGetAccountInfo::New() const {
  return new ResGetAccountInfo;
}

void ResGetAccountInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_result()) {
      if (result_ != NULL) result_->::ProtoNet::ResponseResult::Clear();
    }
    if (has_accountinfo()) {
      if (accountinfo_ != NULL) accountinfo_->::ProtoNet::AccountInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResGetAccountInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ProtoNet.ResponseResult result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_accountInfo;
        break;
      }

      // optional .ProtoNet.AccountInfo accountInfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_accountInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_accountinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResGetAccountInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .ProtoNet.ResponseResult result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->result(), output);
  }

  // optional .ProtoNet.AccountInfo accountInfo = 2;
  if (has_accountinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->accountinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResGetAccountInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .ProtoNet.ResponseResult result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->result(), target);
  }

  // optional .ProtoNet.AccountInfo accountInfo = 2;
  if (has_accountinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->accountinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResGetAccountInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ProtoNet.ResponseResult result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->result());
    }

    // optional .ProtoNet.AccountInfo accountInfo = 2;
    if (has_accountinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->accountinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResGetAccountInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResGetAccountInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResGetAccountInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResGetAccountInfo::MergeFrom(const ResGetAccountInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      mutable_result()->::ProtoNet::ResponseResult::MergeFrom(from.result());
    }
    if (from.has_accountinfo()) {
      mutable_accountinfo()->::ProtoNet::AccountInfo::MergeFrom(from.accountinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResGetAccountInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResGetAccountInfo::CopyFrom(const ResGetAccountInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResGetAccountInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_result()) {
    if (!this->result().IsInitialized()) return false;
  }
  return true;
}

void ResGetAccountInfo::Swap(ResGetAccountInfo* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(accountinfo_, other->accountinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResGetAccountInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResGetAccountInfo_descriptor_;
  metadata.reflection = ResGetAccountInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

ReqGetGameZoneInfoList::ReqGetGameZoneInfoList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqGetGameZoneInfoList::InitAsDefaultInstance() {
}

ReqGetGameZoneInfoList::ReqGetGameZoneInfoList(const ReqGetGameZoneInfoList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqGetGameZoneInfoList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqGetGameZoneInfoList::~ReqGetGameZoneInfoList() {
  SharedDtor();
}

void ReqGetGameZoneInfoList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqGetGameZoneInfoList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqGetGameZoneInfoList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqGetGameZoneInfoList_descriptor_;
}

const ReqGetGameZoneInfoList& ReqGetGameZoneInfoList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgGate_2eproto();
  return *default_instance_;
}

ReqGetGameZoneInfoList* ReqGetGameZoneInfoList::default_instance_ = NULL;

ReqGetGameZoneInfoList* ReqGetGameZoneInfoList::New() const {
  return new ReqGetGameZoneInfoList;
}

void ReqGetGameZoneInfoList::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqGetGameZoneInfoList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void ReqGetGameZoneInfoList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqGetGameZoneInfoList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqGetGameZoneInfoList::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqGetGameZoneInfoList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqGetGameZoneInfoList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqGetGameZoneInfoList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqGetGameZoneInfoList::MergeFrom(const ReqGetGameZoneInfoList& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqGetGameZoneInfoList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqGetGameZoneInfoList::CopyFrom(const ReqGetGameZoneInfoList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqGetGameZoneInfoList::IsInitialized() const {

  return true;
}

void ReqGetGameZoneInfoList::Swap(ReqGetGameZoneInfoList* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqGetGameZoneInfoList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqGetGameZoneInfoList_descriptor_;
  metadata.reflection = ReqGetGameZoneInfoList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResGetGameZoneInfoList::kResultFieldNumber;
const int ResGetGameZoneInfoList::kGameZoneInfosFieldNumber;
#endif  // !_MSC_VER

ResGetGameZoneInfoList::ResGetGameZoneInfoList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResGetGameZoneInfoList::InitAsDefaultInstance() {
  result_ = const_cast< ::ProtoNet::ResponseResult*>(&::ProtoNet::ResponseResult::default_instance());
}

ResGetGameZoneInfoList::ResGetGameZoneInfoList(const ResGetGameZoneInfoList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResGetGameZoneInfoList::SharedCtor() {
  _cached_size_ = 0;
  result_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResGetGameZoneInfoList::~ResGetGameZoneInfoList() {
  SharedDtor();
}

void ResGetGameZoneInfoList::SharedDtor() {
  if (this != default_instance_) {
    delete result_;
  }
}

void ResGetGameZoneInfoList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResGetGameZoneInfoList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResGetGameZoneInfoList_descriptor_;
}

const ResGetGameZoneInfoList& ResGetGameZoneInfoList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgGate_2eproto();
  return *default_instance_;
}

ResGetGameZoneInfoList* ResGetGameZoneInfoList::default_instance_ = NULL;

ResGetGameZoneInfoList* ResGetGameZoneInfoList::New() const {
  return new ResGetGameZoneInfoList;
}

void ResGetGameZoneInfoList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_result()) {
      if (result_ != NULL) result_->::ProtoNet::ResponseResult::Clear();
    }
  }
  gamezoneinfos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResGetGameZoneInfoList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ProtoNet.ResponseResult result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_gameZoneInfos;
        break;
      }

      // repeated .ProtoNet.GameZoneInfo gameZoneInfos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gameZoneInfos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_gamezoneinfos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_gameZoneInfos;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResGetGameZoneInfoList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .ProtoNet.ResponseResult result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->result(), output);
  }

  // repeated .ProtoNet.GameZoneInfo gameZoneInfos = 2;
  for (int i = 0; i < this->gamezoneinfos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->gamezoneinfos(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResGetGameZoneInfoList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .ProtoNet.ResponseResult result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->result(), target);
  }

  // repeated .ProtoNet.GameZoneInfo gameZoneInfos = 2;
  for (int i = 0; i < this->gamezoneinfos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->gamezoneinfos(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResGetGameZoneInfoList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ProtoNet.ResponseResult result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->result());
    }

  }
  // repeated .ProtoNet.GameZoneInfo gameZoneInfos = 2;
  total_size += 1 * this->gamezoneinfos_size();
  for (int i = 0; i < this->gamezoneinfos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->gamezoneinfos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResGetGameZoneInfoList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResGetGameZoneInfoList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResGetGameZoneInfoList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResGetGameZoneInfoList::MergeFrom(const ResGetGameZoneInfoList& from) {
  GOOGLE_CHECK_NE(&from, this);
  gamezoneinfos_.MergeFrom(from.gamezoneinfos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      mutable_result()->::ProtoNet::ResponseResult::MergeFrom(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResGetGameZoneInfoList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResGetGameZoneInfoList::CopyFrom(const ResGetGameZoneInfoList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResGetGameZoneInfoList::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_result()) {
    if (!this->result().IsInitialized()) return false;
  }
  return true;
}

void ResGetGameZoneInfoList::Swap(ResGetGameZoneInfoList* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    gamezoneinfos_.Swap(&other->gamezoneinfos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResGetGameZoneInfoList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResGetGameZoneInfoList_descriptor_;
  metadata.reflection = ResGetGameZoneInfoList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqGetGameZoneDetail::kGameIdFieldNumber;
const int ReqGetGameZoneDetail::kRoomTypeFieldNumber;
#endif  // !_MSC_VER

ReqGetGameZoneDetail::ReqGetGameZoneDetail()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqGetGameZoneDetail::InitAsDefaultInstance() {
}

ReqGetGameZoneDetail::ReqGetGameZoneDetail(const ReqGetGameZoneDetail& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqGetGameZoneDetail::SharedCtor() {
  _cached_size_ = 0;
  gameid_ = 0;
  roomtype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqGetGameZoneDetail::~ReqGetGameZoneDetail() {
  SharedDtor();
}

void ReqGetGameZoneDetail::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqGetGameZoneDetail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqGetGameZoneDetail::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqGetGameZoneDetail_descriptor_;
}

const ReqGetGameZoneDetail& ReqGetGameZoneDetail::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgGate_2eproto();
  return *default_instance_;
}

ReqGetGameZoneDetail* ReqGetGameZoneDetail::default_instance_ = NULL;

ReqGetGameZoneDetail* ReqGetGameZoneDetail::New() const {
  return new ReqGetGameZoneDetail;
}

void ReqGetGameZoneDetail::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gameid_ = 0;
    roomtype_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqGetGameZoneDetail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 gameId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_roomType;
        break;
      }

      // required int32 roomType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roomType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomtype_)));
          set_has_roomtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqGetGameZoneDetail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 gameId = 1;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->gameid(), output);
  }

  // required int32 roomType = 2;
  if (has_roomtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->roomtype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqGetGameZoneDetail::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 gameId = 1;
  if (has_gameid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->gameid(), target);
  }

  // required int32 roomType = 2;
  if (has_roomtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->roomtype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqGetGameZoneDetail::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 gameId = 1;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gameid());
    }

    // required int32 roomType = 2;
    if (has_roomtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roomtype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqGetGameZoneDetail::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqGetGameZoneDetail* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqGetGameZoneDetail*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqGetGameZoneDetail::MergeFrom(const ReqGetGameZoneDetail& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_roomtype()) {
      set_roomtype(from.roomtype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqGetGameZoneDetail::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqGetGameZoneDetail::CopyFrom(const ReqGetGameZoneDetail& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqGetGameZoneDetail::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ReqGetGameZoneDetail::Swap(ReqGetGameZoneDetail* other) {
  if (other != this) {
    std::swap(gameid_, other->gameid_);
    std::swap(roomtype_, other->roomtype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqGetGameZoneDetail::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqGetGameZoneDetail_descriptor_;
  metadata.reflection = ReqGetGameZoneDetail_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResGetGameZoneDetail::kResultFieldNumber;
const int ResGetGameZoneDetail::kGameIdFieldNumber;
const int ResGetGameZoneDetail::kLogicDetailsFieldNumber;
const int ResGetGameZoneDetail::kTimesInfosFieldNumber;
#endif  // !_MSC_VER

ResGetGameZoneDetail::ResGetGameZoneDetail()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResGetGameZoneDetail::InitAsDefaultInstance() {
  result_ = const_cast< ::ProtoNet::ResponseResult*>(&::ProtoNet::ResponseResult::default_instance());
}

ResGetGameZoneDetail::ResGetGameZoneDetail(const ResGetGameZoneDetail& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResGetGameZoneDetail::SharedCtor() {
  _cached_size_ = 0;
  result_ = NULL;
  gameid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResGetGameZoneDetail::~ResGetGameZoneDetail() {
  SharedDtor();
}

void ResGetGameZoneDetail::SharedDtor() {
  if (this != default_instance_) {
    delete result_;
  }
}

void ResGetGameZoneDetail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResGetGameZoneDetail::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResGetGameZoneDetail_descriptor_;
}

const ResGetGameZoneDetail& ResGetGameZoneDetail::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgGate_2eproto();
  return *default_instance_;
}

ResGetGameZoneDetail* ResGetGameZoneDetail::default_instance_ = NULL;

ResGetGameZoneDetail* ResGetGameZoneDetail::New() const {
  return new ResGetGameZoneDetail;
}

void ResGetGameZoneDetail::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_result()) {
      if (result_ != NULL) result_->::ProtoNet::ResponseResult::Clear();
    }
    gameid_ = 0;
  }
  logicdetails_.Clear();
  timesinfos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResGetGameZoneDetail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ProtoNet.ResponseResult result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gameId;
        break;
      }

      // optional int32 gameId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gameId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_logicDetails;
        break;
      }

      // repeated .ProtoNet.ServerInfoIpsSafeDetail logicDetails = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_logicDetails:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_logicdetails()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_logicDetails;
        if (input->ExpectTag(34)) goto parse_timesInfos;
        break;
      }

      // repeated .ProtoNet.TimesInfo timesInfos = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_timesInfos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_timesinfos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_timesInfos;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResGetGameZoneDetail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .ProtoNet.ResponseResult result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->result(), output);
  }

  // optional int32 gameId = 2;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->gameid(), output);
  }

  // repeated .ProtoNet.ServerInfoIpsSafeDetail logicDetails = 3;
  for (int i = 0; i < this->logicdetails_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->logicdetails(i), output);
  }

  // repeated .ProtoNet.TimesInfo timesInfos = 4;
  for (int i = 0; i < this->timesinfos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->timesinfos(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResGetGameZoneDetail::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .ProtoNet.ResponseResult result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->result(), target);
  }

  // optional int32 gameId = 2;
  if (has_gameid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->gameid(), target);
  }

  // repeated .ProtoNet.ServerInfoIpsSafeDetail logicDetails = 3;
  for (int i = 0; i < this->logicdetails_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->logicdetails(i), target);
  }

  // repeated .ProtoNet.TimesInfo timesInfos = 4;
  for (int i = 0; i < this->timesinfos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->timesinfos(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResGetGameZoneDetail::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ProtoNet.ResponseResult result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->result());
    }

    // optional int32 gameId = 2;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gameid());
    }

  }
  // repeated .ProtoNet.ServerInfoIpsSafeDetail logicDetails = 3;
  total_size += 1 * this->logicdetails_size();
  for (int i = 0; i < this->logicdetails_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->logicdetails(i));
  }

  // repeated .ProtoNet.TimesInfo timesInfos = 4;
  total_size += 1 * this->timesinfos_size();
  for (int i = 0; i < this->timesinfos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->timesinfos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResGetGameZoneDetail::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResGetGameZoneDetail* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResGetGameZoneDetail*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResGetGameZoneDetail::MergeFrom(const ResGetGameZoneDetail& from) {
  GOOGLE_CHECK_NE(&from, this);
  logicdetails_.MergeFrom(from.logicdetails_);
  timesinfos_.MergeFrom(from.timesinfos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      mutable_result()->::ProtoNet::ResponseResult::MergeFrom(from.result());
    }
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResGetGameZoneDetail::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResGetGameZoneDetail::CopyFrom(const ResGetGameZoneDetail& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResGetGameZoneDetail::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_result()) {
    if (!this->result().IsInitialized()) return false;
  }
  for (int i = 0; i < timesinfos_size(); i++) {
    if (!this->timesinfos(i).IsInitialized()) return false;
  }
  return true;
}

void ResGetGameZoneDetail::Swap(ResGetGameZoneDetail* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(gameid_, other->gameid_);
    logicdetails_.Swap(&other->logicdetails_);
    timesinfos_.Swap(&other->timesinfos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResGetGameZoneDetail::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResGetGameZoneDetail_descriptor_;
  metadata.reflection = ResGetGameZoneDetail_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqJoinLogicGameRoom::kRoomIdFieldNumber;
#endif  // !_MSC_VER

ReqJoinLogicGameRoom::ReqJoinLogicGameRoom()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqJoinLogicGameRoom::InitAsDefaultInstance() {
}

ReqJoinLogicGameRoom::ReqJoinLogicGameRoom(const ReqJoinLogicGameRoom& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqJoinLogicGameRoom::SharedCtor() {
  _cached_size_ = 0;
  roomid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqJoinLogicGameRoom::~ReqJoinLogicGameRoom() {
  SharedDtor();
}

void ReqJoinLogicGameRoom::SharedDtor() {
  if (roomid_ != &::google::protobuf::internal::kEmptyString) {
    delete roomid_;
  }
  if (this != default_instance_) {
  }
}

void ReqJoinLogicGameRoom::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqJoinLogicGameRoom::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqJoinLogicGameRoom_descriptor_;
}

const ReqJoinLogicGameRoom& ReqJoinLogicGameRoom::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgGate_2eproto();
  return *default_instance_;
}

ReqJoinLogicGameRoom* ReqJoinLogicGameRoom::default_instance_ = NULL;

ReqJoinLogicGameRoom* ReqJoinLogicGameRoom::New() const {
  return new ReqJoinLogicGameRoom;
}

void ReqJoinLogicGameRoom::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_roomid()) {
      if (roomid_ != &::google::protobuf::internal::kEmptyString) {
        roomid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqJoinLogicGameRoom::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string roomId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_roomid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->roomid().data(), this->roomid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqJoinLogicGameRoom::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string roomId = 1;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->roomid().data(), this->roomid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->roomid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqJoinLogicGameRoom::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string roomId = 1;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->roomid().data(), this->roomid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->roomid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqJoinLogicGameRoom::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string roomId = 1;
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->roomid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqJoinLogicGameRoom::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqJoinLogicGameRoom* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqJoinLogicGameRoom*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqJoinLogicGameRoom::MergeFrom(const ReqJoinLogicGameRoom& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqJoinLogicGameRoom::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqJoinLogicGameRoom::CopyFrom(const ReqJoinLogicGameRoom& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqJoinLogicGameRoom::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ReqJoinLogicGameRoom::Swap(ReqJoinLogicGameRoom* other) {
  if (other != this) {
    std::swap(roomid_, other->roomid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqJoinLogicGameRoom::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqJoinLogicGameRoom_descriptor_;
  metadata.reflection = ReqJoinLogicGameRoom_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResJoinLogicGameRoom::kResultFieldNumber;
const int ResJoinLogicGameRoom::kBestServerInfoFieldNumber;
const int ResJoinLogicGameRoom::kGameIdFieldNumber;
const int ResJoinLogicGameRoom::kRoomTypeFieldNumber;
const int ResJoinLogicGameRoom::kTimesTypeFieldNumber;
#endif  // !_MSC_VER

ResJoinLogicGameRoom::ResJoinLogicGameRoom()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResJoinLogicGameRoom::InitAsDefaultInstance() {
  result_ = const_cast< ::ProtoNet::ResponseResult*>(&::ProtoNet::ResponseResult::default_instance());
  bestserverinfo_ = const_cast< ::ProtoNet::ServerInfoIpsSafeDetail*>(&::ProtoNet::ServerInfoIpsSafeDetail::default_instance());
}

ResJoinLogicGameRoom::ResJoinLogicGameRoom(const ResJoinLogicGameRoom& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResJoinLogicGameRoom::SharedCtor() {
  _cached_size_ = 0;
  result_ = NULL;
  bestserverinfo_ = NULL;
  gameid_ = 0;
  roomtype_ = 0;
  timestype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResJoinLogicGameRoom::~ResJoinLogicGameRoom() {
  SharedDtor();
}

void ResJoinLogicGameRoom::SharedDtor() {
  if (this != default_instance_) {
    delete result_;
    delete bestserverinfo_;
  }
}

void ResJoinLogicGameRoom::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResJoinLogicGameRoom::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResJoinLogicGameRoom_descriptor_;
}

const ResJoinLogicGameRoom& ResJoinLogicGameRoom::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgGate_2eproto();
  return *default_instance_;
}

ResJoinLogicGameRoom* ResJoinLogicGameRoom::default_instance_ = NULL;

ResJoinLogicGameRoom* ResJoinLogicGameRoom::New() const {
  return new ResJoinLogicGameRoom;
}

void ResJoinLogicGameRoom::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_result()) {
      if (result_ != NULL) result_->::ProtoNet::ResponseResult::Clear();
    }
    if (has_bestserverinfo()) {
      if (bestserverinfo_ != NULL) bestserverinfo_->::ProtoNet::ServerInfoIpsSafeDetail::Clear();
    }
    gameid_ = 0;
    roomtype_ = 0;
    timestype_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResJoinLogicGameRoom::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ProtoNet.ResponseResult result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_bestServerInfo;
        break;
      }

      // optional .ProtoNet.ServerInfoIpsSafeDetail bestServerInfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bestServerInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bestserverinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_gameId;
        break;
      }

      // optional int32 gameId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gameId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_roomType;
        break;
      }

      // optional int32 roomType = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roomType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomtype_)));
          set_has_roomtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_timesType;
        break;
      }

      // optional int32 timesType = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_timesType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &timestype_)));
          set_has_timestype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResJoinLogicGameRoom::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .ProtoNet.ResponseResult result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->result(), output);
  }

  // optional .ProtoNet.ServerInfoIpsSafeDetail bestServerInfo = 2;
  if (has_bestserverinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->bestserverinfo(), output);
  }

  // optional int32 gameId = 3;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->gameid(), output);
  }

  // optional int32 roomType = 4;
  if (has_roomtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->roomtype(), output);
  }

  // optional int32 timesType = 5;
  if (has_timestype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->timestype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResJoinLogicGameRoom::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .ProtoNet.ResponseResult result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->result(), target);
  }

  // optional .ProtoNet.ServerInfoIpsSafeDetail bestServerInfo = 2;
  if (has_bestserverinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->bestserverinfo(), target);
  }

  // optional int32 gameId = 3;
  if (has_gameid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->gameid(), target);
  }

  // optional int32 roomType = 4;
  if (has_roomtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->roomtype(), target);
  }

  // optional int32 timesType = 5;
  if (has_timestype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->timestype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResJoinLogicGameRoom::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ProtoNet.ResponseResult result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->result());
    }

    // optional .ProtoNet.ServerInfoIpsSafeDetail bestServerInfo = 2;
    if (has_bestserverinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->bestserverinfo());
    }

    // optional int32 gameId = 3;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gameid());
    }

    // optional int32 roomType = 4;
    if (has_roomtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roomtype());
    }

    // optional int32 timesType = 5;
    if (has_timestype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->timestype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResJoinLogicGameRoom::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResJoinLogicGameRoom* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResJoinLogicGameRoom*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResJoinLogicGameRoom::MergeFrom(const ResJoinLogicGameRoom& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      mutable_result()->::ProtoNet::ResponseResult::MergeFrom(from.result());
    }
    if (from.has_bestserverinfo()) {
      mutable_bestserverinfo()->::ProtoNet::ServerInfoIpsSafeDetail::MergeFrom(from.bestserverinfo());
    }
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_roomtype()) {
      set_roomtype(from.roomtype());
    }
    if (from.has_timestype()) {
      set_timestype(from.timestype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResJoinLogicGameRoom::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResJoinLogicGameRoom::CopyFrom(const ResJoinLogicGameRoom& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResJoinLogicGameRoom::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_result()) {
    if (!this->result().IsInitialized()) return false;
  }
  return true;
}

void ResJoinLogicGameRoom::Swap(ResJoinLogicGameRoom* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(bestserverinfo_, other->bestserverinfo_);
    std::swap(gameid_, other->gameid_);
    std::swap(roomtype_, other->roomtype_);
    std::swap(timestype_, other->timestype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResJoinLogicGameRoom::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResJoinLogicGameRoom_descriptor_;
  metadata.reflection = ResJoinLogicGameRoom_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqQuickJoinGameRoom::kGameIdFieldNumber;
const int ReqQuickJoinGameRoom::kRoomTypeFieldNumber;
const int ReqQuickJoinGameRoom::kTimesTypeFieldNumber;
const int ReqQuickJoinGameRoom::kPipeiParamFieldNumber;
#endif  // !_MSC_VER

ReqQuickJoinGameRoom::ReqQuickJoinGameRoom()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqQuickJoinGameRoom::InitAsDefaultInstance() {
}

ReqQuickJoinGameRoom::ReqQuickJoinGameRoom(const ReqQuickJoinGameRoom& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqQuickJoinGameRoom::SharedCtor() {
  _cached_size_ = 0;
  gameid_ = 0;
  roomtype_ = 0;
  timestype_ = 0;
  pipeiparam_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqQuickJoinGameRoom::~ReqQuickJoinGameRoom() {
  SharedDtor();
}

void ReqQuickJoinGameRoom::SharedDtor() {
  if (pipeiparam_ != &::google::protobuf::internal::kEmptyString) {
    delete pipeiparam_;
  }
  if (this != default_instance_) {
  }
}

void ReqQuickJoinGameRoom::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqQuickJoinGameRoom::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqQuickJoinGameRoom_descriptor_;
}

const ReqQuickJoinGameRoom& ReqQuickJoinGameRoom::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgGate_2eproto();
  return *default_instance_;
}

ReqQuickJoinGameRoom* ReqQuickJoinGameRoom::default_instance_ = NULL;

ReqQuickJoinGameRoom* ReqQuickJoinGameRoom::New() const {
  return new ReqQuickJoinGameRoom;
}

void ReqQuickJoinGameRoom::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gameid_ = 0;
    roomtype_ = 0;
    timestype_ = 0;
    if (has_pipeiparam()) {
      if (pipeiparam_ != &::google::protobuf::internal::kEmptyString) {
        pipeiparam_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqQuickJoinGameRoom::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 gameId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_roomType;
        break;
      }

      // required int32 roomType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roomType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomtype_)));
          set_has_roomtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_timesType;
        break;
      }

      // required int32 timesType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_timesType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &timestype_)));
          set_has_timestype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_pipeiParam;
        break;
      }

      // optional string pipeiParam = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pipeiParam:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pipeiparam()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->pipeiparam().data(), this->pipeiparam().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqQuickJoinGameRoom::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 gameId = 1;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->gameid(), output);
  }

  // required int32 roomType = 2;
  if (has_roomtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->roomtype(), output);
  }

  // required int32 timesType = 3;
  if (has_timestype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->timestype(), output);
  }

  // optional string pipeiParam = 4;
  if (has_pipeiparam()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pipeiparam().data(), this->pipeiparam().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->pipeiparam(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqQuickJoinGameRoom::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 gameId = 1;
  if (has_gameid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->gameid(), target);
  }

  // required int32 roomType = 2;
  if (has_roomtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->roomtype(), target);
  }

  // required int32 timesType = 3;
  if (has_timestype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->timestype(), target);
  }

  // optional string pipeiParam = 4;
  if (has_pipeiparam()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pipeiparam().data(), this->pipeiparam().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->pipeiparam(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqQuickJoinGameRoom::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 gameId = 1;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gameid());
    }

    // required int32 roomType = 2;
    if (has_roomtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roomtype());
    }

    // required int32 timesType = 3;
    if (has_timestype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->timestype());
    }

    // optional string pipeiParam = 4;
    if (has_pipeiparam()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pipeiparam());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqQuickJoinGameRoom::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqQuickJoinGameRoom* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqQuickJoinGameRoom*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqQuickJoinGameRoom::MergeFrom(const ReqQuickJoinGameRoom& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_roomtype()) {
      set_roomtype(from.roomtype());
    }
    if (from.has_timestype()) {
      set_timestype(from.timestype());
    }
    if (from.has_pipeiparam()) {
      set_pipeiparam(from.pipeiparam());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqQuickJoinGameRoom::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqQuickJoinGameRoom::CopyFrom(const ReqQuickJoinGameRoom& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqQuickJoinGameRoom::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void ReqQuickJoinGameRoom::Swap(ReqQuickJoinGameRoom* other) {
  if (other != this) {
    std::swap(gameid_, other->gameid_);
    std::swap(roomtype_, other->roomtype_);
    std::swap(timestype_, other->timestype_);
    std::swap(pipeiparam_, other->pipeiparam_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqQuickJoinGameRoom::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqQuickJoinGameRoom_descriptor_;
  metadata.reflection = ReqQuickJoinGameRoom_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResQuickJoinGameRoom::kResultFieldNumber;
const int ResQuickJoinGameRoom::kOperateFieldNumber;
const int ResQuickJoinGameRoom::kRoomTypeFieldNumber;
const int ResQuickJoinGameRoom::kBestServerInfoFieldNumber;
const int ResQuickJoinGameRoom::kRoomIdFieldNumber;
const int ResQuickJoinGameRoom::kLogicDetailsFieldNumber;
const int ResQuickJoinGameRoom::kGameIdFieldNumber;
const int ResQuickJoinGameRoom::kTimesTypeFieldNumber;
#endif  // !_MSC_VER

ResQuickJoinGameRoom::ResQuickJoinGameRoom()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResQuickJoinGameRoom::InitAsDefaultInstance() {
  result_ = const_cast< ::ProtoNet::ResponseResult*>(&::ProtoNet::ResponseResult::default_instance());
  bestserverinfo_ = const_cast< ::ProtoNet::ServerInfoIpsSafeDetail*>(&::ProtoNet::ServerInfoIpsSafeDetail::default_instance());
}

ResQuickJoinGameRoom::ResQuickJoinGameRoom(const ResQuickJoinGameRoom& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResQuickJoinGameRoom::SharedCtor() {
  _cached_size_ = 0;
  result_ = NULL;
  operate_ = 0;
  roomtype_ = 0;
  bestserverinfo_ = NULL;
  roomid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  gameid_ = 0;
  timestype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResQuickJoinGameRoom::~ResQuickJoinGameRoom() {
  SharedDtor();
}

void ResQuickJoinGameRoom::SharedDtor() {
  if (roomid_ != &::google::protobuf::internal::kEmptyString) {
    delete roomid_;
  }
  if (this != default_instance_) {
    delete result_;
    delete bestserverinfo_;
  }
}

void ResQuickJoinGameRoom::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResQuickJoinGameRoom::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResQuickJoinGameRoom_descriptor_;
}

const ResQuickJoinGameRoom& ResQuickJoinGameRoom::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgGate_2eproto();
  return *default_instance_;
}

ResQuickJoinGameRoom* ResQuickJoinGameRoom::default_instance_ = NULL;

ResQuickJoinGameRoom* ResQuickJoinGameRoom::New() const {
  return new ResQuickJoinGameRoom;
}

void ResQuickJoinGameRoom::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_result()) {
      if (result_ != NULL) result_->::ProtoNet::ResponseResult::Clear();
    }
    operate_ = 0;
    roomtype_ = 0;
    if (has_bestserverinfo()) {
      if (bestserverinfo_ != NULL) bestserverinfo_->::ProtoNet::ServerInfoIpsSafeDetail::Clear();
    }
    if (has_roomid()) {
      if (roomid_ != &::google::protobuf::internal::kEmptyString) {
        roomid_->clear();
      }
    }
    gameid_ = 0;
    timestype_ = 0;
  }
  logicdetails_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResQuickJoinGameRoom::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ProtoNet.ResponseResult result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_operate;
        break;
      }

      // optional int32 operate = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_operate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &operate_)));
          set_has_operate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_roomType;
        break;
      }

      // optional int32 roomType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roomType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomtype_)));
          set_has_roomtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_bestServerInfo;
        break;
      }

      // optional .ProtoNet.ServerInfoIpsSafeDetail bestServerInfo = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bestServerInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bestserverinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_roomId;
        break;
      }

      // optional string roomId = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_roomId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_roomid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->roomid().data(), this->roomid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_logicDetails;
        break;
      }

      // repeated .ProtoNet.ServerInfoIpsSafeDetail logicDetails = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_logicDetails:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_logicdetails()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_logicDetails;
        if (input->ExpectTag(56)) goto parse_gameId;
        break;
      }

      // optional int32 gameId = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gameId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_timesType;
        break;
      }

      // optional int32 timesType = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_timesType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &timestype_)));
          set_has_timestype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResQuickJoinGameRoom::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .ProtoNet.ResponseResult result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->result(), output);
  }

  // optional int32 operate = 2;
  if (has_operate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->operate(), output);
  }

  // optional int32 roomType = 3;
  if (has_roomtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->roomtype(), output);
  }

  // optional .ProtoNet.ServerInfoIpsSafeDetail bestServerInfo = 4;
  if (has_bestserverinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->bestserverinfo(), output);
  }

  // optional string roomId = 5;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->roomid().data(), this->roomid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->roomid(), output);
  }

  // repeated .ProtoNet.ServerInfoIpsSafeDetail logicDetails = 6;
  for (int i = 0; i < this->logicdetails_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->logicdetails(i), output);
  }

  // optional int32 gameId = 7;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->gameid(), output);
  }

  // optional int32 timesType = 8;
  if (has_timestype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->timestype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResQuickJoinGameRoom::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .ProtoNet.ResponseResult result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->result(), target);
  }

  // optional int32 operate = 2;
  if (has_operate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->operate(), target);
  }

  // optional int32 roomType = 3;
  if (has_roomtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->roomtype(), target);
  }

  // optional .ProtoNet.ServerInfoIpsSafeDetail bestServerInfo = 4;
  if (has_bestserverinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->bestserverinfo(), target);
  }

  // optional string roomId = 5;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->roomid().data(), this->roomid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->roomid(), target);
  }

  // repeated .ProtoNet.ServerInfoIpsSafeDetail logicDetails = 6;
  for (int i = 0; i < this->logicdetails_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->logicdetails(i), target);
  }

  // optional int32 gameId = 7;
  if (has_gameid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->gameid(), target);
  }

  // optional int32 timesType = 8;
  if (has_timestype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->timestype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResQuickJoinGameRoom::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ProtoNet.ResponseResult result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->result());
    }

    // optional int32 operate = 2;
    if (has_operate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->operate());
    }

    // optional int32 roomType = 3;
    if (has_roomtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roomtype());
    }

    // optional .ProtoNet.ServerInfoIpsSafeDetail bestServerInfo = 4;
    if (has_bestserverinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->bestserverinfo());
    }

    // optional string roomId = 5;
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->roomid());
    }

    // optional int32 gameId = 7;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gameid());
    }

    // optional int32 timesType = 8;
    if (has_timestype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->timestype());
    }

  }
  // repeated .ProtoNet.ServerInfoIpsSafeDetail logicDetails = 6;
  total_size += 1 * this->logicdetails_size();
  for (int i = 0; i < this->logicdetails_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->logicdetails(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResQuickJoinGameRoom::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResQuickJoinGameRoom* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResQuickJoinGameRoom*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResQuickJoinGameRoom::MergeFrom(const ResQuickJoinGameRoom& from) {
  GOOGLE_CHECK_NE(&from, this);
  logicdetails_.MergeFrom(from.logicdetails_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      mutable_result()->::ProtoNet::ResponseResult::MergeFrom(from.result());
    }
    if (from.has_operate()) {
      set_operate(from.operate());
    }
    if (from.has_roomtype()) {
      set_roomtype(from.roomtype());
    }
    if (from.has_bestserverinfo()) {
      mutable_bestserverinfo()->::ProtoNet::ServerInfoIpsSafeDetail::MergeFrom(from.bestserverinfo());
    }
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_timestype()) {
      set_timestype(from.timestype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResQuickJoinGameRoom::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResQuickJoinGameRoom::CopyFrom(const ResQuickJoinGameRoom& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResQuickJoinGameRoom::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_result()) {
    if (!this->result().IsInitialized()) return false;
  }
  return true;
}

void ResQuickJoinGameRoom::Swap(ResQuickJoinGameRoom* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(operate_, other->operate_);
    std::swap(roomtype_, other->roomtype_);
    std::swap(bestserverinfo_, other->bestserverinfo_);
    std::swap(roomid_, other->roomid_);
    logicdetails_.Swap(&other->logicdetails_);
    std::swap(gameid_, other->gameid_);
    std::swap(timestype_, other->timestype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResQuickJoinGameRoom::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResQuickJoinGameRoom_descriptor_;
  metadata.reflection = ResQuickJoinGameRoom_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResNotifyBroadPlatMarquee::kTypeFieldNumber;
const int ResNotifyBroadPlatMarquee::kMsgFieldNumber;
const int ResNotifyBroadPlatMarquee::kCountFieldNumber;
#endif  // !_MSC_VER

ResNotifyBroadPlatMarquee::ResNotifyBroadPlatMarquee()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResNotifyBroadPlatMarquee::InitAsDefaultInstance() {
}

ResNotifyBroadPlatMarquee::ResNotifyBroadPlatMarquee(const ResNotifyBroadPlatMarquee& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResNotifyBroadPlatMarquee::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResNotifyBroadPlatMarquee::~ResNotifyBroadPlatMarquee() {
  SharedDtor();
}

void ResNotifyBroadPlatMarquee::SharedDtor() {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_;
  }
  if (this != default_instance_) {
  }
}

void ResNotifyBroadPlatMarquee::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResNotifyBroadPlatMarquee::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResNotifyBroadPlatMarquee_descriptor_;
}

const ResNotifyBroadPlatMarquee& ResNotifyBroadPlatMarquee::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgGate_2eproto();
  return *default_instance_;
}

ResNotifyBroadPlatMarquee* ResNotifyBroadPlatMarquee::default_instance_ = NULL;

ResNotifyBroadPlatMarquee* ResNotifyBroadPlatMarquee::New() const {
  return new ResNotifyBroadPlatMarquee;
}

void ResNotifyBroadPlatMarquee::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    if (has_msg()) {
      if (msg_ != &::google::protobuf::internal::kEmptyString) {
        msg_->clear();
      }
    }
    count_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResNotifyBroadPlatMarquee::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_msg;
        break;
      }

      // required string msg = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msg().data(), this->msg().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_count;
        break;
      }

      // required int32 count = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResNotifyBroadPlatMarquee::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // required string msg = 2;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->msg(), output);
  }

  // required int32 count = 3;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResNotifyBroadPlatMarquee::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // required string msg = 2;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->msg(), target);
  }

  // required int32 count = 3;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResNotifyBroadPlatMarquee::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // required string msg = 2;
    if (has_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msg());
    }

    // required int32 count = 3;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResNotifyBroadPlatMarquee::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResNotifyBroadPlatMarquee* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResNotifyBroadPlatMarquee*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResNotifyBroadPlatMarquee::MergeFrom(const ResNotifyBroadPlatMarquee& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_msg()) {
      set_msg(from.msg());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResNotifyBroadPlatMarquee::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResNotifyBroadPlatMarquee::CopyFrom(const ResNotifyBroadPlatMarquee& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResNotifyBroadPlatMarquee::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void ResNotifyBroadPlatMarquee::Swap(ResNotifyBroadPlatMarquee* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(msg_, other->msg_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResNotifyBroadPlatMarquee::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResNotifyBroadPlatMarquee_descriptor_;
  metadata.reflection = ResNotifyBroadPlatMarquee_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResNotifySelfDataChange::kAccountInfoFieldNumber;
const int ResNotifySelfDataChange::kChargeFieldNumber;
#endif  // !_MSC_VER

ResNotifySelfDataChange::ResNotifySelfDataChange()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResNotifySelfDataChange::InitAsDefaultInstance() {
  accountinfo_ = const_cast< ::ProtoNet::AccountInfo*>(&::ProtoNet::AccountInfo::default_instance());
}

ResNotifySelfDataChange::ResNotifySelfDataChange(const ResNotifySelfDataChange& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResNotifySelfDataChange::SharedCtor() {
  _cached_size_ = 0;
  accountinfo_ = NULL;
  charge_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResNotifySelfDataChange::~ResNotifySelfDataChange() {
  SharedDtor();
}

void ResNotifySelfDataChange::SharedDtor() {
  if (this != default_instance_) {
    delete accountinfo_;
  }
}

void ResNotifySelfDataChange::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResNotifySelfDataChange::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResNotifySelfDataChange_descriptor_;
}

const ResNotifySelfDataChange& ResNotifySelfDataChange::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgGate_2eproto();
  return *default_instance_;
}

ResNotifySelfDataChange* ResNotifySelfDataChange::default_instance_ = NULL;

ResNotifySelfDataChange* ResNotifySelfDataChange::New() const {
  return new ResNotifySelfDataChange;
}

void ResNotifySelfDataChange::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_accountinfo()) {
      if (accountinfo_ != NULL) accountinfo_->::ProtoNet::AccountInfo::Clear();
    }
    charge_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResNotifySelfDataChange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ProtoNet.AccountInfo accountInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_accountinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_charge;
        break;
      }

      // optional int32 charge = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_charge:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &charge_)));
          set_has_charge();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResNotifySelfDataChange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .ProtoNet.AccountInfo accountInfo = 1;
  if (has_accountinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->accountinfo(), output);
  }

  // optional int32 charge = 2;
  if (has_charge()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->charge(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResNotifySelfDataChange::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .ProtoNet.AccountInfo accountInfo = 1;
  if (has_accountinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->accountinfo(), target);
  }

  // optional int32 charge = 2;
  if (has_charge()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->charge(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResNotifySelfDataChange::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ProtoNet.AccountInfo accountInfo = 1;
    if (has_accountinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->accountinfo());
    }

    // optional int32 charge = 2;
    if (has_charge()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->charge());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResNotifySelfDataChange::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResNotifySelfDataChange* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResNotifySelfDataChange*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResNotifySelfDataChange::MergeFrom(const ResNotifySelfDataChange& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_accountinfo()) {
      mutable_accountinfo()->::ProtoNet::AccountInfo::MergeFrom(from.accountinfo());
    }
    if (from.has_charge()) {
      set_charge(from.charge());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResNotifySelfDataChange::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResNotifySelfDataChange::CopyFrom(const ResNotifySelfDataChange& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResNotifySelfDataChange::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ResNotifySelfDataChange::Swap(ResNotifySelfDataChange* other) {
  if (other != this) {
    std::swap(accountinfo_, other->accountinfo_);
    std::swap(charge_, other->charge_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResNotifySelfDataChange::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResNotifySelfDataChange_descriptor_;
  metadata.reflection = ResNotifySelfDataChange_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqGetRoomBrifeList::kGameIdFieldNumber;
#endif  // !_MSC_VER

ReqGetRoomBrifeList::ReqGetRoomBrifeList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqGetRoomBrifeList::InitAsDefaultInstance() {
}

ReqGetRoomBrifeList::ReqGetRoomBrifeList(const ReqGetRoomBrifeList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqGetRoomBrifeList::SharedCtor() {
  _cached_size_ = 0;
  gameid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqGetRoomBrifeList::~ReqGetRoomBrifeList() {
  SharedDtor();
}

void ReqGetRoomBrifeList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqGetRoomBrifeList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqGetRoomBrifeList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqGetRoomBrifeList_descriptor_;
}

const ReqGetRoomBrifeList& ReqGetRoomBrifeList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgGate_2eproto();
  return *default_instance_;
}

ReqGetRoomBrifeList* ReqGetRoomBrifeList::default_instance_ = NULL;

ReqGetRoomBrifeList* ReqGetRoomBrifeList::New() const {
  return new ReqGetRoomBrifeList;
}

void ReqGetRoomBrifeList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gameid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqGetRoomBrifeList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 gameId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqGetRoomBrifeList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 gameId = 1;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->gameid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqGetRoomBrifeList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 gameId = 1;
  if (has_gameid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->gameid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqGetRoomBrifeList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 gameId = 1;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gameid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqGetRoomBrifeList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqGetRoomBrifeList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqGetRoomBrifeList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqGetRoomBrifeList::MergeFrom(const ReqGetRoomBrifeList& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqGetRoomBrifeList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqGetRoomBrifeList::CopyFrom(const ReqGetRoomBrifeList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqGetRoomBrifeList::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ReqGetRoomBrifeList::Swap(ReqGetRoomBrifeList* other) {
  if (other != this) {
    std::swap(gameid_, other->gameid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqGetRoomBrifeList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqGetRoomBrifeList_descriptor_;
  metadata.reflection = ReqGetRoomBrifeList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResGetRoomBrifeList::kResultFieldNumber;
const int ResGetRoomBrifeList::kGoldRoomServerInfosFieldNumber;
#endif  // !_MSC_VER

ResGetRoomBrifeList::ResGetRoomBrifeList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResGetRoomBrifeList::InitAsDefaultInstance() {
  result_ = const_cast< ::ProtoNet::ResponseResult*>(&::ProtoNet::ResponseResult::default_instance());
}

ResGetRoomBrifeList::ResGetRoomBrifeList(const ResGetRoomBrifeList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResGetRoomBrifeList::SharedCtor() {
  _cached_size_ = 0;
  result_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResGetRoomBrifeList::~ResGetRoomBrifeList() {
  SharedDtor();
}

void ResGetRoomBrifeList::SharedDtor() {
  if (this != default_instance_) {
    delete result_;
  }
}

void ResGetRoomBrifeList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResGetRoomBrifeList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResGetRoomBrifeList_descriptor_;
}

const ResGetRoomBrifeList& ResGetRoomBrifeList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgGate_2eproto();
  return *default_instance_;
}

ResGetRoomBrifeList* ResGetRoomBrifeList::default_instance_ = NULL;

ResGetRoomBrifeList* ResGetRoomBrifeList::New() const {
  return new ResGetRoomBrifeList;
}

void ResGetRoomBrifeList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_result()) {
      if (result_ != NULL) result_->::ProtoNet::ResponseResult::Clear();
    }
  }
  goldroomserverinfos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResGetRoomBrifeList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ProtoNet.ResponseResult result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_goldRoomServerInfos;
        break;
      }

      // repeated .ProtoNet.GoldRoomServerInfos goldRoomServerInfos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_goldRoomServerInfos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_goldroomserverinfos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_goldRoomServerInfos;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResGetRoomBrifeList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .ProtoNet.ResponseResult result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->result(), output);
  }

  // repeated .ProtoNet.GoldRoomServerInfos goldRoomServerInfos = 2;
  for (int i = 0; i < this->goldroomserverinfos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->goldroomserverinfos(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResGetRoomBrifeList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .ProtoNet.ResponseResult result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->result(), target);
  }

  // repeated .ProtoNet.GoldRoomServerInfos goldRoomServerInfos = 2;
  for (int i = 0; i < this->goldroomserverinfos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->goldroomserverinfos(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResGetRoomBrifeList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ProtoNet.ResponseResult result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->result());
    }

  }
  // repeated .ProtoNet.GoldRoomServerInfos goldRoomServerInfos = 2;
  total_size += 1 * this->goldroomserverinfos_size();
  for (int i = 0; i < this->goldroomserverinfos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->goldroomserverinfos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResGetRoomBrifeList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResGetRoomBrifeList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResGetRoomBrifeList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResGetRoomBrifeList::MergeFrom(const ResGetRoomBrifeList& from) {
  GOOGLE_CHECK_NE(&from, this);
  goldroomserverinfos_.MergeFrom(from.goldroomserverinfos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      mutable_result()->::ProtoNet::ResponseResult::MergeFrom(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResGetRoomBrifeList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResGetRoomBrifeList::CopyFrom(const ResGetRoomBrifeList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResGetRoomBrifeList::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_result()) {
    if (!this->result().IsInitialized()) return false;
  }
  for (int i = 0; i < goldroomserverinfos_size(); i++) {
    if (!this->goldroomserverinfos(i).IsInitialized()) return false;
  }
  return true;
}

void ResGetRoomBrifeList::Swap(ResGetRoomBrifeList* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    goldroomserverinfos_.Swap(&other->goldroomserverinfos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResGetRoomBrifeList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResGetRoomBrifeList_descriptor_;
  metadata.reflection = ResGetRoomBrifeList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

ReqCheckInMatch::ReqCheckInMatch()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqCheckInMatch::InitAsDefaultInstance() {
}

ReqCheckInMatch::ReqCheckInMatch(const ReqCheckInMatch& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqCheckInMatch::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqCheckInMatch::~ReqCheckInMatch() {
  SharedDtor();
}

void ReqCheckInMatch::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqCheckInMatch::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqCheckInMatch::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqCheckInMatch_descriptor_;
}

const ReqCheckInMatch& ReqCheckInMatch::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgGate_2eproto();
  return *default_instance_;
}

ReqCheckInMatch* ReqCheckInMatch::default_instance_ = NULL;

ReqCheckInMatch* ReqCheckInMatch::New() const {
  return new ReqCheckInMatch;
}

void ReqCheckInMatch::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqCheckInMatch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void ReqCheckInMatch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqCheckInMatch::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqCheckInMatch::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqCheckInMatch::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqCheckInMatch* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqCheckInMatch*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqCheckInMatch::MergeFrom(const ReqCheckInMatch& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqCheckInMatch::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqCheckInMatch::CopyFrom(const ReqCheckInMatch& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqCheckInMatch::IsInitialized() const {

  return true;
}

void ReqCheckInMatch::Swap(ReqCheckInMatch* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqCheckInMatch::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqCheckInMatch_descriptor_;
  metadata.reflection = ReqCheckInMatch_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResCheckInMatch::kResultFieldNumber;
const int ResCheckInMatch::kInMatchFieldNumber;
const int ResCheckInMatch::kRandIdFieldNumber;
const int ResCheckInMatch::kMatchConfigIdFieldNumber;
const int ResCheckInMatch::kGameIdFieldNumber;
const int ResCheckInMatch::kSelfRankFieldNumber;
const int ResCheckInMatch::kFromFieldNumber;
const int ResCheckInMatch::kToFieldNumber;
const int ResCheckInMatch::kTaotaiFieldNumber;
#endif  // !_MSC_VER

ResCheckInMatch::ResCheckInMatch()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResCheckInMatch::InitAsDefaultInstance() {
  result_ = const_cast< ::ProtoNet::ResponseResult*>(&::ProtoNet::ResponseResult::default_instance());
}

ResCheckInMatch::ResCheckInMatch(const ResCheckInMatch& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResCheckInMatch::SharedCtor() {
  _cached_size_ = 0;
  result_ = NULL;
  inmatch_ = 0;
  randid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  matchconfigid_ = 0;
  gameid_ = 0;
  selfrank_ = 0;
  from_ = 0;
  to_ = 0;
  taotai_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResCheckInMatch::~ResCheckInMatch() {
  SharedDtor();
}

void ResCheckInMatch::SharedDtor() {
  if (randid_ != &::google::protobuf::internal::kEmptyString) {
    delete randid_;
  }
  if (this != default_instance_) {
    delete result_;
  }
}

void ResCheckInMatch::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResCheckInMatch::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResCheckInMatch_descriptor_;
}

const ResCheckInMatch& ResCheckInMatch::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgGate_2eproto();
  return *default_instance_;
}

ResCheckInMatch* ResCheckInMatch::default_instance_ = NULL;

ResCheckInMatch* ResCheckInMatch::New() const {
  return new ResCheckInMatch;
}

void ResCheckInMatch::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_result()) {
      if (result_ != NULL) result_->::ProtoNet::ResponseResult::Clear();
    }
    inmatch_ = 0;
    if (has_randid()) {
      if (randid_ != &::google::protobuf::internal::kEmptyString) {
        randid_->clear();
      }
    }
    matchconfigid_ = 0;
    gameid_ = 0;
    selfrank_ = 0;
    from_ = 0;
    to_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    taotai_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResCheckInMatch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ProtoNet.ResponseResult result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_inMatch;
        break;
      }

      // optional int32 inMatch = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_inMatch:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &inmatch_)));
          set_has_inmatch();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_randId;
        break;
      }

      // optional string randId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_randId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_randid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->randid().data(), this->randid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_matchConfigId;
        break;
      }

      // optional int32 matchConfigId = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_matchConfigId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &matchconfigid_)));
          set_has_matchconfigid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_gameId;
        break;
      }

      // optional int32 gameId = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gameId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_selfRank;
        break;
      }

      // optional int32 selfRank = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_selfRank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &selfrank_)));
          set_has_selfrank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_from;
        break;
      }

      // optional int32 from = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_from:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &from_)));
          set_has_from();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_to;
        break;
      }

      // optional int32 to = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_to:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &to_)));
          set_has_to();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_taotai;
        break;
      }

      // optional int32 taotai = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_taotai:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &taotai_)));
          set_has_taotai();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResCheckInMatch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .ProtoNet.ResponseResult result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->result(), output);
  }

  // optional int32 inMatch = 2;
  if (has_inmatch()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->inmatch(), output);
  }

  // optional string randId = 3;
  if (has_randid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->randid().data(), this->randid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->randid(), output);
  }

  // optional int32 matchConfigId = 4;
  if (has_matchconfigid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->matchconfigid(), output);
  }

  // optional int32 gameId = 5;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->gameid(), output);
  }

  // optional int32 selfRank = 6;
  if (has_selfrank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->selfrank(), output);
  }

  // optional int32 from = 7;
  if (has_from()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->from(), output);
  }

  // optional int32 to = 8;
  if (has_to()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->to(), output);
  }

  // optional int32 taotai = 9;
  if (has_taotai()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->taotai(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResCheckInMatch::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .ProtoNet.ResponseResult result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->result(), target);
  }

  // optional int32 inMatch = 2;
  if (has_inmatch()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->inmatch(), target);
  }

  // optional string randId = 3;
  if (has_randid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->randid().data(), this->randid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->randid(), target);
  }

  // optional int32 matchConfigId = 4;
  if (has_matchconfigid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->matchconfigid(), target);
  }

  // optional int32 gameId = 5;
  if (has_gameid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->gameid(), target);
  }

  // optional int32 selfRank = 6;
  if (has_selfrank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->selfrank(), target);
  }

  // optional int32 from = 7;
  if (has_from()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->from(), target);
  }

  // optional int32 to = 8;
  if (has_to()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->to(), target);
  }

  // optional int32 taotai = 9;
  if (has_taotai()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->taotai(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResCheckInMatch::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ProtoNet.ResponseResult result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->result());
    }

    // optional int32 inMatch = 2;
    if (has_inmatch()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->inmatch());
    }

    // optional string randId = 3;
    if (has_randid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->randid());
    }

    // optional int32 matchConfigId = 4;
    if (has_matchconfigid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->matchconfigid());
    }

    // optional int32 gameId = 5;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gameid());
    }

    // optional int32 selfRank = 6;
    if (has_selfrank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->selfrank());
    }

    // optional int32 from = 7;
    if (has_from()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->from());
    }

    // optional int32 to = 8;
    if (has_to()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->to());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 taotai = 9;
    if (has_taotai()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->taotai());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResCheckInMatch::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResCheckInMatch* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResCheckInMatch*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResCheckInMatch::MergeFrom(const ResCheckInMatch& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      mutable_result()->::ProtoNet::ResponseResult::MergeFrom(from.result());
    }
    if (from.has_inmatch()) {
      set_inmatch(from.inmatch());
    }
    if (from.has_randid()) {
      set_randid(from.randid());
    }
    if (from.has_matchconfigid()) {
      set_matchconfigid(from.matchconfigid());
    }
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_selfrank()) {
      set_selfrank(from.selfrank());
    }
    if (from.has_from()) {
      set_from(from.from());
    }
    if (from.has_to()) {
      set_to(from.to());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_taotai()) {
      set_taotai(from.taotai());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResCheckInMatch::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResCheckInMatch::CopyFrom(const ResCheckInMatch& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResCheckInMatch::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_result()) {
    if (!this->result().IsInitialized()) return false;
  }
  return true;
}

void ResCheckInMatch::Swap(ResCheckInMatch* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(inmatch_, other->inmatch_);
    std::swap(randid_, other->randid_);
    std::swap(matchconfigid_, other->matchconfigid_);
    std::swap(gameid_, other->gameid_);
    std::swap(selfrank_, other->selfrank_);
    std::swap(from_, other->from_);
    std::swap(to_, other->to_);
    std::swap(taotai_, other->taotai_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResCheckInMatch::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResCheckInMatch_descriptor_;
  metadata.reflection = ResCheckInMatch_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqOpenRoomReplace::kRoomTypeFieldNumber;
const int ReqOpenRoomReplace::kTimesFieldNumber;
const int ReqOpenRoomReplace::kParamStringFieldNumber;
const int ReqOpenRoomReplace::kTimesTypeFieldNumber;
const int ReqOpenRoomReplace::kHalfWayJoinFieldNumber;
const int ReqOpenRoomReplace::kMaxPlayerNumFieldNumber;
const int ReqOpenRoomReplace::kYazhuFieldNumber;
const int ReqOpenRoomReplace::kGameIdFieldNumber;
#endif  // !_MSC_VER

ReqOpenRoomReplace::ReqOpenRoomReplace()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqOpenRoomReplace::InitAsDefaultInstance() {
}

ReqOpenRoomReplace::ReqOpenRoomReplace(const ReqOpenRoomReplace& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqOpenRoomReplace::SharedCtor() {
  _cached_size_ = 0;
  roomtype_ = 0;
  times_ = 0;
  paramstring_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  timestype_ = 0;
  halfwayjoin_ = 0;
  maxplayernum_ = 0;
  yazhu_ = 0;
  gameid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqOpenRoomReplace::~ReqOpenRoomReplace() {
  SharedDtor();
}

void ReqOpenRoomReplace::SharedDtor() {
  if (paramstring_ != &::google::protobuf::internal::kEmptyString) {
    delete paramstring_;
  }
  if (this != default_instance_) {
  }
}

void ReqOpenRoomReplace::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqOpenRoomReplace::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqOpenRoomReplace_descriptor_;
}

const ReqOpenRoomReplace& ReqOpenRoomReplace::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgGate_2eproto();
  return *default_instance_;
}

ReqOpenRoomReplace* ReqOpenRoomReplace::default_instance_ = NULL;

ReqOpenRoomReplace* ReqOpenRoomReplace::New() const {
  return new ReqOpenRoomReplace;
}

void ReqOpenRoomReplace::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roomtype_ = 0;
    times_ = 0;
    if (has_paramstring()) {
      if (paramstring_ != &::google::protobuf::internal::kEmptyString) {
        paramstring_->clear();
      }
    }
    timestype_ = 0;
    halfwayjoin_ = 0;
    maxplayernum_ = 0;
    yazhu_ = 0;
    gameid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqOpenRoomReplace::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 roomType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomtype_)));
          set_has_roomtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_times;
        break;
      }

      // required int32 times = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &times_)));
          set_has_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_paramString;
        break;
      }

      // optional string paramString = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_paramString:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_paramstring()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->paramstring().data(), this->paramstring().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_timesType;
        break;
      }

      // required int32 timesType = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_timesType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &timestype_)));
          set_has_timestype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_halfWayJoin;
        break;
      }

      // optional int32 halfWayJoin = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_halfWayJoin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &halfwayjoin_)));
          set_has_halfwayjoin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_maxPlayerNum;
        break;
      }

      // optional int32 maxPlayerNum = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_maxPlayerNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxplayernum_)));
          set_has_maxplayernum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(57)) goto parse_yazhu;
        break;
      }

      // optional double yazhu = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_yazhu:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &yazhu_)));
          set_has_yazhu();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_gameId;
        break;
      }

      // required int32 gameId = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gameId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqOpenRoomReplace::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 roomType = 1;
  if (has_roomtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->roomtype(), output);
  }

  // required int32 times = 2;
  if (has_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->times(), output);
  }

  // optional string paramString = 3;
  if (has_paramstring()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->paramstring().data(), this->paramstring().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->paramstring(), output);
  }

  // required int32 timesType = 4;
  if (has_timestype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->timestype(), output);
  }

  // optional int32 halfWayJoin = 5;
  if (has_halfwayjoin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->halfwayjoin(), output);
  }

  // optional int32 maxPlayerNum = 6;
  if (has_maxplayernum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->maxplayernum(), output);
  }

  // optional double yazhu = 7;
  if (has_yazhu()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->yazhu(), output);
  }

  // required int32 gameId = 8;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->gameid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqOpenRoomReplace::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 roomType = 1;
  if (has_roomtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->roomtype(), target);
  }

  // required int32 times = 2;
  if (has_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->times(), target);
  }

  // optional string paramString = 3;
  if (has_paramstring()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->paramstring().data(), this->paramstring().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->paramstring(), target);
  }

  // required int32 timesType = 4;
  if (has_timestype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->timestype(), target);
  }

  // optional int32 halfWayJoin = 5;
  if (has_halfwayjoin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->halfwayjoin(), target);
  }

  // optional int32 maxPlayerNum = 6;
  if (has_maxplayernum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->maxplayernum(), target);
  }

  // optional double yazhu = 7;
  if (has_yazhu()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->yazhu(), target);
  }

  // required int32 gameId = 8;
  if (has_gameid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->gameid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqOpenRoomReplace::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 roomType = 1;
    if (has_roomtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roomtype());
    }

    // required int32 times = 2;
    if (has_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->times());
    }

    // optional string paramString = 3;
    if (has_paramstring()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->paramstring());
    }

    // required int32 timesType = 4;
    if (has_timestype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->timestype());
    }

    // optional int32 halfWayJoin = 5;
    if (has_halfwayjoin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->halfwayjoin());
    }

    // optional int32 maxPlayerNum = 6;
    if (has_maxplayernum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxplayernum());
    }

    // optional double yazhu = 7;
    if (has_yazhu()) {
      total_size += 1 + 8;
    }

    // required int32 gameId = 8;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gameid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqOpenRoomReplace::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqOpenRoomReplace* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqOpenRoomReplace*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqOpenRoomReplace::MergeFrom(const ReqOpenRoomReplace& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roomtype()) {
      set_roomtype(from.roomtype());
    }
    if (from.has_times()) {
      set_times(from.times());
    }
    if (from.has_paramstring()) {
      set_paramstring(from.paramstring());
    }
    if (from.has_timestype()) {
      set_timestype(from.timestype());
    }
    if (from.has_halfwayjoin()) {
      set_halfwayjoin(from.halfwayjoin());
    }
    if (from.has_maxplayernum()) {
      set_maxplayernum(from.maxplayernum());
    }
    if (from.has_yazhu()) {
      set_yazhu(from.yazhu());
    }
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqOpenRoomReplace::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqOpenRoomReplace::CopyFrom(const ReqOpenRoomReplace& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqOpenRoomReplace::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000008b) != 0x0000008b) return false;

  return true;
}

void ReqOpenRoomReplace::Swap(ReqOpenRoomReplace* other) {
  if (other != this) {
    std::swap(roomtype_, other->roomtype_);
    std::swap(times_, other->times_);
    std::swap(paramstring_, other->paramstring_);
    std::swap(timestype_, other->timestype_);
    std::swap(halfwayjoin_, other->halfwayjoin_);
    std::swap(maxplayernum_, other->maxplayernum_);
    std::swap(yazhu_, other->yazhu_);
    std::swap(gameid_, other->gameid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqOpenRoomReplace::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqOpenRoomReplace_descriptor_;
  metadata.reflection = ReqOpenRoomReplace_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResOpenRoomReplace::kResultFieldNumber;
const int ResOpenRoomReplace::kRoomIdFieldNumber;
const int ResOpenRoomReplace::kRoomTypeFieldNumber;
const int ResOpenRoomReplace::kTimesFieldNumber;
const int ResOpenRoomReplace::kParamStringFieldNumber;
const int ResOpenRoomReplace::kTimesTypeFieldNumber;
const int ResOpenRoomReplace::kHalfWayJoinFieldNumber;
const int ResOpenRoomReplace::kMaxPlayerNumFieldNumber;
const int ResOpenRoomReplace::kYazhuFieldNumber;
const int ResOpenRoomReplace::kGameIdFieldNumber;
const int ResOpenRoomReplace::kServerInfoFieldNumber;
#endif  // !_MSC_VER

ResOpenRoomReplace::ResOpenRoomReplace()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResOpenRoomReplace::InitAsDefaultInstance() {
  result_ = const_cast< ::ProtoNet::ResponseResult*>(&::ProtoNet::ResponseResult::default_instance());
  serverinfo_ = const_cast< ::ProtoNet::ServerInfoIpsSafeDetail*>(&::ProtoNet::ServerInfoIpsSafeDetail::default_instance());
}

ResOpenRoomReplace::ResOpenRoomReplace(const ResOpenRoomReplace& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResOpenRoomReplace::SharedCtor() {
  _cached_size_ = 0;
  result_ = NULL;
  roomid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  roomtype_ = 0;
  times_ = 0;
  paramstring_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  timestype_ = 0;
  halfwayjoin_ = 0;
  maxplayernum_ = 0;
  yazhu_ = 0;
  gameid_ = 0;
  serverinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResOpenRoomReplace::~ResOpenRoomReplace() {
  SharedDtor();
}

void ResOpenRoomReplace::SharedDtor() {
  if (roomid_ != &::google::protobuf::internal::kEmptyString) {
    delete roomid_;
  }
  if (paramstring_ != &::google::protobuf::internal::kEmptyString) {
    delete paramstring_;
  }
  if (this != default_instance_) {
    delete result_;
    delete serverinfo_;
  }
}

void ResOpenRoomReplace::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResOpenRoomReplace::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResOpenRoomReplace_descriptor_;
}

const ResOpenRoomReplace& ResOpenRoomReplace::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgGate_2eproto();
  return *default_instance_;
}

ResOpenRoomReplace* ResOpenRoomReplace::default_instance_ = NULL;

ResOpenRoomReplace* ResOpenRoomReplace::New() const {
  return new ResOpenRoomReplace;
}

void ResOpenRoomReplace::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_result()) {
      if (result_ != NULL) result_->::ProtoNet::ResponseResult::Clear();
    }
    if (has_roomid()) {
      if (roomid_ != &::google::protobuf::internal::kEmptyString) {
        roomid_->clear();
      }
    }
    roomtype_ = 0;
    times_ = 0;
    if (has_paramstring()) {
      if (paramstring_ != &::google::protobuf::internal::kEmptyString) {
        paramstring_->clear();
      }
    }
    timestype_ = 0;
    halfwayjoin_ = 0;
    maxplayernum_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    yazhu_ = 0;
    gameid_ = 0;
    if (has_serverinfo()) {
      if (serverinfo_ != NULL) serverinfo_->::ProtoNet::ServerInfoIpsSafeDetail::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResOpenRoomReplace::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ProtoNet.ResponseResult result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_roomId;
        break;
      }

      // optional string roomId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_roomId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_roomid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->roomid().data(), this->roomid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_roomType;
        break;
      }

      // optional int32 roomType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roomType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomtype_)));
          set_has_roomtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_times;
        break;
      }

      // optional int32 times = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &times_)));
          set_has_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_paramString;
        break;
      }

      // optional string paramString = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_paramString:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_paramstring()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->paramstring().data(), this->paramstring().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_timesType;
        break;
      }

      // optional int32 timesType = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_timesType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &timestype_)));
          set_has_timestype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_halfWayJoin;
        break;
      }

      // optional int32 halfWayJoin = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_halfWayJoin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &halfwayjoin_)));
          set_has_halfwayjoin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_maxPlayerNum;
        break;
      }

      // optional int32 maxPlayerNum = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_maxPlayerNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxplayernum_)));
          set_has_maxplayernum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(73)) goto parse_yazhu;
        break;
      }

      // optional double yazhu = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_yazhu:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &yazhu_)));
          set_has_yazhu();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_gameId;
        break;
      }

      // optional int32 gameId = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gameId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_serverInfo;
        break;
      }

      // optional .ProtoNet.ServerInfoIpsSafeDetail serverInfo = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_serverInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_serverinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResOpenRoomReplace::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .ProtoNet.ResponseResult result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->result(), output);
  }

  // optional string roomId = 2;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->roomid().data(), this->roomid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->roomid(), output);
  }

  // optional int32 roomType = 3;
  if (has_roomtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->roomtype(), output);
  }

  // optional int32 times = 4;
  if (has_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->times(), output);
  }

  // optional string paramString = 5;
  if (has_paramstring()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->paramstring().data(), this->paramstring().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->paramstring(), output);
  }

  // optional int32 timesType = 6;
  if (has_timestype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->timestype(), output);
  }

  // optional int32 halfWayJoin = 7;
  if (has_halfwayjoin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->halfwayjoin(), output);
  }

  // optional int32 maxPlayerNum = 8;
  if (has_maxplayernum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->maxplayernum(), output);
  }

  // optional double yazhu = 9;
  if (has_yazhu()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->yazhu(), output);
  }

  // optional int32 gameId = 10;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->gameid(), output);
  }

  // optional .ProtoNet.ServerInfoIpsSafeDetail serverInfo = 11;
  if (has_serverinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->serverinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResOpenRoomReplace::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .ProtoNet.ResponseResult result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->result(), target);
  }

  // optional string roomId = 2;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->roomid().data(), this->roomid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->roomid(), target);
  }

  // optional int32 roomType = 3;
  if (has_roomtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->roomtype(), target);
  }

  // optional int32 times = 4;
  if (has_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->times(), target);
  }

  // optional string paramString = 5;
  if (has_paramstring()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->paramstring().data(), this->paramstring().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->paramstring(), target);
  }

  // optional int32 timesType = 6;
  if (has_timestype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->timestype(), target);
  }

  // optional int32 halfWayJoin = 7;
  if (has_halfwayjoin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->halfwayjoin(), target);
  }

  // optional int32 maxPlayerNum = 8;
  if (has_maxplayernum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->maxplayernum(), target);
  }

  // optional double yazhu = 9;
  if (has_yazhu()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->yazhu(), target);
  }

  // optional int32 gameId = 10;
  if (has_gameid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->gameid(), target);
  }

  // optional .ProtoNet.ServerInfoIpsSafeDetail serverInfo = 11;
  if (has_serverinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->serverinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResOpenRoomReplace::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ProtoNet.ResponseResult result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->result());
    }

    // optional string roomId = 2;
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->roomid());
    }

    // optional int32 roomType = 3;
    if (has_roomtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roomtype());
    }

    // optional int32 times = 4;
    if (has_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->times());
    }

    // optional string paramString = 5;
    if (has_paramstring()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->paramstring());
    }

    // optional int32 timesType = 6;
    if (has_timestype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->timestype());
    }

    // optional int32 halfWayJoin = 7;
    if (has_halfwayjoin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->halfwayjoin());
    }

    // optional int32 maxPlayerNum = 8;
    if (has_maxplayernum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxplayernum());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional double yazhu = 9;
    if (has_yazhu()) {
      total_size += 1 + 8;
    }

    // optional int32 gameId = 10;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gameid());
    }

    // optional .ProtoNet.ServerInfoIpsSafeDetail serverInfo = 11;
    if (has_serverinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->serverinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResOpenRoomReplace::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResOpenRoomReplace* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResOpenRoomReplace*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResOpenRoomReplace::MergeFrom(const ResOpenRoomReplace& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      mutable_result()->::ProtoNet::ResponseResult::MergeFrom(from.result());
    }
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
    if (from.has_roomtype()) {
      set_roomtype(from.roomtype());
    }
    if (from.has_times()) {
      set_times(from.times());
    }
    if (from.has_paramstring()) {
      set_paramstring(from.paramstring());
    }
    if (from.has_timestype()) {
      set_timestype(from.timestype());
    }
    if (from.has_halfwayjoin()) {
      set_halfwayjoin(from.halfwayjoin());
    }
    if (from.has_maxplayernum()) {
      set_maxplayernum(from.maxplayernum());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_yazhu()) {
      set_yazhu(from.yazhu());
    }
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_serverinfo()) {
      mutable_serverinfo()->::ProtoNet::ServerInfoIpsSafeDetail::MergeFrom(from.serverinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResOpenRoomReplace::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResOpenRoomReplace::CopyFrom(const ResOpenRoomReplace& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResOpenRoomReplace::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_result()) {
    if (!this->result().IsInitialized()) return false;
  }
  return true;
}

void ResOpenRoomReplace::Swap(ResOpenRoomReplace* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(roomid_, other->roomid_);
    std::swap(roomtype_, other->roomtype_);
    std::swap(times_, other->times_);
    std::swap(paramstring_, other->paramstring_);
    std::swap(timestype_, other->timestype_);
    std::swap(halfwayjoin_, other->halfwayjoin_);
    std::swap(maxplayernum_, other->maxplayernum_);
    std::swap(yazhu_, other->yazhu_);
    std::swap(gameid_, other->gameid_);
    std::swap(serverinfo_, other->serverinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResOpenRoomReplace::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResOpenRoomReplace_descriptor_;
  metadata.reflection = ResOpenRoomReplace_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqOpenRoomReplaceRecordList::kStatusFieldNumber;
#endif  // !_MSC_VER

ReqOpenRoomReplaceRecordList::ReqOpenRoomReplaceRecordList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqOpenRoomReplaceRecordList::InitAsDefaultInstance() {
}

ReqOpenRoomReplaceRecordList::ReqOpenRoomReplaceRecordList(const ReqOpenRoomReplaceRecordList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqOpenRoomReplaceRecordList::SharedCtor() {
  _cached_size_ = 0;
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqOpenRoomReplaceRecordList::~ReqOpenRoomReplaceRecordList() {
  SharedDtor();
}

void ReqOpenRoomReplaceRecordList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqOpenRoomReplaceRecordList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqOpenRoomReplaceRecordList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqOpenRoomReplaceRecordList_descriptor_;
}

const ReqOpenRoomReplaceRecordList& ReqOpenRoomReplaceRecordList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgGate_2eproto();
  return *default_instance_;
}

ReqOpenRoomReplaceRecordList* ReqOpenRoomReplaceRecordList::default_instance_ = NULL;

ReqOpenRoomReplaceRecordList* ReqOpenRoomReplaceRecordList::New() const {
  return new ReqOpenRoomReplaceRecordList;
}

void ReqOpenRoomReplaceRecordList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    status_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqOpenRoomReplaceRecordList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 status = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqOpenRoomReplaceRecordList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 status = 1;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqOpenRoomReplaceRecordList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 status = 1;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqOpenRoomReplaceRecordList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 status = 1;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqOpenRoomReplaceRecordList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqOpenRoomReplaceRecordList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqOpenRoomReplaceRecordList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqOpenRoomReplaceRecordList::MergeFrom(const ReqOpenRoomReplaceRecordList& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqOpenRoomReplaceRecordList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqOpenRoomReplaceRecordList::CopyFrom(const ReqOpenRoomReplaceRecordList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqOpenRoomReplaceRecordList::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ReqOpenRoomReplaceRecordList::Swap(ReqOpenRoomReplaceRecordList* other) {
  if (other != this) {
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqOpenRoomReplaceRecordList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqOpenRoomReplaceRecordList_descriptor_;
  metadata.reflection = ReqOpenRoomReplaceRecordList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResOpenRoomReplaceRecord_List::kResultFieldNumber;
const int ResOpenRoomReplaceRecord_List::kInfosFieldNumber;
const int ResOpenRoomReplaceRecord_List::kDaikaifangRecordNumFieldNumber;
const int ResOpenRoomReplaceRecord_List::kStatusFieldNumber;
#endif  // !_MSC_VER

ResOpenRoomReplaceRecord_List::ResOpenRoomReplaceRecord_List()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResOpenRoomReplaceRecord_List::InitAsDefaultInstance() {
  result_ = const_cast< ::ProtoNet::ResponseResult*>(&::ProtoNet::ResponseResult::default_instance());
}

ResOpenRoomReplaceRecord_List::ResOpenRoomReplaceRecord_List(const ResOpenRoomReplaceRecord_List& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResOpenRoomReplaceRecord_List::SharedCtor() {
  _cached_size_ = 0;
  result_ = NULL;
  daikaifangrecordnum_ = 0;
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResOpenRoomReplaceRecord_List::~ResOpenRoomReplaceRecord_List() {
  SharedDtor();
}

void ResOpenRoomReplaceRecord_List::SharedDtor() {
  if (this != default_instance_) {
    delete result_;
  }
}

void ResOpenRoomReplaceRecord_List::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResOpenRoomReplaceRecord_List::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResOpenRoomReplaceRecord_List_descriptor_;
}

const ResOpenRoomReplaceRecord_List& ResOpenRoomReplaceRecord_List::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgGate_2eproto();
  return *default_instance_;
}

ResOpenRoomReplaceRecord_List* ResOpenRoomReplaceRecord_List::default_instance_ = NULL;

ResOpenRoomReplaceRecord_List* ResOpenRoomReplaceRecord_List::New() const {
  return new ResOpenRoomReplaceRecord_List;
}

void ResOpenRoomReplaceRecord_List::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_result()) {
      if (result_ != NULL) result_->::ProtoNet::ResponseResult::Clear();
    }
    daikaifangrecordnum_ = 0;
    status_ = 0;
  }
  infos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResOpenRoomReplaceRecord_List::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ProtoNet.ResponseResult result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_infos;
        break;
      }

      // repeated .ProtoNet.OpenRoomReplaceRecordInfo infos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_infos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_infos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_infos;
        if (input->ExpectTag(24)) goto parse_daikaifangRecordNum;
        break;
      }

      // optional int32 daikaifangRecordNum = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_daikaifangRecordNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &daikaifangrecordnum_)));
          set_has_daikaifangrecordnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_status;
        break;
      }

      // optional int32 status = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResOpenRoomReplaceRecord_List::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .ProtoNet.ResponseResult result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->result(), output);
  }

  // repeated .ProtoNet.OpenRoomReplaceRecordInfo infos = 2;
  for (int i = 0; i < this->infos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->infos(i), output);
  }

  // optional int32 daikaifangRecordNum = 3;
  if (has_daikaifangrecordnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->daikaifangrecordnum(), output);
  }

  // optional int32 status = 4;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResOpenRoomReplaceRecord_List::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .ProtoNet.ResponseResult result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->result(), target);
  }

  // repeated .ProtoNet.OpenRoomReplaceRecordInfo infos = 2;
  for (int i = 0; i < this->infos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->infos(i), target);
  }

  // optional int32 daikaifangRecordNum = 3;
  if (has_daikaifangrecordnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->daikaifangrecordnum(), target);
  }

  // optional int32 status = 4;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResOpenRoomReplaceRecord_List::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ProtoNet.ResponseResult result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->result());
    }

    // optional int32 daikaifangRecordNum = 3;
    if (has_daikaifangrecordnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->daikaifangrecordnum());
    }

    // optional int32 status = 4;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }

  }
  // repeated .ProtoNet.OpenRoomReplaceRecordInfo infos = 2;
  total_size += 1 * this->infos_size();
  for (int i = 0; i < this->infos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->infos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResOpenRoomReplaceRecord_List::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResOpenRoomReplaceRecord_List* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResOpenRoomReplaceRecord_List*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResOpenRoomReplaceRecord_List::MergeFrom(const ResOpenRoomReplaceRecord_List& from) {
  GOOGLE_CHECK_NE(&from, this);
  infos_.MergeFrom(from.infos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      mutable_result()->::ProtoNet::ResponseResult::MergeFrom(from.result());
    }
    if (from.has_daikaifangrecordnum()) {
      set_daikaifangrecordnum(from.daikaifangrecordnum());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResOpenRoomReplaceRecord_List::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResOpenRoomReplaceRecord_List::CopyFrom(const ResOpenRoomReplaceRecord_List& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResOpenRoomReplaceRecord_List::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_result()) {
    if (!this->result().IsInitialized()) return false;
  }
  for (int i = 0; i < infos_size(); i++) {
    if (!this->infos(i).IsInitialized()) return false;
  }
  return true;
}

void ResOpenRoomReplaceRecord_List::Swap(ResOpenRoomReplaceRecord_List* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    infos_.Swap(&other->infos_);
    std::swap(daikaifangrecordnum_, other->daikaifangrecordnum_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResOpenRoomReplaceRecord_List::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResOpenRoomReplaceRecord_List_descriptor_;
  metadata.reflection = ResOpenRoomReplaceRecord_List_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqDissolutionOpenRoomReplace::kRoomIdFieldNumber;
#endif  // !_MSC_VER

ReqDissolutionOpenRoomReplace::ReqDissolutionOpenRoomReplace()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqDissolutionOpenRoomReplace::InitAsDefaultInstance() {
}

ReqDissolutionOpenRoomReplace::ReqDissolutionOpenRoomReplace(const ReqDissolutionOpenRoomReplace& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqDissolutionOpenRoomReplace::SharedCtor() {
  _cached_size_ = 0;
  roomid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqDissolutionOpenRoomReplace::~ReqDissolutionOpenRoomReplace() {
  SharedDtor();
}

void ReqDissolutionOpenRoomReplace::SharedDtor() {
  if (roomid_ != &::google::protobuf::internal::kEmptyString) {
    delete roomid_;
  }
  if (this != default_instance_) {
  }
}

void ReqDissolutionOpenRoomReplace::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqDissolutionOpenRoomReplace::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqDissolutionOpenRoomReplace_descriptor_;
}

const ReqDissolutionOpenRoomReplace& ReqDissolutionOpenRoomReplace::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgGate_2eproto();
  return *default_instance_;
}

ReqDissolutionOpenRoomReplace* ReqDissolutionOpenRoomReplace::default_instance_ = NULL;

ReqDissolutionOpenRoomReplace* ReqDissolutionOpenRoomReplace::New() const {
  return new ReqDissolutionOpenRoomReplace;
}

void ReqDissolutionOpenRoomReplace::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_roomid()) {
      if (roomid_ != &::google::protobuf::internal::kEmptyString) {
        roomid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqDissolutionOpenRoomReplace::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string roomId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_roomid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->roomid().data(), this->roomid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqDissolutionOpenRoomReplace::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string roomId = 1;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->roomid().data(), this->roomid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->roomid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqDissolutionOpenRoomReplace::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string roomId = 1;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->roomid().data(), this->roomid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->roomid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqDissolutionOpenRoomReplace::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string roomId = 1;
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->roomid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqDissolutionOpenRoomReplace::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqDissolutionOpenRoomReplace* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqDissolutionOpenRoomReplace*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqDissolutionOpenRoomReplace::MergeFrom(const ReqDissolutionOpenRoomReplace& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqDissolutionOpenRoomReplace::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqDissolutionOpenRoomReplace::CopyFrom(const ReqDissolutionOpenRoomReplace& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqDissolutionOpenRoomReplace::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ReqDissolutionOpenRoomReplace::Swap(ReqDissolutionOpenRoomReplace* other) {
  if (other != this) {
    std::swap(roomid_, other->roomid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqDissolutionOpenRoomReplace::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqDissolutionOpenRoomReplace_descriptor_;
  metadata.reflection = ReqDissolutionOpenRoomReplace_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResDissolutionOpenRoomReplace::kResultFieldNumber;
#endif  // !_MSC_VER

ResDissolutionOpenRoomReplace::ResDissolutionOpenRoomReplace()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResDissolutionOpenRoomReplace::InitAsDefaultInstance() {
  result_ = const_cast< ::ProtoNet::ResponseResult*>(&::ProtoNet::ResponseResult::default_instance());
}

ResDissolutionOpenRoomReplace::ResDissolutionOpenRoomReplace(const ResDissolutionOpenRoomReplace& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResDissolutionOpenRoomReplace::SharedCtor() {
  _cached_size_ = 0;
  result_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResDissolutionOpenRoomReplace::~ResDissolutionOpenRoomReplace() {
  SharedDtor();
}

void ResDissolutionOpenRoomReplace::SharedDtor() {
  if (this != default_instance_) {
    delete result_;
  }
}

void ResDissolutionOpenRoomReplace::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResDissolutionOpenRoomReplace::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResDissolutionOpenRoomReplace_descriptor_;
}

const ResDissolutionOpenRoomReplace& ResDissolutionOpenRoomReplace::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgGate_2eproto();
  return *default_instance_;
}

ResDissolutionOpenRoomReplace* ResDissolutionOpenRoomReplace::default_instance_ = NULL;

ResDissolutionOpenRoomReplace* ResDissolutionOpenRoomReplace::New() const {
  return new ResDissolutionOpenRoomReplace;
}

void ResDissolutionOpenRoomReplace::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_result()) {
      if (result_ != NULL) result_->::ProtoNet::ResponseResult::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResDissolutionOpenRoomReplace::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ProtoNet.ResponseResult result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResDissolutionOpenRoomReplace::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .ProtoNet.ResponseResult result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResDissolutionOpenRoomReplace::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .ProtoNet.ResponseResult result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResDissolutionOpenRoomReplace::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ProtoNet.ResponseResult result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResDissolutionOpenRoomReplace::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResDissolutionOpenRoomReplace* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResDissolutionOpenRoomReplace*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResDissolutionOpenRoomReplace::MergeFrom(const ResDissolutionOpenRoomReplace& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      mutable_result()->::ProtoNet::ResponseResult::MergeFrom(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResDissolutionOpenRoomReplace::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResDissolutionOpenRoomReplace::CopyFrom(const ResDissolutionOpenRoomReplace& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResDissolutionOpenRoomReplace::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_result()) {
    if (!this->result().IsInitialized()) return false;
  }
  return true;
}

void ResDissolutionOpenRoomReplace::Swap(ResDissolutionOpenRoomReplace* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResDissolutionOpenRoomReplace::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResDissolutionOpenRoomReplace_descriptor_;
  metadata.reflection = ResDissolutionOpenRoomReplace_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqGameRoomList::kGameIdFieldNumber;
const int ReqGameRoomList::kTimesTypeFieldNumber;
const int ReqGameRoomList::kFangkaJinbiFieldNumber;
#endif  // !_MSC_VER

ReqGameRoomList::ReqGameRoomList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqGameRoomList::InitAsDefaultInstance() {
}

ReqGameRoomList::ReqGameRoomList(const ReqGameRoomList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqGameRoomList::SharedCtor() {
  _cached_size_ = 0;
  gameid_ = 0;
  timestype_ = 0;
  fangkajinbi_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqGameRoomList::~ReqGameRoomList() {
  SharedDtor();
}

void ReqGameRoomList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqGameRoomList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqGameRoomList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqGameRoomList_descriptor_;
}

const ReqGameRoomList& ReqGameRoomList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgGate_2eproto();
  return *default_instance_;
}

ReqGameRoomList* ReqGameRoomList::default_instance_ = NULL;

ReqGameRoomList* ReqGameRoomList::New() const {
  return new ReqGameRoomList;
}

void ReqGameRoomList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gameid_ = 0;
    timestype_ = 0;
    fangkajinbi_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqGameRoomList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 gameId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_timesType;
        break;
      }

      // required int32 timesType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_timesType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &timestype_)));
          set_has_timestype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_fangkaJinbi;
        break;
      }

      // required int32 fangkaJinbi = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fangkaJinbi:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fangkajinbi_)));
          set_has_fangkajinbi();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqGameRoomList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 gameId = 1;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->gameid(), output);
  }

  // required int32 timesType = 2;
  if (has_timestype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->timestype(), output);
  }

  // required int32 fangkaJinbi = 3;
  if (has_fangkajinbi()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->fangkajinbi(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqGameRoomList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 gameId = 1;
  if (has_gameid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->gameid(), target);
  }

  // required int32 timesType = 2;
  if (has_timestype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->timestype(), target);
  }

  // required int32 fangkaJinbi = 3;
  if (has_fangkajinbi()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->fangkajinbi(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqGameRoomList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 gameId = 1;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gameid());
    }

    // required int32 timesType = 2;
    if (has_timestype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->timestype());
    }

    // required int32 fangkaJinbi = 3;
    if (has_fangkajinbi()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fangkajinbi());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqGameRoomList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqGameRoomList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqGameRoomList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqGameRoomList::MergeFrom(const ReqGameRoomList& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_timestype()) {
      set_timestype(from.timestype());
    }
    if (from.has_fangkajinbi()) {
      set_fangkajinbi(from.fangkajinbi());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqGameRoomList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqGameRoomList::CopyFrom(const ReqGameRoomList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqGameRoomList::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void ReqGameRoomList::Swap(ReqGameRoomList* other) {
  if (other != this) {
    std::swap(gameid_, other->gameid_);
    std::swap(timestype_, other->timestype_);
    std::swap(fangkajinbi_, other->fangkajinbi_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqGameRoomList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqGameRoomList_descriptor_;
  metadata.reflection = ReqGameRoomList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResGameRoomList::kResultFieldNumber;
const int ResGameRoomList::kListFieldNumber;
#endif  // !_MSC_VER

ResGameRoomList::ResGameRoomList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResGameRoomList::InitAsDefaultInstance() {
  result_ = const_cast< ::ProtoNet::ResponseResult*>(&::ProtoNet::ResponseResult::default_instance());
}

ResGameRoomList::ResGameRoomList(const ResGameRoomList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResGameRoomList::SharedCtor() {
  _cached_size_ = 0;
  result_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResGameRoomList::~ResGameRoomList() {
  SharedDtor();
}

void ResGameRoomList::SharedDtor() {
  if (this != default_instance_) {
    delete result_;
  }
}

void ResGameRoomList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResGameRoomList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResGameRoomList_descriptor_;
}

const ResGameRoomList& ResGameRoomList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgGate_2eproto();
  return *default_instance_;
}

ResGameRoomList* ResGameRoomList::default_instance_ = NULL;

ResGameRoomList* ResGameRoomList::New() const {
  return new ResGameRoomList;
}

void ResGameRoomList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_result()) {
      if (result_ != NULL) result_->::ProtoNet::ResponseResult::Clear();
    }
  }
  list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResGameRoomList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ProtoNet.ResponseResult result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_list;
        break;
      }

      // repeated .ProtoNet.GameRoomList list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResGameRoomList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .ProtoNet.ResponseResult result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->result(), output);
  }

  // repeated .ProtoNet.GameRoomList list = 2;
  for (int i = 0; i < this->list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResGameRoomList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .ProtoNet.ResponseResult result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->result(), target);
  }

  // repeated .ProtoNet.GameRoomList list = 2;
  for (int i = 0; i < this->list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResGameRoomList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ProtoNet.ResponseResult result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->result());
    }

  }
  // repeated .ProtoNet.GameRoomList list = 2;
  total_size += 1 * this->list_size();
  for (int i = 0; i < this->list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResGameRoomList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResGameRoomList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResGameRoomList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResGameRoomList::MergeFrom(const ResGameRoomList& from) {
  GOOGLE_CHECK_NE(&from, this);
  list_.MergeFrom(from.list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      mutable_result()->::ProtoNet::ResponseResult::MergeFrom(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResGameRoomList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResGameRoomList::CopyFrom(const ResGameRoomList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResGameRoomList::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_result()) {
    if (!this->result().IsInitialized()) return false;
  }
  for (int i = 0; i < list_size(); i++) {
    if (!this->list(i).IsInitialized()) return false;
  }
  return true;
}

void ResGameRoomList::Swap(ResGameRoomList* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    list_.Swap(&other->list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResGameRoomList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResGameRoomList_descriptor_;
  metadata.reflection = ResGameRoomList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GameRoomList::kRoomIdFieldNumber;
const int GameRoomList::kParamStringFieldNumber;
const int GameRoomList::kYazhuFieldNumber;
const int GameRoomList::kHalfWayJoinFieldNumber;
const int GameRoomList::kMaxPlayerNumFieldNumber;
const int GameRoomList::kFangkaJinbiFieldNumber;
const int GameRoomList::kMinNeedFieldNumber;
const int GameRoomList::kPipeiParamFieldNumber;
const int GameRoomList::kServerInfoFieldNumber;
const int GameRoomList::kGameIdFieldNumber;
const int GameRoomList::kCurrentPlayerNumFieldNumber;
const int GameRoomList::kRoomStatusFieldNumber;
const int GameRoomList::kCurrentWatchPlayerNumFieldNumber;
const int GameRoomList::kRoomTypeFieldNumber;
const int GameRoomList::kTimesTypeFieldNumber;
const int GameRoomList::kRoomRoleInfoFieldNumber;
const int GameRoomList::kTableNumFieldNumber;
#endif  // !_MSC_VER

GameRoomList::GameRoomList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GameRoomList::InitAsDefaultInstance() {
  serverinfo_ = const_cast< ::ProtoNet::ServerInfoIpsSafeDetail*>(&::ProtoNet::ServerInfoIpsSafeDetail::default_instance());
}

GameRoomList::GameRoomList(const GameRoomList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GameRoomList::SharedCtor() {
  _cached_size_ = 0;
  roomid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  paramstring_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  yazhu_ = 0;
  halfwayjoin_ = 0;
  maxplayernum_ = 0;
  fangkajinbi_ = 0;
  minneed_ = 0;
  pipeiparam_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  serverinfo_ = NULL;
  gameid_ = 0;
  currentplayernum_ = 0;
  roomstatus_ = 0;
  currentwatchplayernum_ = 0;
  roomtype_ = 0;
  timestype_ = 0;
  tablenum_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameRoomList::~GameRoomList() {
  SharedDtor();
}

void GameRoomList::SharedDtor() {
  if (roomid_ != &::google::protobuf::internal::kEmptyString) {
    delete roomid_;
  }
  if (paramstring_ != &::google::protobuf::internal::kEmptyString) {
    delete paramstring_;
  }
  if (pipeiparam_ != &::google::protobuf::internal::kEmptyString) {
    delete pipeiparam_;
  }
  if (tablenum_ != &::google::protobuf::internal::kEmptyString) {
    delete tablenum_;
  }
  if (this != default_instance_) {
    delete serverinfo_;
  }
}

void GameRoomList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameRoomList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameRoomList_descriptor_;
}

const GameRoomList& GameRoomList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgGate_2eproto();
  return *default_instance_;
}

GameRoomList* GameRoomList::default_instance_ = NULL;

GameRoomList* GameRoomList::New() const {
  return new GameRoomList;
}

void GameRoomList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_roomid()) {
      if (roomid_ != &::google::protobuf::internal::kEmptyString) {
        roomid_->clear();
      }
    }
    if (has_paramstring()) {
      if (paramstring_ != &::google::protobuf::internal::kEmptyString) {
        paramstring_->clear();
      }
    }
    yazhu_ = 0;
    halfwayjoin_ = 0;
    maxplayernum_ = 0;
    fangkajinbi_ = 0;
    minneed_ = 0;
    if (has_pipeiparam()) {
      if (pipeiparam_ != &::google::protobuf::internal::kEmptyString) {
        pipeiparam_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_serverinfo()) {
      if (serverinfo_ != NULL) serverinfo_->::ProtoNet::ServerInfoIpsSafeDetail::Clear();
    }
    gameid_ = 0;
    currentplayernum_ = 0;
    roomstatus_ = 0;
    currentwatchplayernum_ = 0;
    roomtype_ = 0;
    timestype_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (has_tablenum()) {
      if (tablenum_ != &::google::protobuf::internal::kEmptyString) {
        tablenum_->clear();
      }
    }
  }
  roomroleinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GameRoomList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string roomId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_roomid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->roomid().data(), this->roomid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_paramString;
        break;
      }

      // required string paramString = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_paramString:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_paramstring()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->paramstring().data(), this->paramstring().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_yazhu;
        break;
      }

      // required double yazhu = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_yazhu:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &yazhu_)));
          set_has_yazhu();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_halfWayJoin;
        break;
      }

      // required int32 halfWayJoin = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_halfWayJoin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &halfwayjoin_)));
          set_has_halfwayjoin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_maxPlayerNum;
        break;
      }

      // required int32 maxPlayerNum = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_maxPlayerNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxplayernum_)));
          set_has_maxplayernum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_fangkaJinbi;
        break;
      }

      // required int32 fangkaJinbi = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fangkaJinbi:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fangkajinbi_)));
          set_has_fangkajinbi();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(57)) goto parse_minNeed;
        break;
      }

      // required double minNeed = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_minNeed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &minneed_)));
          set_has_minneed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_pipeiParam;
        break;
      }

      // required string pipeiParam = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pipeiParam:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pipeiparam()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->pipeiparam().data(), this->pipeiparam().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_serverInfo;
        break;
      }

      // required .ProtoNet.ServerInfoIpsSafeDetail serverInfo = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_serverInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_serverinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_gameId;
        break;
      }

      // required int32 gameId = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gameId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_currentPlayerNum;
        break;
      }

      // required int32 currentPlayerNum = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_currentPlayerNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &currentplayernum_)));
          set_has_currentplayernum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_roomStatus;
        break;
      }

      // required int32 roomStatus = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roomStatus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomstatus_)));
          set_has_roomstatus();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_currentWatchPlayerNum;
        break;
      }

      // required int32 currentWatchPlayerNum = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_currentWatchPlayerNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &currentwatchplayernum_)));
          set_has_currentwatchplayernum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_roomType;
        break;
      }

      // optional int32 roomType = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roomType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomtype_)));
          set_has_roomtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_timesType;
        break;
      }

      // optional int32 timesType = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_timesType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &timestype_)));
          set_has_timestype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_roomRoleInfo;
        break;
      }

      // repeated .ProtoNet.RoomRoleInfo roomRoleInfo = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_roomRoleInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_roomroleinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_roomRoleInfo;
        if (input->ExpectTag(138)) goto parse_tableNum;
        break;
      }

      // optional string tableNum = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tableNum:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tablenum()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->tablenum().data(), this->tablenum().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GameRoomList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string roomId = 1;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->roomid().data(), this->roomid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->roomid(), output);
  }

  // required string paramString = 2;
  if (has_paramstring()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->paramstring().data(), this->paramstring().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->paramstring(), output);
  }

  // required double yazhu = 3;
  if (has_yazhu()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->yazhu(), output);
  }

  // required int32 halfWayJoin = 4;
  if (has_halfwayjoin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->halfwayjoin(), output);
  }

  // required int32 maxPlayerNum = 5;
  if (has_maxplayernum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->maxplayernum(), output);
  }

  // required int32 fangkaJinbi = 6;
  if (has_fangkajinbi()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->fangkajinbi(), output);
  }

  // required double minNeed = 7;
  if (has_minneed()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->minneed(), output);
  }

  // required string pipeiParam = 8;
  if (has_pipeiparam()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pipeiparam().data(), this->pipeiparam().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->pipeiparam(), output);
  }

  // required .ProtoNet.ServerInfoIpsSafeDetail serverInfo = 9;
  if (has_serverinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->serverinfo(), output);
  }

  // required int32 gameId = 10;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->gameid(), output);
  }

  // required int32 currentPlayerNum = 11;
  if (has_currentplayernum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->currentplayernum(), output);
  }

  // required int32 roomStatus = 12;
  if (has_roomstatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->roomstatus(), output);
  }

  // required int32 currentWatchPlayerNum = 13;
  if (has_currentwatchplayernum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->currentwatchplayernum(), output);
  }

  // optional int32 roomType = 14;
  if (has_roomtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->roomtype(), output);
  }

  // optional int32 timesType = 15;
  if (has_timestype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->timestype(), output);
  }

  // repeated .ProtoNet.RoomRoleInfo roomRoleInfo = 16;
  for (int i = 0; i < this->roomroleinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->roomroleinfo(i), output);
  }

  // optional string tableNum = 17;
  if (has_tablenum()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tablenum().data(), this->tablenum().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      17, this->tablenum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GameRoomList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string roomId = 1;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->roomid().data(), this->roomid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->roomid(), target);
  }

  // required string paramString = 2;
  if (has_paramstring()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->paramstring().data(), this->paramstring().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->paramstring(), target);
  }

  // required double yazhu = 3;
  if (has_yazhu()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->yazhu(), target);
  }

  // required int32 halfWayJoin = 4;
  if (has_halfwayjoin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->halfwayjoin(), target);
  }

  // required int32 maxPlayerNum = 5;
  if (has_maxplayernum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->maxplayernum(), target);
  }

  // required int32 fangkaJinbi = 6;
  if (has_fangkajinbi()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->fangkajinbi(), target);
  }

  // required double minNeed = 7;
  if (has_minneed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->minneed(), target);
  }

  // required string pipeiParam = 8;
  if (has_pipeiparam()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pipeiparam().data(), this->pipeiparam().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->pipeiparam(), target);
  }

  // required .ProtoNet.ServerInfoIpsSafeDetail serverInfo = 9;
  if (has_serverinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->serverinfo(), target);
  }

  // required int32 gameId = 10;
  if (has_gameid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->gameid(), target);
  }

  // required int32 currentPlayerNum = 11;
  if (has_currentplayernum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->currentplayernum(), target);
  }

  // required int32 roomStatus = 12;
  if (has_roomstatus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->roomstatus(), target);
  }

  // required int32 currentWatchPlayerNum = 13;
  if (has_currentwatchplayernum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->currentwatchplayernum(), target);
  }

  // optional int32 roomType = 14;
  if (has_roomtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->roomtype(), target);
  }

  // optional int32 timesType = 15;
  if (has_timestype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->timestype(), target);
  }

  // repeated .ProtoNet.RoomRoleInfo roomRoleInfo = 16;
  for (int i = 0; i < this->roomroleinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        16, this->roomroleinfo(i), target);
  }

  // optional string tableNum = 17;
  if (has_tablenum()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tablenum().data(), this->tablenum().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->tablenum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GameRoomList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string roomId = 1;
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->roomid());
    }

    // required string paramString = 2;
    if (has_paramstring()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->paramstring());
    }

    // required double yazhu = 3;
    if (has_yazhu()) {
      total_size += 1 + 8;
    }

    // required int32 halfWayJoin = 4;
    if (has_halfwayjoin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->halfwayjoin());
    }

    // required int32 maxPlayerNum = 5;
    if (has_maxplayernum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxplayernum());
    }

    // required int32 fangkaJinbi = 6;
    if (has_fangkajinbi()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fangkajinbi());
    }

    // required double minNeed = 7;
    if (has_minneed()) {
      total_size += 1 + 8;
    }

    // required string pipeiParam = 8;
    if (has_pipeiparam()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pipeiparam());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required .ProtoNet.ServerInfoIpsSafeDetail serverInfo = 9;
    if (has_serverinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->serverinfo());
    }

    // required int32 gameId = 10;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gameid());
    }

    // required int32 currentPlayerNum = 11;
    if (has_currentplayernum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->currentplayernum());
    }

    // required int32 roomStatus = 12;
    if (has_roomstatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roomstatus());
    }

    // required int32 currentWatchPlayerNum = 13;
    if (has_currentwatchplayernum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->currentwatchplayernum());
    }

    // optional int32 roomType = 14;
    if (has_roomtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roomtype());
    }

    // optional int32 timesType = 15;
    if (has_timestype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->timestype());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional string tableNum = 17;
    if (has_tablenum()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tablenum());
    }

  }
  // repeated .ProtoNet.RoomRoleInfo roomRoleInfo = 16;
  total_size += 2 * this->roomroleinfo_size();
  for (int i = 0; i < this->roomroleinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->roomroleinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameRoomList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GameRoomList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GameRoomList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GameRoomList::MergeFrom(const GameRoomList& from) {
  GOOGLE_CHECK_NE(&from, this);
  roomroleinfo_.MergeFrom(from.roomroleinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
    if (from.has_paramstring()) {
      set_paramstring(from.paramstring());
    }
    if (from.has_yazhu()) {
      set_yazhu(from.yazhu());
    }
    if (from.has_halfwayjoin()) {
      set_halfwayjoin(from.halfwayjoin());
    }
    if (from.has_maxplayernum()) {
      set_maxplayernum(from.maxplayernum());
    }
    if (from.has_fangkajinbi()) {
      set_fangkajinbi(from.fangkajinbi());
    }
    if (from.has_minneed()) {
      set_minneed(from.minneed());
    }
    if (from.has_pipeiparam()) {
      set_pipeiparam(from.pipeiparam());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_serverinfo()) {
      mutable_serverinfo()->::ProtoNet::ServerInfoIpsSafeDetail::MergeFrom(from.serverinfo());
    }
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_currentplayernum()) {
      set_currentplayernum(from.currentplayernum());
    }
    if (from.has_roomstatus()) {
      set_roomstatus(from.roomstatus());
    }
    if (from.has_currentwatchplayernum()) {
      set_currentwatchplayernum(from.currentwatchplayernum());
    }
    if (from.has_roomtype()) {
      set_roomtype(from.roomtype());
    }
    if (from.has_timestype()) {
      set_timestype(from.timestype());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_tablenum()) {
      set_tablenum(from.tablenum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GameRoomList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameRoomList::CopyFrom(const GameRoomList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameRoomList::IsInitialized() const {
  if ((_has_bits_[0] & 0x00001fff) != 0x00001fff) return false;

  for (int i = 0; i < roomroleinfo_size(); i++) {
    if (!this->roomroleinfo(i).IsInitialized()) return false;
  }
  return true;
}

void GameRoomList::Swap(GameRoomList* other) {
  if (other != this) {
    std::swap(roomid_, other->roomid_);
    std::swap(paramstring_, other->paramstring_);
    std::swap(yazhu_, other->yazhu_);
    std::swap(halfwayjoin_, other->halfwayjoin_);
    std::swap(maxplayernum_, other->maxplayernum_);
    std::swap(fangkajinbi_, other->fangkajinbi_);
    std::swap(minneed_, other->minneed_);
    std::swap(pipeiparam_, other->pipeiparam_);
    std::swap(serverinfo_, other->serverinfo_);
    std::swap(gameid_, other->gameid_);
    std::swap(currentplayernum_, other->currentplayernum_);
    std::swap(roomstatus_, other->roomstatus_);
    std::swap(currentwatchplayernum_, other->currentwatchplayernum_);
    std::swap(roomtype_, other->roomtype_);
    std::swap(timestype_, other->timestype_);
    roomroleinfo_.Swap(&other->roomroleinfo_);
    std::swap(tablenum_, other->tablenum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GameRoomList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GameRoomList_descriptor_;
  metadata.reflection = GameRoomList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqClubGameRoomList::kRoomTypeFieldNumber;
const int ReqClubGameRoomList::kGameIdFieldNumber;
const int ReqClubGameRoomList::kClubIdFieldNumber;
const int ReqClubGameRoomList::kClubPipeiParamFieldNumber;
const int ReqClubGameRoomList::kClubGameTypeIdFieldNumber;
#endif  // !_MSC_VER

ReqClubGameRoomList::ReqClubGameRoomList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqClubGameRoomList::InitAsDefaultInstance() {
}

ReqClubGameRoomList::ReqClubGameRoomList(const ReqClubGameRoomList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqClubGameRoomList::SharedCtor() {
  _cached_size_ = 0;
  roomtype_ = 0;
  gameid_ = 0;
  clubid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  clubpipeiparam_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  clubgametypeid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqClubGameRoomList::~ReqClubGameRoomList() {
  SharedDtor();
}

void ReqClubGameRoomList::SharedDtor() {
  if (clubid_ != &::google::protobuf::internal::kEmptyString) {
    delete clubid_;
  }
  if (clubpipeiparam_ != &::google::protobuf::internal::kEmptyString) {
    delete clubpipeiparam_;
  }
  if (clubgametypeid_ != &::google::protobuf::internal::kEmptyString) {
    delete clubgametypeid_;
  }
  if (this != default_instance_) {
  }
}

void ReqClubGameRoomList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqClubGameRoomList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqClubGameRoomList_descriptor_;
}

const ReqClubGameRoomList& ReqClubGameRoomList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgGate_2eproto();
  return *default_instance_;
}

ReqClubGameRoomList* ReqClubGameRoomList::default_instance_ = NULL;

ReqClubGameRoomList* ReqClubGameRoomList::New() const {
  return new ReqClubGameRoomList;
}

void ReqClubGameRoomList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roomtype_ = 0;
    gameid_ = 0;
    if (has_clubid()) {
      if (clubid_ != &::google::protobuf::internal::kEmptyString) {
        clubid_->clear();
      }
    }
    if (has_clubpipeiparam()) {
      if (clubpipeiparam_ != &::google::protobuf::internal::kEmptyString) {
        clubpipeiparam_->clear();
      }
    }
    if (has_clubgametypeid()) {
      if (clubgametypeid_ != &::google::protobuf::internal::kEmptyString) {
        clubgametypeid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqClubGameRoomList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 roomType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomtype_)));
          set_has_roomtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gameId;
        break;
      }

      // required int32 gameId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gameId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_clubId;
        break;
      }

      // required string clubId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_clubId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_clubid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->clubid().data(), this->clubid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_clubPipeiParam;
        break;
      }

      // required string clubPipeiParam = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_clubPipeiParam:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_clubpipeiparam()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->clubpipeiparam().data(), this->clubpipeiparam().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_clubGameTypeId;
        break;
      }

      // optional string clubGameTypeId = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_clubGameTypeId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_clubgametypeid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->clubgametypeid().data(), this->clubgametypeid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqClubGameRoomList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 roomType = 1;
  if (has_roomtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->roomtype(), output);
  }

  // required int32 gameId = 2;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->gameid(), output);
  }

  // required string clubId = 3;
  if (has_clubid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->clubid().data(), this->clubid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->clubid(), output);
  }

  // required string clubPipeiParam = 4;
  if (has_clubpipeiparam()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->clubpipeiparam().data(), this->clubpipeiparam().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->clubpipeiparam(), output);
  }

  // optional string clubGameTypeId = 5;
  if (has_clubgametypeid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->clubgametypeid().data(), this->clubgametypeid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->clubgametypeid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqClubGameRoomList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 roomType = 1;
  if (has_roomtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->roomtype(), target);
  }

  // required int32 gameId = 2;
  if (has_gameid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->gameid(), target);
  }

  // required string clubId = 3;
  if (has_clubid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->clubid().data(), this->clubid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->clubid(), target);
  }

  // required string clubPipeiParam = 4;
  if (has_clubpipeiparam()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->clubpipeiparam().data(), this->clubpipeiparam().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->clubpipeiparam(), target);
  }

  // optional string clubGameTypeId = 5;
  if (has_clubgametypeid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->clubgametypeid().data(), this->clubgametypeid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->clubgametypeid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqClubGameRoomList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 roomType = 1;
    if (has_roomtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roomtype());
    }

    // required int32 gameId = 2;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gameid());
    }

    // required string clubId = 3;
    if (has_clubid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->clubid());
    }

    // required string clubPipeiParam = 4;
    if (has_clubpipeiparam()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->clubpipeiparam());
    }

    // optional string clubGameTypeId = 5;
    if (has_clubgametypeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->clubgametypeid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqClubGameRoomList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqClubGameRoomList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqClubGameRoomList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqClubGameRoomList::MergeFrom(const ReqClubGameRoomList& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roomtype()) {
      set_roomtype(from.roomtype());
    }
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_clubid()) {
      set_clubid(from.clubid());
    }
    if (from.has_clubpipeiparam()) {
      set_clubpipeiparam(from.clubpipeiparam());
    }
    if (from.has_clubgametypeid()) {
      set_clubgametypeid(from.clubgametypeid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqClubGameRoomList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqClubGameRoomList::CopyFrom(const ReqClubGameRoomList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqClubGameRoomList::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void ReqClubGameRoomList::Swap(ReqClubGameRoomList* other) {
  if (other != this) {
    std::swap(roomtype_, other->roomtype_);
    std::swap(gameid_, other->gameid_);
    std::swap(clubid_, other->clubid_);
    std::swap(clubpipeiparam_, other->clubpipeiparam_);
    std::swap(clubgametypeid_, other->clubgametypeid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqClubGameRoomList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqClubGameRoomList_descriptor_;
  metadata.reflection = ReqClubGameRoomList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResClubGameRoomList::kResultFieldNumber;
const int ResClubGameRoomList::kListFieldNumber;
const int ResClubGameRoomList::kClubCurNumFieldNumber;
const int ResClubGameRoomList::kClubTotalNumLimitFieldNumber;
const int ResClubGameRoomList::kOnlineTotalFieldNumber;
const int ResClubGameRoomList::kClubIdFieldNumber;
const int ResClubGameRoomList::kTotalCardFieldNumber;
const int ResClubGameRoomList::kIntroFieldNumber;
const int ResClubGameRoomList::kPlayingNumFieldNumber;
#endif  // !_MSC_VER

ResClubGameRoomList::ResClubGameRoomList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResClubGameRoomList::InitAsDefaultInstance() {
  result_ = const_cast< ::ProtoNet::ResponseResult*>(&::ProtoNet::ResponseResult::default_instance());
}

ResClubGameRoomList::ResClubGameRoomList(const ResClubGameRoomList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResClubGameRoomList::SharedCtor() {
  _cached_size_ = 0;
  result_ = NULL;
  clubcurnum_ = 0;
  clubtotalnumlimit_ = 0;
  onlinetotal_ = 0;
  clubid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  totalcard_ = 0;
  intro_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  playingnum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResClubGameRoomList::~ResClubGameRoomList() {
  SharedDtor();
}

void ResClubGameRoomList::SharedDtor() {
  if (clubid_ != &::google::protobuf::internal::kEmptyString) {
    delete clubid_;
  }
  if (intro_ != &::google::protobuf::internal::kEmptyString) {
    delete intro_;
  }
  if (this != default_instance_) {
    delete result_;
  }
}

void ResClubGameRoomList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResClubGameRoomList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResClubGameRoomList_descriptor_;
}

const ResClubGameRoomList& ResClubGameRoomList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgGate_2eproto();
  return *default_instance_;
}

ResClubGameRoomList* ResClubGameRoomList::default_instance_ = NULL;

ResClubGameRoomList* ResClubGameRoomList::New() const {
  return new ResClubGameRoomList;
}

void ResClubGameRoomList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_result()) {
      if (result_ != NULL) result_->::ProtoNet::ResponseResult::Clear();
    }
    clubcurnum_ = 0;
    clubtotalnumlimit_ = 0;
    onlinetotal_ = 0;
    if (has_clubid()) {
      if (clubid_ != &::google::protobuf::internal::kEmptyString) {
        clubid_->clear();
      }
    }
    totalcard_ = 0;
    if (has_intro()) {
      if (intro_ != &::google::protobuf::internal::kEmptyString) {
        intro_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    playingnum_ = 0;
  }
  list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResClubGameRoomList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ProtoNet.ResponseResult result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_list;
        break;
      }

      // repeated .ProtoNet.ClubGameRoomList list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_list;
        if (input->ExpectTag(24)) goto parse_clubCurNum;
        break;
      }

      // optional int32 clubCurNum = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_clubCurNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &clubcurnum_)));
          set_has_clubcurnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_clubTotalNumLimit;
        break;
      }

      // optional int32 clubTotalNumLimit = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_clubTotalNumLimit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &clubtotalnumlimit_)));
          set_has_clubtotalnumlimit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_onlineTotal;
        break;
      }

      // optional int32 onlineTotal = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_onlineTotal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &onlinetotal_)));
          set_has_onlinetotal();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_clubId;
        break;
      }

      // optional string clubId = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_clubId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_clubid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->clubid().data(), this->clubid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_totalCard;
        break;
      }

      // optional int32 totalCard = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_totalCard:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &totalcard_)));
          set_has_totalcard();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_intro;
        break;
      }

      // optional string intro = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_intro:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_intro()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->intro().data(), this->intro().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_playingNum;
        break;
      }

      // optional int32 playingNum = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playingNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &playingnum_)));
          set_has_playingnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResClubGameRoomList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .ProtoNet.ResponseResult result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->result(), output);
  }

  // repeated .ProtoNet.ClubGameRoomList list = 2;
  for (int i = 0; i < this->list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->list(i), output);
  }

  // optional int32 clubCurNum = 3;
  if (has_clubcurnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->clubcurnum(), output);
  }

  // optional int32 clubTotalNumLimit = 4;
  if (has_clubtotalnumlimit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->clubtotalnumlimit(), output);
  }

  // optional int32 onlineTotal = 5;
  if (has_onlinetotal()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->onlinetotal(), output);
  }

  // optional string clubId = 6;
  if (has_clubid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->clubid().data(), this->clubid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->clubid(), output);
  }

  // optional int32 totalCard = 7;
  if (has_totalcard()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->totalcard(), output);
  }

  // optional string intro = 8;
  if (has_intro()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->intro().data(), this->intro().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->intro(), output);
  }

  // optional int32 playingNum = 9;
  if (has_playingnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->playingnum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResClubGameRoomList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .ProtoNet.ResponseResult result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->result(), target);
  }

  // repeated .ProtoNet.ClubGameRoomList list = 2;
  for (int i = 0; i < this->list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->list(i), target);
  }

  // optional int32 clubCurNum = 3;
  if (has_clubcurnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->clubcurnum(), target);
  }

  // optional int32 clubTotalNumLimit = 4;
  if (has_clubtotalnumlimit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->clubtotalnumlimit(), target);
  }

  // optional int32 onlineTotal = 5;
  if (has_onlinetotal()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->onlinetotal(), target);
  }

  // optional string clubId = 6;
  if (has_clubid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->clubid().data(), this->clubid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->clubid(), target);
  }

  // optional int32 totalCard = 7;
  if (has_totalcard()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->totalcard(), target);
  }

  // optional string intro = 8;
  if (has_intro()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->intro().data(), this->intro().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->intro(), target);
  }

  // optional int32 playingNum = 9;
  if (has_playingnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->playingnum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResClubGameRoomList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ProtoNet.ResponseResult result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->result());
    }

    // optional int32 clubCurNum = 3;
    if (has_clubcurnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->clubcurnum());
    }

    // optional int32 clubTotalNumLimit = 4;
    if (has_clubtotalnumlimit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->clubtotalnumlimit());
    }

    // optional int32 onlineTotal = 5;
    if (has_onlinetotal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->onlinetotal());
    }

    // optional string clubId = 6;
    if (has_clubid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->clubid());
    }

    // optional int32 totalCard = 7;
    if (has_totalcard()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->totalcard());
    }

    // optional string intro = 8;
    if (has_intro()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->intro());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 playingNum = 9;
    if (has_playingnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->playingnum());
    }

  }
  // repeated .ProtoNet.ClubGameRoomList list = 2;
  total_size += 1 * this->list_size();
  for (int i = 0; i < this->list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResClubGameRoomList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResClubGameRoomList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResClubGameRoomList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResClubGameRoomList::MergeFrom(const ResClubGameRoomList& from) {
  GOOGLE_CHECK_NE(&from, this);
  list_.MergeFrom(from.list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      mutable_result()->::ProtoNet::ResponseResult::MergeFrom(from.result());
    }
    if (from.has_clubcurnum()) {
      set_clubcurnum(from.clubcurnum());
    }
    if (from.has_clubtotalnumlimit()) {
      set_clubtotalnumlimit(from.clubtotalnumlimit());
    }
    if (from.has_onlinetotal()) {
      set_onlinetotal(from.onlinetotal());
    }
    if (from.has_clubid()) {
      set_clubid(from.clubid());
    }
    if (from.has_totalcard()) {
      set_totalcard(from.totalcard());
    }
    if (from.has_intro()) {
      set_intro(from.intro());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_playingnum()) {
      set_playingnum(from.playingnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResClubGameRoomList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResClubGameRoomList::CopyFrom(const ResClubGameRoomList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResClubGameRoomList::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_result()) {
    if (!this->result().IsInitialized()) return false;
  }
  for (int i = 0; i < list_size(); i++) {
    if (!this->list(i).IsInitialized()) return false;
  }
  return true;
}

void ResClubGameRoomList::Swap(ResClubGameRoomList* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    list_.Swap(&other->list_);
    std::swap(clubcurnum_, other->clubcurnum_);
    std::swap(clubtotalnumlimit_, other->clubtotalnumlimit_);
    std::swap(onlinetotal_, other->onlinetotal_);
    std::swap(clubid_, other->clubid_);
    std::swap(totalcard_, other->totalcard_);
    std::swap(intro_, other->intro_);
    std::swap(playingnum_, other->playingnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResClubGameRoomList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResClubGameRoomList_descriptor_;
  metadata.reflection = ResClubGameRoomList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClubGameRoomList::kRoomIdFieldNumber;
const int ClubGameRoomList::kParamStringFieldNumber;
const int ClubGameRoomList::kYazhuFieldNumber;
const int ClubGameRoomList::kHalfWayJoinFieldNumber;
const int ClubGameRoomList::kMaxPlayerNumFieldNumber;
const int ClubGameRoomList::kFangkaJinbiFieldNumber;
const int ClubGameRoomList::kMinNeedFieldNumber;
const int ClubGameRoomList::kPipeiParamFieldNumber;
const int ClubGameRoomList::kServerInfoFieldNumber;
const int ClubGameRoomList::kGameIdFieldNumber;
const int ClubGameRoomList::kCurrentPlayerNumFieldNumber;
const int ClubGameRoomList::kRoomStatusFieldNumber;
const int ClubGameRoomList::kCurrentWatchPlayerNumFieldNumber;
const int ClubGameRoomList::kRoomTypeFieldNumber;
const int ClubGameRoomList::kTimesTypeFieldNumber;
const int ClubGameRoomList::kTableNumFieldNumber;
const int ClubGameRoomList::kRoomRoleInfoFieldNumber;
const int ClubGameRoomList::kRoomerUniqueIdFieldNumber;
#endif  // !_MSC_VER

ClubGameRoomList::ClubGameRoomList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ClubGameRoomList::InitAsDefaultInstance() {
  serverinfo_ = const_cast< ::ProtoNet::ServerInfoIpsSafeDetail*>(&::ProtoNet::ServerInfoIpsSafeDetail::default_instance());
}

ClubGameRoomList::ClubGameRoomList(const ClubGameRoomList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ClubGameRoomList::SharedCtor() {
  _cached_size_ = 0;
  roomid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  paramstring_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  yazhu_ = 0;
  halfwayjoin_ = 0;
  maxplayernum_ = 0;
  fangkajinbi_ = 0;
  minneed_ = 0;
  pipeiparam_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  serverinfo_ = NULL;
  gameid_ = 0;
  currentplayernum_ = 0;
  roomstatus_ = 0;
  currentwatchplayernum_ = 0;
  roomtype_ = 0;
  timestype_ = 0;
  tablenum_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  roomeruniqueid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClubGameRoomList::~ClubGameRoomList() {
  SharedDtor();
}

void ClubGameRoomList::SharedDtor() {
  if (roomid_ != &::google::protobuf::internal::kEmptyString) {
    delete roomid_;
  }
  if (paramstring_ != &::google::protobuf::internal::kEmptyString) {
    delete paramstring_;
  }
  if (pipeiparam_ != &::google::protobuf::internal::kEmptyString) {
    delete pipeiparam_;
  }
  if (tablenum_ != &::google::protobuf::internal::kEmptyString) {
    delete tablenum_;
  }
  if (roomeruniqueid_ != &::google::protobuf::internal::kEmptyString) {
    delete roomeruniqueid_;
  }
  if (this != default_instance_) {
    delete serverinfo_;
  }
}

void ClubGameRoomList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClubGameRoomList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClubGameRoomList_descriptor_;
}

const ClubGameRoomList& ClubGameRoomList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgGate_2eproto();
  return *default_instance_;
}

ClubGameRoomList* ClubGameRoomList::default_instance_ = NULL;

ClubGameRoomList* ClubGameRoomList::New() const {
  return new ClubGameRoomList;
}

void ClubGameRoomList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_roomid()) {
      if (roomid_ != &::google::protobuf::internal::kEmptyString) {
        roomid_->clear();
      }
    }
    if (has_paramstring()) {
      if (paramstring_ != &::google::protobuf::internal::kEmptyString) {
        paramstring_->clear();
      }
    }
    yazhu_ = 0;
    halfwayjoin_ = 0;
    maxplayernum_ = 0;
    fangkajinbi_ = 0;
    minneed_ = 0;
    if (has_pipeiparam()) {
      if (pipeiparam_ != &::google::protobuf::internal::kEmptyString) {
        pipeiparam_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_serverinfo()) {
      if (serverinfo_ != NULL) serverinfo_->::ProtoNet::ServerInfoIpsSafeDetail::Clear();
    }
    gameid_ = 0;
    currentplayernum_ = 0;
    roomstatus_ = 0;
    currentwatchplayernum_ = 0;
    roomtype_ = 0;
    timestype_ = 0;
    if (has_tablenum()) {
      if (tablenum_ != &::google::protobuf::internal::kEmptyString) {
        tablenum_->clear();
      }
    }
  }
  if (_has_bits_[17 / 32] & (0xffu << (17 % 32))) {
    if (has_roomeruniqueid()) {
      if (roomeruniqueid_ != &::google::protobuf::internal::kEmptyString) {
        roomeruniqueid_->clear();
      }
    }
  }
  roomroleinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClubGameRoomList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string roomId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_roomid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->roomid().data(), this->roomid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_paramString;
        break;
      }

      // required string paramString = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_paramString:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_paramstring()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->paramstring().data(), this->paramstring().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_yazhu;
        break;
      }

      // required double yazhu = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_yazhu:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &yazhu_)));
          set_has_yazhu();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_halfWayJoin;
        break;
      }

      // required int32 halfWayJoin = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_halfWayJoin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &halfwayjoin_)));
          set_has_halfwayjoin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_maxPlayerNum;
        break;
      }

      // required int32 maxPlayerNum = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_maxPlayerNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxplayernum_)));
          set_has_maxplayernum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_fangkaJinbi;
        break;
      }

      // required int32 fangkaJinbi = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fangkaJinbi:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fangkajinbi_)));
          set_has_fangkajinbi();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(57)) goto parse_minNeed;
        break;
      }

      // required double minNeed = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_minNeed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &minneed_)));
          set_has_minneed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_pipeiParam;
        break;
      }

      // required string pipeiParam = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pipeiParam:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pipeiparam()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->pipeiparam().data(), this->pipeiparam().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_serverInfo;
        break;
      }

      // required .ProtoNet.ServerInfoIpsSafeDetail serverInfo = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_serverInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_serverinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_gameId;
        break;
      }

      // required int32 gameId = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gameId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_currentPlayerNum;
        break;
      }

      // required int32 currentPlayerNum = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_currentPlayerNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &currentplayernum_)));
          set_has_currentplayernum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_roomStatus;
        break;
      }

      // required int32 roomStatus = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roomStatus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomstatus_)));
          set_has_roomstatus();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_currentWatchPlayerNum;
        break;
      }

      // required int32 currentWatchPlayerNum = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_currentWatchPlayerNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &currentwatchplayernum_)));
          set_has_currentwatchplayernum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_roomType;
        break;
      }

      // required int32 roomType = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roomType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomtype_)));
          set_has_roomtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_timesType;
        break;
      }

      // required int32 timesType = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_timesType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &timestype_)));
          set_has_timestype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_tableNum;
        break;
      }

      // optional string tableNum = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tableNum:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tablenum()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->tablenum().data(), this->tablenum().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_roomRoleInfo;
        break;
      }

      // repeated .ProtoNet.RoomRoleInfo roomRoleInfo = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_roomRoleInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_roomroleinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_roomRoleInfo;
        if (input->ExpectTag(146)) goto parse_roomerUniqueId;
        break;
      }

      // optional string roomerUniqueId = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_roomerUniqueId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_roomeruniqueid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->roomeruniqueid().data(), this->roomeruniqueid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ClubGameRoomList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string roomId = 1;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->roomid().data(), this->roomid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->roomid(), output);
  }

  // required string paramString = 2;
  if (has_paramstring()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->paramstring().data(), this->paramstring().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->paramstring(), output);
  }

  // required double yazhu = 3;
  if (has_yazhu()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->yazhu(), output);
  }

  // required int32 halfWayJoin = 4;
  if (has_halfwayjoin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->halfwayjoin(), output);
  }

  // required int32 maxPlayerNum = 5;
  if (has_maxplayernum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->maxplayernum(), output);
  }

  // required int32 fangkaJinbi = 6;
  if (has_fangkajinbi()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->fangkajinbi(), output);
  }

  // required double minNeed = 7;
  if (has_minneed()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->minneed(), output);
  }

  // required string pipeiParam = 8;
  if (has_pipeiparam()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pipeiparam().data(), this->pipeiparam().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->pipeiparam(), output);
  }

  // required .ProtoNet.ServerInfoIpsSafeDetail serverInfo = 9;
  if (has_serverinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->serverinfo(), output);
  }

  // required int32 gameId = 10;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->gameid(), output);
  }

  // required int32 currentPlayerNum = 11;
  if (has_currentplayernum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->currentplayernum(), output);
  }

  // required int32 roomStatus = 12;
  if (has_roomstatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->roomstatus(), output);
  }

  // required int32 currentWatchPlayerNum = 13;
  if (has_currentwatchplayernum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->currentwatchplayernum(), output);
  }

  // required int32 roomType = 14;
  if (has_roomtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->roomtype(), output);
  }

  // required int32 timesType = 15;
  if (has_timestype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->timestype(), output);
  }

  // optional string tableNum = 16;
  if (has_tablenum()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tablenum().data(), this->tablenum().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      16, this->tablenum(), output);
  }

  // repeated .ProtoNet.RoomRoleInfo roomRoleInfo = 17;
  for (int i = 0; i < this->roomroleinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, this->roomroleinfo(i), output);
  }

  // optional string roomerUniqueId = 18;
  if (has_roomeruniqueid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->roomeruniqueid().data(), this->roomeruniqueid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      18, this->roomeruniqueid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ClubGameRoomList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string roomId = 1;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->roomid().data(), this->roomid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->roomid(), target);
  }

  // required string paramString = 2;
  if (has_paramstring()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->paramstring().data(), this->paramstring().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->paramstring(), target);
  }

  // required double yazhu = 3;
  if (has_yazhu()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->yazhu(), target);
  }

  // required int32 halfWayJoin = 4;
  if (has_halfwayjoin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->halfwayjoin(), target);
  }

  // required int32 maxPlayerNum = 5;
  if (has_maxplayernum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->maxplayernum(), target);
  }

  // required int32 fangkaJinbi = 6;
  if (has_fangkajinbi()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->fangkajinbi(), target);
  }

  // required double minNeed = 7;
  if (has_minneed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->minneed(), target);
  }

  // required string pipeiParam = 8;
  if (has_pipeiparam()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pipeiparam().data(), this->pipeiparam().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->pipeiparam(), target);
  }

  // required .ProtoNet.ServerInfoIpsSafeDetail serverInfo = 9;
  if (has_serverinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->serverinfo(), target);
  }

  // required int32 gameId = 10;
  if (has_gameid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->gameid(), target);
  }

  // required int32 currentPlayerNum = 11;
  if (has_currentplayernum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->currentplayernum(), target);
  }

  // required int32 roomStatus = 12;
  if (has_roomstatus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->roomstatus(), target);
  }

  // required int32 currentWatchPlayerNum = 13;
  if (has_currentwatchplayernum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->currentwatchplayernum(), target);
  }

  // required int32 roomType = 14;
  if (has_roomtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->roomtype(), target);
  }

  // required int32 timesType = 15;
  if (has_timestype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->timestype(), target);
  }

  // optional string tableNum = 16;
  if (has_tablenum()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tablenum().data(), this->tablenum().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->tablenum(), target);
  }

  // repeated .ProtoNet.RoomRoleInfo roomRoleInfo = 17;
  for (int i = 0; i < this->roomroleinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        17, this->roomroleinfo(i), target);
  }

  // optional string roomerUniqueId = 18;
  if (has_roomeruniqueid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->roomeruniqueid().data(), this->roomeruniqueid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        18, this->roomeruniqueid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ClubGameRoomList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string roomId = 1;
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->roomid());
    }

    // required string paramString = 2;
    if (has_paramstring()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->paramstring());
    }

    // required double yazhu = 3;
    if (has_yazhu()) {
      total_size += 1 + 8;
    }

    // required int32 halfWayJoin = 4;
    if (has_halfwayjoin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->halfwayjoin());
    }

    // required int32 maxPlayerNum = 5;
    if (has_maxplayernum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxplayernum());
    }

    // required int32 fangkaJinbi = 6;
    if (has_fangkajinbi()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fangkajinbi());
    }

    // required double minNeed = 7;
    if (has_minneed()) {
      total_size += 1 + 8;
    }

    // required string pipeiParam = 8;
    if (has_pipeiparam()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pipeiparam());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required .ProtoNet.ServerInfoIpsSafeDetail serverInfo = 9;
    if (has_serverinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->serverinfo());
    }

    // required int32 gameId = 10;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gameid());
    }

    // required int32 currentPlayerNum = 11;
    if (has_currentplayernum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->currentplayernum());
    }

    // required int32 roomStatus = 12;
    if (has_roomstatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roomstatus());
    }

    // required int32 currentWatchPlayerNum = 13;
    if (has_currentwatchplayernum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->currentwatchplayernum());
    }

    // required int32 roomType = 14;
    if (has_roomtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roomtype());
    }

    // required int32 timesType = 15;
    if (has_timestype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->timestype());
    }

    // optional string tableNum = 16;
    if (has_tablenum()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tablenum());
    }

  }
  if (_has_bits_[17 / 32] & (0xffu << (17 % 32))) {
    // optional string roomerUniqueId = 18;
    if (has_roomeruniqueid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->roomeruniqueid());
    }

  }
  // repeated .ProtoNet.RoomRoleInfo roomRoleInfo = 17;
  total_size += 2 * this->roomroleinfo_size();
  for (int i = 0; i < this->roomroleinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->roomroleinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClubGameRoomList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClubGameRoomList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClubGameRoomList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClubGameRoomList::MergeFrom(const ClubGameRoomList& from) {
  GOOGLE_CHECK_NE(&from, this);
  roomroleinfo_.MergeFrom(from.roomroleinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
    if (from.has_paramstring()) {
      set_paramstring(from.paramstring());
    }
    if (from.has_yazhu()) {
      set_yazhu(from.yazhu());
    }
    if (from.has_halfwayjoin()) {
      set_halfwayjoin(from.halfwayjoin());
    }
    if (from.has_maxplayernum()) {
      set_maxplayernum(from.maxplayernum());
    }
    if (from.has_fangkajinbi()) {
      set_fangkajinbi(from.fangkajinbi());
    }
    if (from.has_minneed()) {
      set_minneed(from.minneed());
    }
    if (from.has_pipeiparam()) {
      set_pipeiparam(from.pipeiparam());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_serverinfo()) {
      mutable_serverinfo()->::ProtoNet::ServerInfoIpsSafeDetail::MergeFrom(from.serverinfo());
    }
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_currentplayernum()) {
      set_currentplayernum(from.currentplayernum());
    }
    if (from.has_roomstatus()) {
      set_roomstatus(from.roomstatus());
    }
    if (from.has_currentwatchplayernum()) {
      set_currentwatchplayernum(from.currentwatchplayernum());
    }
    if (from.has_roomtype()) {
      set_roomtype(from.roomtype());
    }
    if (from.has_timestype()) {
      set_timestype(from.timestype());
    }
    if (from.has_tablenum()) {
      set_tablenum(from.tablenum());
    }
  }
  if (from._has_bits_[17 / 32] & (0xffu << (17 % 32))) {
    if (from.has_roomeruniqueid()) {
      set_roomeruniqueid(from.roomeruniqueid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClubGameRoomList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClubGameRoomList::CopyFrom(const ClubGameRoomList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClubGameRoomList::IsInitialized() const {
  if ((_has_bits_[0] & 0x00007fff) != 0x00007fff) return false;

  for (int i = 0; i < roomroleinfo_size(); i++) {
    if (!this->roomroleinfo(i).IsInitialized()) return false;
  }
  return true;
}

void ClubGameRoomList::Swap(ClubGameRoomList* other) {
  if (other != this) {
    std::swap(roomid_, other->roomid_);
    std::swap(paramstring_, other->paramstring_);
    std::swap(yazhu_, other->yazhu_);
    std::swap(halfwayjoin_, other->halfwayjoin_);
    std::swap(maxplayernum_, other->maxplayernum_);
    std::swap(fangkajinbi_, other->fangkajinbi_);
    std::swap(minneed_, other->minneed_);
    std::swap(pipeiparam_, other->pipeiparam_);
    std::swap(serverinfo_, other->serverinfo_);
    std::swap(gameid_, other->gameid_);
    std::swap(currentplayernum_, other->currentplayernum_);
    std::swap(roomstatus_, other->roomstatus_);
    std::swap(currentwatchplayernum_, other->currentwatchplayernum_);
    std::swap(roomtype_, other->roomtype_);
    std::swap(timestype_, other->timestype_);
    std::swap(tablenum_, other->tablenum_);
    roomroleinfo_.Swap(&other->roomroleinfo_);
    std::swap(roomeruniqueid_, other->roomeruniqueid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClubGameRoomList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClubGameRoomList_descriptor_;
  metadata.reflection = ClubGameRoomList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RoomRoleInfo::kUniqueIdFieldNumber;
const int RoomRoleInfo::kNickNameFieldNumber;
const int RoomRoleInfo::kHeadImgFieldNumber;
const int RoomRoleInfo::kHeadFieldNumber;
const int RoomRoleInfo::kPosFieldNumber;
#endif  // !_MSC_VER

RoomRoleInfo::RoomRoleInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RoomRoleInfo::InitAsDefaultInstance() {
}

RoomRoleInfo::RoomRoleInfo(const RoomRoleInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RoomRoleInfo::SharedCtor() {
  _cached_size_ = 0;
  uniqueid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  headimg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  head_ = 0;
  pos_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoomRoleInfo::~RoomRoleInfo() {
  SharedDtor();
}

void RoomRoleInfo::SharedDtor() {
  if (uniqueid_ != &::google::protobuf::internal::kEmptyString) {
    delete uniqueid_;
  }
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    delete nickname_;
  }
  if (headimg_ != &::google::protobuf::internal::kEmptyString) {
    delete headimg_;
  }
  if (this != default_instance_) {
  }
}

void RoomRoleInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoomRoleInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoomRoleInfo_descriptor_;
}

const RoomRoleInfo& RoomRoleInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgGate_2eproto();
  return *default_instance_;
}

RoomRoleInfo* RoomRoleInfo::default_instance_ = NULL;

RoomRoleInfo* RoomRoleInfo::New() const {
  return new RoomRoleInfo;
}

void RoomRoleInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_uniqueid()) {
      if (uniqueid_ != &::google::protobuf::internal::kEmptyString) {
        uniqueid_->clear();
      }
    }
    if (has_nickname()) {
      if (nickname_ != &::google::protobuf::internal::kEmptyString) {
        nickname_->clear();
      }
    }
    if (has_headimg()) {
      if (headimg_ != &::google::protobuf::internal::kEmptyString) {
        headimg_->clear();
      }
    }
    head_ = 0;
    pos_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoomRoleInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string uniqueId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uniqueid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->uniqueid().data(), this->uniqueid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_nickName;
        break;
      }

      // required string nickName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nickName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->nickname().data(), this->nickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_headImg;
        break;
      }

      // required string headImg = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_headImg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_headimg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->headimg().data(), this->headimg().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_head;
        break;
      }

      // required int32 head = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_head:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &head_)));
          set_has_head();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_pos;
        break;
      }

      // required int32 pos = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pos_)));
          set_has_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RoomRoleInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string uniqueId = 1;
  if (has_uniqueid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uniqueid().data(), this->uniqueid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->uniqueid(), output);
  }

  // required string nickName = 2;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->nickname(), output);
  }

  // required string headImg = 3;
  if (has_headimg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->headimg().data(), this->headimg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->headimg(), output);
  }

  // required int32 head = 4;
  if (has_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->head(), output);
  }

  // required int32 pos = 5;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->pos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RoomRoleInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string uniqueId = 1;
  if (has_uniqueid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uniqueid().data(), this->uniqueid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->uniqueid(), target);
  }

  // required string nickName = 2;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->nickname(), target);
  }

  // required string headImg = 3;
  if (has_headimg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->headimg().data(), this->headimg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->headimg(), target);
  }

  // required int32 head = 4;
  if (has_head()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->head(), target);
  }

  // required int32 pos = 5;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->pos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RoomRoleInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string uniqueId = 1;
    if (has_uniqueid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uniqueid());
    }

    // required string nickName = 2;
    if (has_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nickname());
    }

    // required string headImg = 3;
    if (has_headimg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->headimg());
    }

    // required int32 head = 4;
    if (has_head()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->head());
    }

    // required int32 pos = 5;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pos());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoomRoleInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoomRoleInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoomRoleInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoomRoleInfo::MergeFrom(const RoomRoleInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uniqueid()) {
      set_uniqueid(from.uniqueid());
    }
    if (from.has_nickname()) {
      set_nickname(from.nickname());
    }
    if (from.has_headimg()) {
      set_headimg(from.headimg());
    }
    if (from.has_head()) {
      set_head(from.head());
    }
    if (from.has_pos()) {
      set_pos(from.pos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoomRoleInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoomRoleInfo::CopyFrom(const RoomRoleInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoomRoleInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void RoomRoleInfo::Swap(RoomRoleInfo* other) {
  if (other != this) {
    std::swap(uniqueid_, other->uniqueid_);
    std::swap(nickname_, other->nickname_);
    std::swap(headimg_, other->headimg_);
    std::swap(head_, other->head_);
    std::swap(pos_, other->pos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoomRoleInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoomRoleInfo_descriptor_;
  metadata.reflection = RoomRoleInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqClubPipeiRoom::kRoomTypeFieldNumber;
const int ReqClubPipeiRoom::kTimesFieldNumber;
const int ReqClubPipeiRoom::kParamStringFieldNumber;
const int ReqClubPipeiRoom::kTimesTypeFieldNumber;
const int ReqClubPipeiRoom::kHalfWayJoinFieldNumber;
const int ReqClubPipeiRoom::kMaxPlayerNumFieldNumber;
const int ReqClubPipeiRoom::kYazhuFieldNumber;
const int ReqClubPipeiRoom::kGameIdFieldNumber;
const int ReqClubPipeiRoom::kClubIdFieldNumber;
const int ReqClubPipeiRoom::kPlayerIdFieldNumber;
const int ReqClubPipeiRoom::kPayTypeFieldNumber;
#endif  // !_MSC_VER

ReqClubPipeiRoom::ReqClubPipeiRoom()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqClubPipeiRoom::InitAsDefaultInstance() {
}

ReqClubPipeiRoom::ReqClubPipeiRoom(const ReqClubPipeiRoom& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqClubPipeiRoom::SharedCtor() {
  _cached_size_ = 0;
  roomtype_ = 0;
  times_ = 0;
  paramstring_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  timestype_ = 0;
  halfwayjoin_ = 0;
  maxplayernum_ = 0;
  yazhu_ = 0;
  gameid_ = 0;
  clubid_ = 0;
  playerid_ = 0;
  paytype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqClubPipeiRoom::~ReqClubPipeiRoom() {
  SharedDtor();
}

void ReqClubPipeiRoom::SharedDtor() {
  if (paramstring_ != &::google::protobuf::internal::kEmptyString) {
    delete paramstring_;
  }
  if (this != default_instance_) {
  }
}

void ReqClubPipeiRoom::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqClubPipeiRoom::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqClubPipeiRoom_descriptor_;
}

const ReqClubPipeiRoom& ReqClubPipeiRoom::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgGate_2eproto();
  return *default_instance_;
}

ReqClubPipeiRoom* ReqClubPipeiRoom::default_instance_ = NULL;

ReqClubPipeiRoom* ReqClubPipeiRoom::New() const {
  return new ReqClubPipeiRoom;
}

void ReqClubPipeiRoom::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roomtype_ = 0;
    times_ = 0;
    if (has_paramstring()) {
      if (paramstring_ != &::google::protobuf::internal::kEmptyString) {
        paramstring_->clear();
      }
    }
    timestype_ = 0;
    halfwayjoin_ = 0;
    maxplayernum_ = 0;
    yazhu_ = 0;
    gameid_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    clubid_ = 0;
    playerid_ = 0;
    paytype_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqClubPipeiRoom::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 roomType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomtype_)));
          set_has_roomtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_times;
        break;
      }

      // optional int32 times = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &times_)));
          set_has_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_paramString;
        break;
      }

      // optional string paramString = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_paramString:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_paramstring()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->paramstring().data(), this->paramstring().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_timesType;
        break;
      }

      // optional int32 timesType = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_timesType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &timestype_)));
          set_has_timestype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_halfWayJoin;
        break;
      }

      // optional int32 halfWayJoin = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_halfWayJoin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &halfwayjoin_)));
          set_has_halfwayjoin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_maxPlayerNum;
        break;
      }

      // optional int32 maxPlayerNum = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_maxPlayerNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxplayernum_)));
          set_has_maxplayernum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(57)) goto parse_yazhu;
        break;
      }

      // optional double yazhu = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_yazhu:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &yazhu_)));
          set_has_yazhu();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_gameId;
        break;
      }

      // optional int32 gameId = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gameId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_clubId;
        break;
      }

      // optional int32 clubId = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_clubId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &clubid_)));
          set_has_clubid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_playerId;
        break;
      }

      // optional int32 playerId = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playerId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_payType;
        break;
      }

      // optional int32 payType = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_payType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &paytype_)));
          set_has_paytype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqClubPipeiRoom::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 roomType = 1;
  if (has_roomtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->roomtype(), output);
  }

  // optional int32 times = 2;
  if (has_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->times(), output);
  }

  // optional string paramString = 3;
  if (has_paramstring()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->paramstring().data(), this->paramstring().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->paramstring(), output);
  }

  // optional int32 timesType = 4;
  if (has_timestype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->timestype(), output);
  }

  // optional int32 halfWayJoin = 5;
  if (has_halfwayjoin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->halfwayjoin(), output);
  }

  // optional int32 maxPlayerNum = 6;
  if (has_maxplayernum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->maxplayernum(), output);
  }

  // optional double yazhu = 7;
  if (has_yazhu()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->yazhu(), output);
  }

  // optional int32 gameId = 8;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->gameid(), output);
  }

  // optional int32 clubId = 9;
  if (has_clubid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->clubid(), output);
  }

  // optional int32 playerId = 10;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->playerid(), output);
  }

  // optional int32 payType = 11;
  if (has_paytype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->paytype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqClubPipeiRoom::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 roomType = 1;
  if (has_roomtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->roomtype(), target);
  }

  // optional int32 times = 2;
  if (has_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->times(), target);
  }

  // optional string paramString = 3;
  if (has_paramstring()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->paramstring().data(), this->paramstring().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->paramstring(), target);
  }

  // optional int32 timesType = 4;
  if (has_timestype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->timestype(), target);
  }

  // optional int32 halfWayJoin = 5;
  if (has_halfwayjoin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->halfwayjoin(), target);
  }

  // optional int32 maxPlayerNum = 6;
  if (has_maxplayernum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->maxplayernum(), target);
  }

  // optional double yazhu = 7;
  if (has_yazhu()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->yazhu(), target);
  }

  // optional int32 gameId = 8;
  if (has_gameid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->gameid(), target);
  }

  // optional int32 clubId = 9;
  if (has_clubid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->clubid(), target);
  }

  // optional int32 playerId = 10;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->playerid(), target);
  }

  // optional int32 payType = 11;
  if (has_paytype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->paytype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqClubPipeiRoom::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 roomType = 1;
    if (has_roomtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roomtype());
    }

    // optional int32 times = 2;
    if (has_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->times());
    }

    // optional string paramString = 3;
    if (has_paramstring()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->paramstring());
    }

    // optional int32 timesType = 4;
    if (has_timestype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->timestype());
    }

    // optional int32 halfWayJoin = 5;
    if (has_halfwayjoin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->halfwayjoin());
    }

    // optional int32 maxPlayerNum = 6;
    if (has_maxplayernum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxplayernum());
    }

    // optional double yazhu = 7;
    if (has_yazhu()) {
      total_size += 1 + 8;
    }

    // optional int32 gameId = 8;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gameid());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 clubId = 9;
    if (has_clubid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->clubid());
    }

    // optional int32 playerId = 10;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->playerid());
    }

    // optional int32 payType = 11;
    if (has_paytype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->paytype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqClubPipeiRoom::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqClubPipeiRoom* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqClubPipeiRoom*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqClubPipeiRoom::MergeFrom(const ReqClubPipeiRoom& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roomtype()) {
      set_roomtype(from.roomtype());
    }
    if (from.has_times()) {
      set_times(from.times());
    }
    if (from.has_paramstring()) {
      set_paramstring(from.paramstring());
    }
    if (from.has_timestype()) {
      set_timestype(from.timestype());
    }
    if (from.has_halfwayjoin()) {
      set_halfwayjoin(from.halfwayjoin());
    }
    if (from.has_maxplayernum()) {
      set_maxplayernum(from.maxplayernum());
    }
    if (from.has_yazhu()) {
      set_yazhu(from.yazhu());
    }
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_clubid()) {
      set_clubid(from.clubid());
    }
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_paytype()) {
      set_paytype(from.paytype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqClubPipeiRoom::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqClubPipeiRoom::CopyFrom(const ReqClubPipeiRoom& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqClubPipeiRoom::IsInitialized() const {

  return true;
}

void ReqClubPipeiRoom::Swap(ReqClubPipeiRoom* other) {
  if (other != this) {
    std::swap(roomtype_, other->roomtype_);
    std::swap(times_, other->times_);
    std::swap(paramstring_, other->paramstring_);
    std::swap(timestype_, other->timestype_);
    std::swap(halfwayjoin_, other->halfwayjoin_);
    std::swap(maxplayernum_, other->maxplayernum_);
    std::swap(yazhu_, other->yazhu_);
    std::swap(gameid_, other->gameid_);
    std::swap(clubid_, other->clubid_);
    std::swap(playerid_, other->playerid_);
    std::swap(paytype_, other->paytype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqClubPipeiRoom::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqClubPipeiRoom_descriptor_;
  metadata.reflection = ReqClubPipeiRoom_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResClubPipeiRoom::kResultFieldNumber;
#endif  // !_MSC_VER

ResClubPipeiRoom::ResClubPipeiRoom()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResClubPipeiRoom::InitAsDefaultInstance() {
  result_ = const_cast< ::ProtoNet::ResponseResult*>(&::ProtoNet::ResponseResult::default_instance());
}

ResClubPipeiRoom::ResClubPipeiRoom(const ResClubPipeiRoom& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResClubPipeiRoom::SharedCtor() {
  _cached_size_ = 0;
  result_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResClubPipeiRoom::~ResClubPipeiRoom() {
  SharedDtor();
}

void ResClubPipeiRoom::SharedDtor() {
  if (this != default_instance_) {
    delete result_;
  }
}

void ResClubPipeiRoom::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResClubPipeiRoom::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResClubPipeiRoom_descriptor_;
}

const ResClubPipeiRoom& ResClubPipeiRoom::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgGate_2eproto();
  return *default_instance_;
}

ResClubPipeiRoom* ResClubPipeiRoom::default_instance_ = NULL;

ResClubPipeiRoom* ResClubPipeiRoom::New() const {
  return new ResClubPipeiRoom;
}

void ResClubPipeiRoom::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_result()) {
      if (result_ != NULL) result_->::ProtoNet::ResponseResult::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResClubPipeiRoom::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ProtoNet.ResponseResult result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResClubPipeiRoom::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .ProtoNet.ResponseResult result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResClubPipeiRoom::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .ProtoNet.ResponseResult result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResClubPipeiRoom::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ProtoNet.ResponseResult result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResClubPipeiRoom::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResClubPipeiRoom* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResClubPipeiRoom*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResClubPipeiRoom::MergeFrom(const ResClubPipeiRoom& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      mutable_result()->::ProtoNet::ResponseResult::MergeFrom(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResClubPipeiRoom::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResClubPipeiRoom::CopyFrom(const ResClubPipeiRoom& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResClubPipeiRoom::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_result()) {
    if (!this->result().IsInitialized()) return false;
  }
  return true;
}

void ResClubPipeiRoom::Swap(ResClubPipeiRoom* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResClubPipeiRoom::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResClubPipeiRoom_descriptor_;
  metadata.reflection = ResClubPipeiRoom_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

ReqExitClubPipeiRoom::ReqExitClubPipeiRoom()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqExitClubPipeiRoom::InitAsDefaultInstance() {
}

ReqExitClubPipeiRoom::ReqExitClubPipeiRoom(const ReqExitClubPipeiRoom& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqExitClubPipeiRoom::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqExitClubPipeiRoom::~ReqExitClubPipeiRoom() {
  SharedDtor();
}

void ReqExitClubPipeiRoom::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqExitClubPipeiRoom::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqExitClubPipeiRoom::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqExitClubPipeiRoom_descriptor_;
}

const ReqExitClubPipeiRoom& ReqExitClubPipeiRoom::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgGate_2eproto();
  return *default_instance_;
}

ReqExitClubPipeiRoom* ReqExitClubPipeiRoom::default_instance_ = NULL;

ReqExitClubPipeiRoom* ReqExitClubPipeiRoom::New() const {
  return new ReqExitClubPipeiRoom;
}

void ReqExitClubPipeiRoom::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqExitClubPipeiRoom::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void ReqExitClubPipeiRoom::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqExitClubPipeiRoom::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqExitClubPipeiRoom::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqExitClubPipeiRoom::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqExitClubPipeiRoom* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqExitClubPipeiRoom*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqExitClubPipeiRoom::MergeFrom(const ReqExitClubPipeiRoom& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqExitClubPipeiRoom::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqExitClubPipeiRoom::CopyFrom(const ReqExitClubPipeiRoom& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqExitClubPipeiRoom::IsInitialized() const {

  return true;
}

void ReqExitClubPipeiRoom::Swap(ReqExitClubPipeiRoom* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqExitClubPipeiRoom::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqExitClubPipeiRoom_descriptor_;
  metadata.reflection = ReqExitClubPipeiRoom_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResExitClubPipeiRoom::kResultFieldNumber;
#endif  // !_MSC_VER

ResExitClubPipeiRoom::ResExitClubPipeiRoom()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResExitClubPipeiRoom::InitAsDefaultInstance() {
  result_ = const_cast< ::ProtoNet::ResponseResult*>(&::ProtoNet::ResponseResult::default_instance());
}

ResExitClubPipeiRoom::ResExitClubPipeiRoom(const ResExitClubPipeiRoom& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResExitClubPipeiRoom::SharedCtor() {
  _cached_size_ = 0;
  result_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResExitClubPipeiRoom::~ResExitClubPipeiRoom() {
  SharedDtor();
}

void ResExitClubPipeiRoom::SharedDtor() {
  if (this != default_instance_) {
    delete result_;
  }
}

void ResExitClubPipeiRoom::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResExitClubPipeiRoom::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResExitClubPipeiRoom_descriptor_;
}

const ResExitClubPipeiRoom& ResExitClubPipeiRoom::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgGate_2eproto();
  return *default_instance_;
}

ResExitClubPipeiRoom* ResExitClubPipeiRoom::default_instance_ = NULL;

ResExitClubPipeiRoom* ResExitClubPipeiRoom::New() const {
  return new ResExitClubPipeiRoom;
}

void ResExitClubPipeiRoom::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_result()) {
      if (result_ != NULL) result_->::ProtoNet::ResponseResult::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResExitClubPipeiRoom::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ProtoNet.ResponseResult result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResExitClubPipeiRoom::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .ProtoNet.ResponseResult result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResExitClubPipeiRoom::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .ProtoNet.ResponseResult result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResExitClubPipeiRoom::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ProtoNet.ResponseResult result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResExitClubPipeiRoom::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResExitClubPipeiRoom* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResExitClubPipeiRoom*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResExitClubPipeiRoom::MergeFrom(const ResExitClubPipeiRoom& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      mutable_result()->::ProtoNet::ResponseResult::MergeFrom(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResExitClubPipeiRoom::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResExitClubPipeiRoom::CopyFrom(const ResExitClubPipeiRoom& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResExitClubPipeiRoom::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_result()) {
    if (!this->result().IsInitialized()) return false;
  }
  return true;
}

void ResExitClubPipeiRoom::Swap(ResExitClubPipeiRoom* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResExitClubPipeiRoom::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResExitClubPipeiRoom_descriptor_;
  metadata.reflection = ResExitClubPipeiRoom_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

ReqClubPipeiRoomStatus::ReqClubPipeiRoomStatus()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqClubPipeiRoomStatus::InitAsDefaultInstance() {
}

ReqClubPipeiRoomStatus::ReqClubPipeiRoomStatus(const ReqClubPipeiRoomStatus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqClubPipeiRoomStatus::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqClubPipeiRoomStatus::~ReqClubPipeiRoomStatus() {
  SharedDtor();
}

void ReqClubPipeiRoomStatus::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqClubPipeiRoomStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqClubPipeiRoomStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqClubPipeiRoomStatus_descriptor_;
}

const ReqClubPipeiRoomStatus& ReqClubPipeiRoomStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgGate_2eproto();
  return *default_instance_;
}

ReqClubPipeiRoomStatus* ReqClubPipeiRoomStatus::default_instance_ = NULL;

ReqClubPipeiRoomStatus* ReqClubPipeiRoomStatus::New() const {
  return new ReqClubPipeiRoomStatus;
}

void ReqClubPipeiRoomStatus::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqClubPipeiRoomStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void ReqClubPipeiRoomStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqClubPipeiRoomStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqClubPipeiRoomStatus::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqClubPipeiRoomStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqClubPipeiRoomStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqClubPipeiRoomStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqClubPipeiRoomStatus::MergeFrom(const ReqClubPipeiRoomStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqClubPipeiRoomStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqClubPipeiRoomStatus::CopyFrom(const ReqClubPipeiRoomStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqClubPipeiRoomStatus::IsInitialized() const {

  return true;
}

void ReqClubPipeiRoomStatus::Swap(ReqClubPipeiRoomStatus* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqClubPipeiRoomStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqClubPipeiRoomStatus_descriptor_;
  metadata.reflection = ReqClubPipeiRoomStatus_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResClubPipeiRoomStatus::kResultFieldNumber;
const int ResClubPipeiRoomStatus::kGameIdFieldNumber;
const int ResClubPipeiRoomStatus::kClubIdFieldNumber;
const int ResClubPipeiRoomStatus::kTimesFieldNumber;
const int ResClubPipeiRoomStatus::kParamStringFieldNumber;
const int ResClubPipeiRoomStatus::kMaxPlayerNumFieldNumber;
const int ResClubPipeiRoomStatus::kMatchPlayerNumFieldNumber;
#endif  // !_MSC_VER

ResClubPipeiRoomStatus::ResClubPipeiRoomStatus()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResClubPipeiRoomStatus::InitAsDefaultInstance() {
  result_ = const_cast< ::ProtoNet::ResponseResult*>(&::ProtoNet::ResponseResult::default_instance());
}

ResClubPipeiRoomStatus::ResClubPipeiRoomStatus(const ResClubPipeiRoomStatus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResClubPipeiRoomStatus::SharedCtor() {
  _cached_size_ = 0;
  result_ = NULL;
  gameid_ = 0;
  clubid_ = 0;
  times_ = 0;
  paramstring_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  maxplayernum_ = 0;
  matchplayernum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResClubPipeiRoomStatus::~ResClubPipeiRoomStatus() {
  SharedDtor();
}

void ResClubPipeiRoomStatus::SharedDtor() {
  if (paramstring_ != &::google::protobuf::internal::kEmptyString) {
    delete paramstring_;
  }
  if (this != default_instance_) {
    delete result_;
  }
}

void ResClubPipeiRoomStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResClubPipeiRoomStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResClubPipeiRoomStatus_descriptor_;
}

const ResClubPipeiRoomStatus& ResClubPipeiRoomStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgGate_2eproto();
  return *default_instance_;
}

ResClubPipeiRoomStatus* ResClubPipeiRoomStatus::default_instance_ = NULL;

ResClubPipeiRoomStatus* ResClubPipeiRoomStatus::New() const {
  return new ResClubPipeiRoomStatus;
}

void ResClubPipeiRoomStatus::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_result()) {
      if (result_ != NULL) result_->::ProtoNet::ResponseResult::Clear();
    }
    gameid_ = 0;
    clubid_ = 0;
    times_ = 0;
    if (has_paramstring()) {
      if (paramstring_ != &::google::protobuf::internal::kEmptyString) {
        paramstring_->clear();
      }
    }
    maxplayernum_ = 0;
    matchplayernum_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResClubPipeiRoomStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ProtoNet.ResponseResult result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gameId;
        break;
      }

      // optional int32 gameId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gameId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_clubId;
        break;
      }

      // optional int32 clubId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_clubId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &clubid_)));
          set_has_clubid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_times;
        break;
      }

      // optional int32 times = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &times_)));
          set_has_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_paramString;
        break;
      }

      // optional string paramString = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_paramString:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_paramstring()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->paramstring().data(), this->paramstring().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_maxPlayerNum;
        break;
      }

      // optional int32 maxPlayerNum = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_maxPlayerNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxplayernum_)));
          set_has_maxplayernum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_matchPlayerNum;
        break;
      }

      // optional int32 matchPlayerNum = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_matchPlayerNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &matchplayernum_)));
          set_has_matchplayernum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResClubPipeiRoomStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .ProtoNet.ResponseResult result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->result(), output);
  }

  // optional int32 gameId = 2;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->gameid(), output);
  }

  // optional int32 clubId = 3;
  if (has_clubid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->clubid(), output);
  }

  // optional int32 times = 4;
  if (has_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->times(), output);
  }

  // optional string paramString = 5;
  if (has_paramstring()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->paramstring().data(), this->paramstring().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->paramstring(), output);
  }

  // optional int32 maxPlayerNum = 6;
  if (has_maxplayernum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->maxplayernum(), output);
  }

  // optional int32 matchPlayerNum = 7;
  if (has_matchplayernum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->matchplayernum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResClubPipeiRoomStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .ProtoNet.ResponseResult result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->result(), target);
  }

  // optional int32 gameId = 2;
  if (has_gameid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->gameid(), target);
  }

  // optional int32 clubId = 3;
  if (has_clubid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->clubid(), target);
  }

  // optional int32 times = 4;
  if (has_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->times(), target);
  }

  // optional string paramString = 5;
  if (has_paramstring()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->paramstring().data(), this->paramstring().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->paramstring(), target);
  }

  // optional int32 maxPlayerNum = 6;
  if (has_maxplayernum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->maxplayernum(), target);
  }

  // optional int32 matchPlayerNum = 7;
  if (has_matchplayernum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->matchplayernum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResClubPipeiRoomStatus::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ProtoNet.ResponseResult result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->result());
    }

    // optional int32 gameId = 2;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gameid());
    }

    // optional int32 clubId = 3;
    if (has_clubid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->clubid());
    }

    // optional int32 times = 4;
    if (has_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->times());
    }

    // optional string paramString = 5;
    if (has_paramstring()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->paramstring());
    }

    // optional int32 maxPlayerNum = 6;
    if (has_maxplayernum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxplayernum());
    }

    // optional int32 matchPlayerNum = 7;
    if (has_matchplayernum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->matchplayernum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResClubPipeiRoomStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResClubPipeiRoomStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResClubPipeiRoomStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResClubPipeiRoomStatus::MergeFrom(const ResClubPipeiRoomStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      mutable_result()->::ProtoNet::ResponseResult::MergeFrom(from.result());
    }
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_clubid()) {
      set_clubid(from.clubid());
    }
    if (from.has_times()) {
      set_times(from.times());
    }
    if (from.has_paramstring()) {
      set_paramstring(from.paramstring());
    }
    if (from.has_maxplayernum()) {
      set_maxplayernum(from.maxplayernum());
    }
    if (from.has_matchplayernum()) {
      set_matchplayernum(from.matchplayernum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResClubPipeiRoomStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResClubPipeiRoomStatus::CopyFrom(const ResClubPipeiRoomStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResClubPipeiRoomStatus::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_result()) {
    if (!this->result().IsInitialized()) return false;
  }
  return true;
}

void ResClubPipeiRoomStatus::Swap(ResClubPipeiRoomStatus* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(gameid_, other->gameid_);
    std::swap(clubid_, other->clubid_);
    std::swap(times_, other->times_);
    std::swap(paramstring_, other->paramstring_);
    std::swap(maxplayernum_, other->maxplayernum_);
    std::swap(matchplayernum_, other->matchplayernum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResClubPipeiRoomStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResClubPipeiRoomStatus_descriptor_;
  metadata.reflection = ResClubPipeiRoomStatus_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResNotifyClubPipeiSuc::kClubIdFieldNumber;
const int ResNotifyClubPipeiSuc::kRoomIdFieldNumber;
const int ResNotifyClubPipeiSuc::kRoomTypeFieldNumber;
const int ResNotifyClubPipeiSuc::kTimesFieldNumber;
const int ResNotifyClubPipeiSuc::kParamStringFieldNumber;
const int ResNotifyClubPipeiSuc::kTimesTypeFieldNumber;
const int ResNotifyClubPipeiSuc::kHalfWayJoinFieldNumber;
const int ResNotifyClubPipeiSuc::kMaxPlayerNumFieldNumber;
const int ResNotifyClubPipeiSuc::kYazhuFieldNumber;
const int ResNotifyClubPipeiSuc::kGameIdFieldNumber;
const int ResNotifyClubPipeiSuc::kServerInfoFieldNumber;
#endif  // !_MSC_VER

ResNotifyClubPipeiSuc::ResNotifyClubPipeiSuc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResNotifyClubPipeiSuc::InitAsDefaultInstance() {
  serverinfo_ = const_cast< ::ProtoNet::ServerInfoIpsSafeDetail*>(&::ProtoNet::ServerInfoIpsSafeDetail::default_instance());
}

ResNotifyClubPipeiSuc::ResNotifyClubPipeiSuc(const ResNotifyClubPipeiSuc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResNotifyClubPipeiSuc::SharedCtor() {
  _cached_size_ = 0;
  clubid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  roomid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  roomtype_ = 0;
  times_ = 0;
  paramstring_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  timestype_ = 0;
  halfwayjoin_ = 0;
  maxplayernum_ = 0;
  yazhu_ = 0;
  gameid_ = 0;
  serverinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResNotifyClubPipeiSuc::~ResNotifyClubPipeiSuc() {
  SharedDtor();
}

void ResNotifyClubPipeiSuc::SharedDtor() {
  if (clubid_ != &::google::protobuf::internal::kEmptyString) {
    delete clubid_;
  }
  if (roomid_ != &::google::protobuf::internal::kEmptyString) {
    delete roomid_;
  }
  if (paramstring_ != &::google::protobuf::internal::kEmptyString) {
    delete paramstring_;
  }
  if (this != default_instance_) {
    delete serverinfo_;
  }
}

void ResNotifyClubPipeiSuc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResNotifyClubPipeiSuc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResNotifyClubPipeiSuc_descriptor_;
}

const ResNotifyClubPipeiSuc& ResNotifyClubPipeiSuc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgGate_2eproto();
  return *default_instance_;
}

ResNotifyClubPipeiSuc* ResNotifyClubPipeiSuc::default_instance_ = NULL;

ResNotifyClubPipeiSuc* ResNotifyClubPipeiSuc::New() const {
  return new ResNotifyClubPipeiSuc;
}

void ResNotifyClubPipeiSuc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_clubid()) {
      if (clubid_ != &::google::protobuf::internal::kEmptyString) {
        clubid_->clear();
      }
    }
    if (has_roomid()) {
      if (roomid_ != &::google::protobuf::internal::kEmptyString) {
        roomid_->clear();
      }
    }
    roomtype_ = 0;
    times_ = 0;
    if (has_paramstring()) {
      if (paramstring_ != &::google::protobuf::internal::kEmptyString) {
        paramstring_->clear();
      }
    }
    timestype_ = 0;
    halfwayjoin_ = 0;
    maxplayernum_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    yazhu_ = 0;
    gameid_ = 0;
    if (has_serverinfo()) {
      if (serverinfo_ != NULL) serverinfo_->::ProtoNet::ServerInfoIpsSafeDetail::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResNotifyClubPipeiSuc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string clubId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_clubid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->clubid().data(), this->clubid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_roomId;
        break;
      }

      // optional string roomId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_roomId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_roomid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->roomid().data(), this->roomid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_roomType;
        break;
      }

      // optional int32 roomType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roomType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomtype_)));
          set_has_roomtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_times;
        break;
      }

      // optional int32 times = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &times_)));
          set_has_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_paramString;
        break;
      }

      // optional string paramString = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_paramString:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_paramstring()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->paramstring().data(), this->paramstring().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_timesType;
        break;
      }

      // optional int32 timesType = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_timesType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &timestype_)));
          set_has_timestype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_halfWayJoin;
        break;
      }

      // optional int32 halfWayJoin = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_halfWayJoin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &halfwayjoin_)));
          set_has_halfwayjoin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_maxPlayerNum;
        break;
      }

      // optional int32 maxPlayerNum = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_maxPlayerNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxplayernum_)));
          set_has_maxplayernum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(73)) goto parse_yazhu;
        break;
      }

      // optional double yazhu = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_yazhu:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &yazhu_)));
          set_has_yazhu();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_gameId;
        break;
      }

      // optional int32 gameId = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gameId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_serverInfo;
        break;
      }

      // optional .ProtoNet.ServerInfoIpsSafeDetail serverInfo = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_serverInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_serverinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResNotifyClubPipeiSuc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string clubId = 1;
  if (has_clubid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->clubid().data(), this->clubid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->clubid(), output);
  }

  // optional string roomId = 2;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->roomid().data(), this->roomid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->roomid(), output);
  }

  // optional int32 roomType = 3;
  if (has_roomtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->roomtype(), output);
  }

  // optional int32 times = 4;
  if (has_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->times(), output);
  }

  // optional string paramString = 5;
  if (has_paramstring()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->paramstring().data(), this->paramstring().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->paramstring(), output);
  }

  // optional int32 timesType = 6;
  if (has_timestype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->timestype(), output);
  }

  // optional int32 halfWayJoin = 7;
  if (has_halfwayjoin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->halfwayjoin(), output);
  }

  // optional int32 maxPlayerNum = 8;
  if (has_maxplayernum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->maxplayernum(), output);
  }

  // optional double yazhu = 9;
  if (has_yazhu()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->yazhu(), output);
  }

  // optional int32 gameId = 10;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->gameid(), output);
  }

  // optional .ProtoNet.ServerInfoIpsSafeDetail serverInfo = 11;
  if (has_serverinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->serverinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResNotifyClubPipeiSuc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string clubId = 1;
  if (has_clubid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->clubid().data(), this->clubid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->clubid(), target);
  }

  // optional string roomId = 2;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->roomid().data(), this->roomid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->roomid(), target);
  }

  // optional int32 roomType = 3;
  if (has_roomtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->roomtype(), target);
  }

  // optional int32 times = 4;
  if (has_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->times(), target);
  }

  // optional string paramString = 5;
  if (has_paramstring()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->paramstring().data(), this->paramstring().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->paramstring(), target);
  }

  // optional int32 timesType = 6;
  if (has_timestype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->timestype(), target);
  }

  // optional int32 halfWayJoin = 7;
  if (has_halfwayjoin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->halfwayjoin(), target);
  }

  // optional int32 maxPlayerNum = 8;
  if (has_maxplayernum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->maxplayernum(), target);
  }

  // optional double yazhu = 9;
  if (has_yazhu()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->yazhu(), target);
  }

  // optional int32 gameId = 10;
  if (has_gameid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->gameid(), target);
  }

  // optional .ProtoNet.ServerInfoIpsSafeDetail serverInfo = 11;
  if (has_serverinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->serverinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResNotifyClubPipeiSuc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string clubId = 1;
    if (has_clubid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->clubid());
    }

    // optional string roomId = 2;
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->roomid());
    }

    // optional int32 roomType = 3;
    if (has_roomtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roomtype());
    }

    // optional int32 times = 4;
    if (has_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->times());
    }

    // optional string paramString = 5;
    if (has_paramstring()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->paramstring());
    }

    // optional int32 timesType = 6;
    if (has_timestype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->timestype());
    }

    // optional int32 halfWayJoin = 7;
    if (has_halfwayjoin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->halfwayjoin());
    }

    // optional int32 maxPlayerNum = 8;
    if (has_maxplayernum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxplayernum());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional double yazhu = 9;
    if (has_yazhu()) {
      total_size += 1 + 8;
    }

    // optional int32 gameId = 10;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gameid());
    }

    // optional .ProtoNet.ServerInfoIpsSafeDetail serverInfo = 11;
    if (has_serverinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->serverinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResNotifyClubPipeiSuc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResNotifyClubPipeiSuc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResNotifyClubPipeiSuc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResNotifyClubPipeiSuc::MergeFrom(const ResNotifyClubPipeiSuc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_clubid()) {
      set_clubid(from.clubid());
    }
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
    if (from.has_roomtype()) {
      set_roomtype(from.roomtype());
    }
    if (from.has_times()) {
      set_times(from.times());
    }
    if (from.has_paramstring()) {
      set_paramstring(from.paramstring());
    }
    if (from.has_timestype()) {
      set_timestype(from.timestype());
    }
    if (from.has_halfwayjoin()) {
      set_halfwayjoin(from.halfwayjoin());
    }
    if (from.has_maxplayernum()) {
      set_maxplayernum(from.maxplayernum());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_yazhu()) {
      set_yazhu(from.yazhu());
    }
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_serverinfo()) {
      mutable_serverinfo()->::ProtoNet::ServerInfoIpsSafeDetail::MergeFrom(from.serverinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResNotifyClubPipeiSuc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResNotifyClubPipeiSuc::CopyFrom(const ResNotifyClubPipeiSuc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResNotifyClubPipeiSuc::IsInitialized() const {

  return true;
}

void ResNotifyClubPipeiSuc::Swap(ResNotifyClubPipeiSuc* other) {
  if (other != this) {
    std::swap(clubid_, other->clubid_);
    std::swap(roomid_, other->roomid_);
    std::swap(roomtype_, other->roomtype_);
    std::swap(times_, other->times_);
    std::swap(paramstring_, other->paramstring_);
    std::swap(timestype_, other->timestype_);
    std::swap(halfwayjoin_, other->halfwayjoin_);
    std::swap(maxplayernum_, other->maxplayernum_);
    std::swap(yazhu_, other->yazhu_);
    std::swap(gameid_, other->gameid_);
    std::swap(serverinfo_, other->serverinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResNotifyClubPipeiSuc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResNotifyClubPipeiSuc_descriptor_;
  metadata.reflection = ResNotifyClubPipeiSuc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

ResNotifyRefreshClubGameRoomList::ResNotifyRefreshClubGameRoomList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResNotifyRefreshClubGameRoomList::InitAsDefaultInstance() {
}

ResNotifyRefreshClubGameRoomList::ResNotifyRefreshClubGameRoomList(const ResNotifyRefreshClubGameRoomList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResNotifyRefreshClubGameRoomList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResNotifyRefreshClubGameRoomList::~ResNotifyRefreshClubGameRoomList() {
  SharedDtor();
}

void ResNotifyRefreshClubGameRoomList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ResNotifyRefreshClubGameRoomList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResNotifyRefreshClubGameRoomList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResNotifyRefreshClubGameRoomList_descriptor_;
}

const ResNotifyRefreshClubGameRoomList& ResNotifyRefreshClubGameRoomList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgGate_2eproto();
  return *default_instance_;
}

ResNotifyRefreshClubGameRoomList* ResNotifyRefreshClubGameRoomList::default_instance_ = NULL;

ResNotifyRefreshClubGameRoomList* ResNotifyRefreshClubGameRoomList::New() const {
  return new ResNotifyRefreshClubGameRoomList;
}

void ResNotifyRefreshClubGameRoomList::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResNotifyRefreshClubGameRoomList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void ResNotifyRefreshClubGameRoomList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResNotifyRefreshClubGameRoomList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResNotifyRefreshClubGameRoomList::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResNotifyRefreshClubGameRoomList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResNotifyRefreshClubGameRoomList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResNotifyRefreshClubGameRoomList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResNotifyRefreshClubGameRoomList::MergeFrom(const ResNotifyRefreshClubGameRoomList& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResNotifyRefreshClubGameRoomList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResNotifyRefreshClubGameRoomList::CopyFrom(const ResNotifyRefreshClubGameRoomList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResNotifyRefreshClubGameRoomList::IsInitialized() const {

  return true;
}

void ResNotifyRefreshClubGameRoomList::Swap(ResNotifyRefreshClubGameRoomList* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResNotifyRefreshClubGameRoomList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResNotifyRefreshClubGameRoomList_descriptor_;
  metadata.reflection = ResNotifyRefreshClubGameRoomList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

ResNotifyRefreshClubRedBotNews::ResNotifyRefreshClubRedBotNews()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResNotifyRefreshClubRedBotNews::InitAsDefaultInstance() {
}

ResNotifyRefreshClubRedBotNews::ResNotifyRefreshClubRedBotNews(const ResNotifyRefreshClubRedBotNews& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResNotifyRefreshClubRedBotNews::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResNotifyRefreshClubRedBotNews::~ResNotifyRefreshClubRedBotNews() {
  SharedDtor();
}

void ResNotifyRefreshClubRedBotNews::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ResNotifyRefreshClubRedBotNews::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResNotifyRefreshClubRedBotNews::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResNotifyRefreshClubRedBotNews_descriptor_;
}

const ResNotifyRefreshClubRedBotNews& ResNotifyRefreshClubRedBotNews::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgGate_2eproto();
  return *default_instance_;
}

ResNotifyRefreshClubRedBotNews* ResNotifyRefreshClubRedBotNews::default_instance_ = NULL;

ResNotifyRefreshClubRedBotNews* ResNotifyRefreshClubRedBotNews::New() const {
  return new ResNotifyRefreshClubRedBotNews;
}

void ResNotifyRefreshClubRedBotNews::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResNotifyRefreshClubRedBotNews::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void ResNotifyRefreshClubRedBotNews::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResNotifyRefreshClubRedBotNews::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResNotifyRefreshClubRedBotNews::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResNotifyRefreshClubRedBotNews::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResNotifyRefreshClubRedBotNews* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResNotifyRefreshClubRedBotNews*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResNotifyRefreshClubRedBotNews::MergeFrom(const ResNotifyRefreshClubRedBotNews& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResNotifyRefreshClubRedBotNews::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResNotifyRefreshClubRedBotNews::CopyFrom(const ResNotifyRefreshClubRedBotNews& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResNotifyRefreshClubRedBotNews::IsInitialized() const {

  return true;
}

void ResNotifyRefreshClubRedBotNews::Swap(ResNotifyRefreshClubRedBotNews* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResNotifyRefreshClubRedBotNews::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResNotifyRefreshClubRedBotNews_descriptor_;
  metadata.reflection = ResNotifyRefreshClubRedBotNews_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResNotifyClubDismiss::kClubIdFieldNumber;
#endif  // !_MSC_VER

ResNotifyClubDismiss::ResNotifyClubDismiss()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResNotifyClubDismiss::InitAsDefaultInstance() {
}

ResNotifyClubDismiss::ResNotifyClubDismiss(const ResNotifyClubDismiss& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResNotifyClubDismiss::SharedCtor() {
  _cached_size_ = 0;
  clubid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResNotifyClubDismiss::~ResNotifyClubDismiss() {
  SharedDtor();
}

void ResNotifyClubDismiss::SharedDtor() {
  if (clubid_ != &::google::protobuf::internal::kEmptyString) {
    delete clubid_;
  }
  if (this != default_instance_) {
  }
}

void ResNotifyClubDismiss::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResNotifyClubDismiss::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResNotifyClubDismiss_descriptor_;
}

const ResNotifyClubDismiss& ResNotifyClubDismiss::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgGate_2eproto();
  return *default_instance_;
}

ResNotifyClubDismiss* ResNotifyClubDismiss::default_instance_ = NULL;

ResNotifyClubDismiss* ResNotifyClubDismiss::New() const {
  return new ResNotifyClubDismiss;
}

void ResNotifyClubDismiss::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_clubid()) {
      if (clubid_ != &::google::protobuf::internal::kEmptyString) {
        clubid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResNotifyClubDismiss::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string clubId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_clubid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->clubid().data(), this->clubid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResNotifyClubDismiss::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string clubId = 1;
  if (has_clubid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->clubid().data(), this->clubid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->clubid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResNotifyClubDismiss::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string clubId = 1;
  if (has_clubid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->clubid().data(), this->clubid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->clubid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResNotifyClubDismiss::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string clubId = 1;
    if (has_clubid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->clubid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResNotifyClubDismiss::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResNotifyClubDismiss* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResNotifyClubDismiss*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResNotifyClubDismiss::MergeFrom(const ResNotifyClubDismiss& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_clubid()) {
      set_clubid(from.clubid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResNotifyClubDismiss::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResNotifyClubDismiss::CopyFrom(const ResNotifyClubDismiss& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResNotifyClubDismiss::IsInitialized() const {

  return true;
}

void ResNotifyClubDismiss::Swap(ResNotifyClubDismiss* other) {
  if (other != this) {
    std::swap(clubid_, other->clubid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResNotifyClubDismiss::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResNotifyClubDismiss_descriptor_;
  metadata.reflection = ResNotifyClubDismiss_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResNotifyClubKickedOut::kClubIdFieldNumber;
#endif  // !_MSC_VER

ResNotifyClubKickedOut::ResNotifyClubKickedOut()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResNotifyClubKickedOut::InitAsDefaultInstance() {
}

ResNotifyClubKickedOut::ResNotifyClubKickedOut(const ResNotifyClubKickedOut& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResNotifyClubKickedOut::SharedCtor() {
  _cached_size_ = 0;
  clubid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResNotifyClubKickedOut::~ResNotifyClubKickedOut() {
  SharedDtor();
}

void ResNotifyClubKickedOut::SharedDtor() {
  if (clubid_ != &::google::protobuf::internal::kEmptyString) {
    delete clubid_;
  }
  if (this != default_instance_) {
  }
}

void ResNotifyClubKickedOut::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResNotifyClubKickedOut::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResNotifyClubKickedOut_descriptor_;
}

const ResNotifyClubKickedOut& ResNotifyClubKickedOut::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgGate_2eproto();
  return *default_instance_;
}

ResNotifyClubKickedOut* ResNotifyClubKickedOut::default_instance_ = NULL;

ResNotifyClubKickedOut* ResNotifyClubKickedOut::New() const {
  return new ResNotifyClubKickedOut;
}

void ResNotifyClubKickedOut::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_clubid()) {
      if (clubid_ != &::google::protobuf::internal::kEmptyString) {
        clubid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResNotifyClubKickedOut::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string clubId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_clubid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->clubid().data(), this->clubid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResNotifyClubKickedOut::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string clubId = 1;
  if (has_clubid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->clubid().data(), this->clubid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->clubid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResNotifyClubKickedOut::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string clubId = 1;
  if (has_clubid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->clubid().data(), this->clubid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->clubid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResNotifyClubKickedOut::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string clubId = 1;
    if (has_clubid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->clubid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResNotifyClubKickedOut::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResNotifyClubKickedOut* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResNotifyClubKickedOut*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResNotifyClubKickedOut::MergeFrom(const ResNotifyClubKickedOut& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_clubid()) {
      set_clubid(from.clubid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResNotifyClubKickedOut::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResNotifyClubKickedOut::CopyFrom(const ResNotifyClubKickedOut& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResNotifyClubKickedOut::IsInitialized() const {

  return true;
}

void ResNotifyClubKickedOut::Swap(ResNotifyClubKickedOut* other) {
  if (other != this) {
    std::swap(clubid_, other->clubid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResNotifyClubKickedOut::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResNotifyClubKickedOut_descriptor_;
  metadata.reflection = ResNotifyClubKickedOut_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResNotifyClubChangeGameType::kClubIdFieldNumber;
#endif  // !_MSC_VER

ResNotifyClubChangeGameType::ResNotifyClubChangeGameType()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResNotifyClubChangeGameType::InitAsDefaultInstance() {
}

ResNotifyClubChangeGameType::ResNotifyClubChangeGameType(const ResNotifyClubChangeGameType& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResNotifyClubChangeGameType::SharedCtor() {
  _cached_size_ = 0;
  clubid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResNotifyClubChangeGameType::~ResNotifyClubChangeGameType() {
  SharedDtor();
}

void ResNotifyClubChangeGameType::SharedDtor() {
  if (clubid_ != &::google::protobuf::internal::kEmptyString) {
    delete clubid_;
  }
  if (this != default_instance_) {
  }
}

void ResNotifyClubChangeGameType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResNotifyClubChangeGameType::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResNotifyClubChangeGameType_descriptor_;
}

const ResNotifyClubChangeGameType& ResNotifyClubChangeGameType::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgGate_2eproto();
  return *default_instance_;
}

ResNotifyClubChangeGameType* ResNotifyClubChangeGameType::default_instance_ = NULL;

ResNotifyClubChangeGameType* ResNotifyClubChangeGameType::New() const {
  return new ResNotifyClubChangeGameType;
}

void ResNotifyClubChangeGameType::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_clubid()) {
      if (clubid_ != &::google::protobuf::internal::kEmptyString) {
        clubid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResNotifyClubChangeGameType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string clubId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_clubid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->clubid().data(), this->clubid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResNotifyClubChangeGameType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string clubId = 1;
  if (has_clubid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->clubid().data(), this->clubid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->clubid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResNotifyClubChangeGameType::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string clubId = 1;
  if (has_clubid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->clubid().data(), this->clubid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->clubid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResNotifyClubChangeGameType::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string clubId = 1;
    if (has_clubid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->clubid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResNotifyClubChangeGameType::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResNotifyClubChangeGameType* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResNotifyClubChangeGameType*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResNotifyClubChangeGameType::MergeFrom(const ResNotifyClubChangeGameType& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_clubid()) {
      set_clubid(from.clubid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResNotifyClubChangeGameType::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResNotifyClubChangeGameType::CopyFrom(const ResNotifyClubChangeGameType& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResNotifyClubChangeGameType::IsInitialized() const {

  return true;
}

void ResNotifyClubChangeGameType::Swap(ResNotifyClubChangeGameType* other) {
  if (other != this) {
    std::swap(clubid_, other->clubid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResNotifyClubChangeGameType::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResNotifyClubChangeGameType_descriptor_;
  metadata.reflection = ResNotifyClubChangeGameType_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ProtoNet

// @@protoc_insertion_point(global_scope)
