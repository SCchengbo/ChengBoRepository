// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MsgCode.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "MsgCode.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ProtoNet {

namespace {

const ::google::protobuf::Descriptor* ResponseResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResponseResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerAccount_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerAccount_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResNotifyAlert_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResNotifyAlert_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResNotifyDissolutionConnect_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResNotifyDissolutionConnect_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResNotifyChatArrive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResNotifyChatArrive_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResChat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResChat_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqChat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqChat_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResNotifyBeKickOut_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResNotifyBeKickOut_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResExceptionCatch_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResExceptionCatch_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResConnectCreat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResConnectCreat_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqHeartBeat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqHeartBeat_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResHeartBeat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResHeartBeat_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* RoomType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* GameCode_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_MsgCode_2eproto() {
  protobuf_AddDesc_MsgCode_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "MsgCode.proto");
  GOOGLE_CHECK(file != NULL);
  ResponseResult_descriptor_ = file->message_type(0);
  static const int ResponseResult_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseResult, code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseResult, success_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseResult, msg_),
  };
  ResponseResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResponseResult_descriptor_,
      ResponseResult::default_instance_,
      ResponseResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResponseResult));
  PlayerAccount_descriptor_ = file->message_type(1);
  static const int PlayerAccount_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerAccount, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerAccount, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerAccount, bankcount_),
  };
  PlayerAccount_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerAccount_descriptor_,
      PlayerAccount::default_instance_,
      PlayerAccount_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerAccount, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerAccount, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerAccount));
  ResNotifyAlert_descriptor_ = file->message_type(2);
  static const int ResNotifyAlert_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResNotifyAlert, msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResNotifyAlert, extendstr_),
  };
  ResNotifyAlert_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResNotifyAlert_descriptor_,
      ResNotifyAlert::default_instance_,
      ResNotifyAlert_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResNotifyAlert, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResNotifyAlert, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResNotifyAlert));
  ResNotifyDissolutionConnect_descriptor_ = file->message_type(3);
  static const int ResNotifyDissolutionConnect_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResNotifyDissolutionConnect, gameid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResNotifyDissolutionConnect, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResNotifyDissolutionConnect, msg_),
  };
  ResNotifyDissolutionConnect_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResNotifyDissolutionConnect_descriptor_,
      ResNotifyDissolutionConnect::default_instance_,
      ResNotifyDissolutionConnect_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResNotifyDissolutionConnect, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResNotifyDissolutionConnect, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResNotifyDissolutionConnect));
  ResNotifyChatArrive_descriptor_ = file->message_type(4);
  static const int ResNotifyChatArrive_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResNotifyChatArrive, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResNotifyChatArrive, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResNotifyChatArrive, msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResNotifyChatArrive, chanel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResNotifyChatArrive, msgcreatetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResNotifyChatArrive, fromuniqueid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResNotifyChatArrive, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResNotifyChatArrive, fromcontrollernick_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResNotifyChatArrive, fromcontrollerheadurl_),
  };
  ResNotifyChatArrive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResNotifyChatArrive_descriptor_,
      ResNotifyChatArrive::default_instance_,
      ResNotifyChatArrive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResNotifyChatArrive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResNotifyChatArrive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResNotifyChatArrive));
  ResChat_descriptor_ = file->message_type(5);
  static const int ResChat_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResChat, result_),
  };
  ResChat_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResChat_descriptor_,
      ResChat::default_instance_,
      ResChat_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResChat, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResChat, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResChat));
  ReqChat_descriptor_ = file->message_type(6);
  static const int ReqChat_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqChat, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqChat, msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqChat, chanel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqChat, touniqueid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqChat, clubid_),
  };
  ReqChat_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqChat_descriptor_,
      ReqChat::default_instance_,
      ReqChat_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqChat, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqChat, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqChat));
  ResNotifyBeKickOut_descriptor_ = file->message_type(7);
  static const int ResNotifyBeKickOut_offsets_[1] = {
  };
  ResNotifyBeKickOut_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResNotifyBeKickOut_descriptor_,
      ResNotifyBeKickOut::default_instance_,
      ResNotifyBeKickOut_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResNotifyBeKickOut, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResNotifyBeKickOut, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResNotifyBeKickOut));
  ResExceptionCatch_descriptor_ = file->message_type(8);
  static const int ResExceptionCatch_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResExceptionCatch, msg_),
  };
  ResExceptionCatch_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResExceptionCatch_descriptor_,
      ResExceptionCatch::default_instance_,
      ResExceptionCatch_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResExceptionCatch, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResExceptionCatch, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResExceptionCatch));
  ResConnectCreat_descriptor_ = file->message_type(9);
  static const int ResConnectCreat_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResConnectCreat, now_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResConnectCreat, heartbearttime_),
  };
  ResConnectCreat_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResConnectCreat_descriptor_,
      ResConnectCreat::default_instance_,
      ResConnectCreat_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResConnectCreat, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResConnectCreat, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResConnectCreat));
  ReqHeartBeat_descriptor_ = file->message_type(10);
  static const int ReqHeartBeat_offsets_[1] = {
  };
  ReqHeartBeat_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqHeartBeat_descriptor_,
      ReqHeartBeat::default_instance_,
      ReqHeartBeat_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqHeartBeat, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqHeartBeat, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqHeartBeat));
  ResHeartBeat_descriptor_ = file->message_type(11);
  static const int ResHeartBeat_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResHeartBeat, time_),
  };
  ResHeartBeat_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResHeartBeat_descriptor_,
      ResHeartBeat::default_instance_,
      ResHeartBeat_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResHeartBeat, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResHeartBeat, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResHeartBeat));
  RoomType_descriptor_ = file->enum_type(0);
  GameCode_descriptor_ = file->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_MsgCode_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResponseResult_descriptor_, &ResponseResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerAccount_descriptor_, &PlayerAccount::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResNotifyAlert_descriptor_, &ResNotifyAlert::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResNotifyDissolutionConnect_descriptor_, &ResNotifyDissolutionConnect::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResNotifyChatArrive_descriptor_, &ResNotifyChatArrive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResChat_descriptor_, &ResChat::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqChat_descriptor_, &ReqChat::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResNotifyBeKickOut_descriptor_, &ResNotifyBeKickOut::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResExceptionCatch_descriptor_, &ResExceptionCatch::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResConnectCreat_descriptor_, &ResConnectCreat::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqHeartBeat_descriptor_, &ReqHeartBeat::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResHeartBeat_descriptor_, &ResHeartBeat::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_MsgCode_2eproto() {
  delete ResponseResult::default_instance_;
  delete ResponseResult_reflection_;
  delete PlayerAccount::default_instance_;
  delete PlayerAccount_reflection_;
  delete ResNotifyAlert::default_instance_;
  delete ResNotifyAlert_reflection_;
  delete ResNotifyDissolutionConnect::default_instance_;
  delete ResNotifyDissolutionConnect_reflection_;
  delete ResNotifyChatArrive::default_instance_;
  delete ResNotifyChatArrive_reflection_;
  delete ResChat::default_instance_;
  delete ResChat_reflection_;
  delete ReqChat::default_instance_;
  delete ReqChat_reflection_;
  delete ResNotifyBeKickOut::default_instance_;
  delete ResNotifyBeKickOut_reflection_;
  delete ResExceptionCatch::default_instance_;
  delete ResExceptionCatch_reflection_;
  delete ResConnectCreat::default_instance_;
  delete ResConnectCreat_reflection_;
  delete ReqHeartBeat::default_instance_;
  delete ReqHeartBeat_reflection_;
  delete ResHeartBeat::default_instance_;
  delete ResHeartBeat_reflection_;
}

void protobuf_AddDesc_MsgCode_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rMsgCode.proto\022\010ProtoNet\"<\n\016ResponseRes"
    "ult\022\014\n\004code\030\001 \002(\005\022\017\n\007success\030\002 \002(\010\022\013\n\003ms"
    "g\030\003 \001(\t\"\?\n\rPlayerAccount\022\014\n\004type\030\001 \001(\005\022\r"
    "\n\005count\030\002 \001(\001\022\021\n\tbankcount\030\003 \001(\001\"0\n\016ResN"
    "otifyAlert\022\013\n\003msg\030\001 \002(\t\022\021\n\textendStr\030\002 \002"
    "(\t\"H\n\033ResNotifyDissolutionConnect\022\016\n\006gam"
    "eId\030\001 \001(\005\022\014\n\004type\030\002 \002(\005\022\013\n\003msg\030\003 \001(\t\"\307\001\n"
    "\023ResNotifyChatArrive\022\r\n\005msgId\030\001 \002(\t\022\017\n\007m"
    "sgType\030\002 \002(\005\022\013\n\003msg\030\003 \002(\t\022\016\n\006chanel\030\004 \002("
    "\005\022\025\n\rmsgCreateTime\030\005 \002(\003\022\024\n\014fromUniqueId"
    "\030\006 \002(\t\022\013\n\003pos\030\007 \001(\005\022\032\n\022fromControllerNic"
    "k\030\010 \001(\t\022\035\n\025fromControllerHeadurl\030\t \001(\t\"3"
    "\n\007ResChat\022(\n\006result\030\001 \002(\0132\030.ProtoNet.Res"
    "ponseResult\"[\n\007ReqChat\022\017\n\007msgType\030\001 \002(\005\022"
    "\013\n\003msg\030\002 \002(\t\022\016\n\006chanel\030\003 \002(\005\022\022\n\ntoUnique"
    "Id\030\004 \001(\t\022\016\n\006clubId\030\005 \001(\t\"\024\n\022ResNotifyBeK"
    "ickOut\" \n\021ResExceptionCatch\022\013\n\003msg\030\001 \002(\t"
    "\"6\n\017ResConnectCreat\022\013\n\003now\030\001 \002(\003\022\026\n\016hear"
    "tbeartTime\030\002 \002(\003\"\016\n\014ReqHeartBeat\"\034\n\014ResH"
    "eartBeat\022\014\n\004time\030\001 \002(\003*N\n\010RoomType\022\r\n\tGO"
    "LD_ROOM\020\001\022\r\n\tCARD_ROOM\020\002\022\016\n\nMATCH_ROOM\020\003"
    "\022\024\n\020SHANGZHUANG_ROOM\020\004*\276\033\n\010GameCode\022\030\n\022R"
    "EQ_GET_MATCH_LIST\020\337\334*\022\030\n\022RES_GET_MATCH_L"
    "IST\020\336\334*\022\026\n\020REQ_SIGNUP_MATCH\020\335\334*\022\026\n\020RES_S"
    "IGNUP_MATCH\020\334\334*\022\034\n\026RES_NOTIFY_ENTER_MATC"
    "H\020\333\334*\022\032\n\024REQ_CANLE_SIGN_MATCH\020\332\334*\022\032\n\024RES"
    "_CANLE_SIGN_MATCH\020\331\334*\022*\n$RES_NOTIFY_MATC"
    "HROOM_WAITTING_CHANGE\020\330\334*\022\033\n\025RES_NOTIFY_"
    "TIMES_OVER\020\327\334*\022\030\n\022REQ_CONTINUE_MATCH\020\326\334*"
    "\022\030\n\022RES_CONTINUE_MATCH\020\325\334*\022\024\n\016REQ_GATE_L"
    "OGIN\020\237\3676\022\024\n\016RES_GATE_LOGIN\020\236\3676\022\031\n\023REQ_GE"
    "T_ACCOUNTINFO\020\235\3676\022\031\n\023RES_GET_ACCOUNTINFO"
    "\020\234\3676\022\037\n\031REQ_GET_GAMEZONEINFO_LIST\020\233\3676\022\037\n"
    "\031RES_GET_GAMEZONEINFO_LIST\020\232\3676\022\035\n\027REQ_GE"
    "T_GAMEZONE_DETAIL\020\231\3676\022\035\n\027RES_GET_GAMEZON"
    "E_DETAIL\020\230\3676\022\035\n\027REQ_JOIN_LOGIC_GAMEROOM\020"
    "\227\3676\022\035\n\027RES_JOIN_LOGIC_GAMEROOM\020\226\3676\022\035\n\027RE"
    "Q_QUICK_JOIN_GAMEROOM\020\225\3676\022\035\n\027RES_QUICK_J"
    "OIN_GAMEROOM\020\224\3676\022#\n\035RES_NOTIFY_BROAD_PLA"
    "T_MARQUEE\020\223\3676\022!\n\033RES_NOTIFY_SELF_DATA_CH"
    "ANGE\020\222\3676\022\034\n\026REQ_GET_ROOMBRIFE_LIST\020\221\3676\022\034"
    "\n\026RES_GET_ROOMBRIFE_LIST\020\220\3676\022\030\n\022REQ_CHEC"
    "K_IN_MATCH\020\217\3676\022\030\n\022RES_CHECK_IN_MATCH\020\216\3676"
    "\022\033\n\025REQ_OPEN_ROOM_REPLACE\020\215\3676\022\033\n\025RES_OPE"
    "N_ROOM_REPLACE\020\214\3676\022\'\n!REQ_OPEN_ROOM_REPL"
    "ACE_RECORD_LIST\020\213\3676\022\'\n!RES_OPEN_ROOM_REP"
    "LACE_RECORD_LIST\020\212\3676\022\'\n!REQ_DISSOLUTION_"
    "OPEN_ROOM_REPLACE\020\211\3676\022\'\n!RES_DISSOLUTION"
    "_OPEN_ROOM_REPLACE\020\210\3676\022\030\n\022REQ_GAME_ROOM_"
    "LIST\020\207\3676\022\030\n\022RES_GAME_ROOM_LIST\020\206\3676\022\035\n\027RE"
    "Q_CLUB_GAME_ROOM_LIST\020\205\3676\022\035\n\027RES_CLUB_GA"
    "ME_ROOM_LIST\020\204\3676\022\031\n\023REQ_CLUB_PIPEI_ROOM\020"
    "\203\3676\022\031\n\023RES_CLUB_PIPEI_ROOM\020\202\3676\022\036\n\030REQ_EX"
    "IT_CLUB_PIPEI_ROOM\020\201\3676\022\036\n\030RES_EXIT_CLUB_"
    "PIPEI_ROOM\020\200\3676\022 \n\032REQ_CLUB_PIPEI_ROOM_ST"
    "ATUS\020\377\3666\022 \n\032RES_CLUB_PIPEI_ROOM_STATUS\020\376"
    "\3666\022\037\n\031RES_NOTIFY_CLUB_PIPEI_SUC\020\375\3666\022,\n&R"
    "ES_NOTIFY_REFRESH_CLUB_GAME_ROOM_LIST\020\374\366"
    "6\022*\n$RES_NOTIFY_REFRESH_CLUB_RED_BOT_NEW"
    "S\020\373\3666\022\035\n\027RES_NOTIFY_CLUB_DISMISS\020\372\3666\022 \n\032"
    "RES_NOTIFY_CLUB_KICKED_OUT\020\371\3666\022&\n RES_NO"
    "TIFY_CLUB_CHANGE_GAME_TYPE\020\370\3666\022\025\n\017REQ_LO"
    "GIC_LOGIN\020\377\3510\022\025\n\017RES_LOGIC_LOGIN\020\376\3510\022\031\n\023"
    "REQ_CREATE_GAMEROOM\020\375\3510\022\031\n\023RES_CREATE_GA"
    "MEROOM\020\374\3510\022 \n\032RES_NOTIFY_GAMEROOM_CREATE"
    "\020\373\3510\022\027\n\021REQ_JOIN_GAMEROOM\020\372\3510\022\027\n\021RES_JOI"
    "N_GAMEROOM\020\371\3510\022&\n RES_NOTIFY_SOMEONE_JOI"
    "N_GAMEROOM\020\370\3510\022\027\n\021REQ_EXIT_GAMEROOM\020\367\3510\022"
    "\027\n\021RES_EXIT_GAMEROOM\020\366\3510\022&\n RES_NOTIFY_S"
    "OMEONE_EXIT_GAMEROOM\020\365\3510\022\024\n\016REQ_GAME_REA"
    "DY\020\364\3510\022\024\n\016RES_GAME_READY\020\363\3510\022\036\n\030REQ_DISS"
    "OLUTION_GAMEROOM\020\357\3510\022\036\n\030RES_DISSOLUTION_"
    "GAMEROOM\020\356\3510\0221\n+RES_NOTIFY_SOMEONE_REQ_D"
    "ISSOLUTION_GAMEROOM\020\355\3510\022$\n\036REQ_AGREE_DIS"
    "SOLUTION_GAMEROOM\020\354\3510\022$\n\036RES_AGREE_DISSO"
    "LUTION_GAMEROOM\020\353\3510\0223\n-RES_NOTIFY_SOMEON"
    "E_AGREE_DISSOLUTION_GAMEROOM\020\352\3510\022%\n\037RES_"
    "NOTIFY_GAMEROOM_DISSOLUTION\020\351\3510\022\031\n\023RES_N"
    "OTIFY_GAMEOVER\020\350\3510\022\027\n\021REQ_GET_ROOM_INFO\020"
    "\347\3510\022\027\n\021RES_GET_ROOM_INFO\020\346\3510\022#\n\035RES_NOTI"
    "FY_SOMEONE_GAME_READY\020\345\3510\022\036\n\030REQ_CHANGE_"
    "ONLINE_STATUS\020\344\3510\022\036\n\030RES_CHANGE_ONLINE_S"
    "TATUS\020\343\3510\022-\n\'RES_NOTIFY_SOMEONE_CHANGE_O"
    "NLINE_STATUS\020\342\3510\022$\n\036RES_NOTIFY_BIG_CALCU"
    "LATE_PANEL\020\341\3510\022\027\n\021REQ_CORRECT_TIMER\020\336\3510\022"
    "\027\n\021RES_CORRECT_TIMER\020\335\3510\022\033\n\025REQ_QUICK_CH"
    "ANGE_ROOM\020\334\3510\022\033\n\025RES_QUICK_CHANGE_ROOM\020\333"
    "\3510\022%\n\037RES_NOTIFY_SOMEONE_CHANGE_ROBOT\020\332\351"
    "0\022\"\n\034RES_NOTIFY_CHANGE_TO_OLDROOM\020\331\3510\022\022\n"
    "\014REQ_SIT_DOWN\020\330\3510\022\022\n\014RES_SIT_DOWN\020\327\3510\022!\n"
    "\033RES_NOTIFY_SOMEONE_SIT_DOWN\020\326\3510\022\022\n\014REQ_"
    "STAND_UP\020\325\3510\022\022\n\014RES_STAND_UP\020\324\3510\022!\n\033RES_"
    "NOTIFY_SOMEONE_STAND_UP\020\323\3510\022%\n\037RES_NOTIF"
    "Y_SOMEONE_ENTER_CHARGE\020\322\3510\022 \n\032RES_NOTIFY"
    "_ACCOUNTS_CHANGE\020\321\3510\022\034\n\026RES_NOTIFY_CHARG"
    "E_OVER\020\320\3510\022\026\n\020REQ_WATCHER_LIST\020\317\3510\022\026\n\020RE"
    "S_WATCHER_LIST\020\316\3510\022\023\n\rREQ_ONCE_MORE\020\314\3510\022"
    "\023\n\rRES_ONCE_MORE\020\315\3510\022\033\n\025RES_ONOTIFY_ONCE"
    "_MORE\020\313\3510\022\033\n\025REQ_LOGIC_SERVER_TIME\020\312\3510\022\033"
    "\n\025RES_LOGIC_SERVER_TIME\020\311\3510\022\023\n\rREQ_SEAT_"
    "DOWN\020\267\3500\022\023\n\rRES_SEAT_DOWN\020\266\3500\022\023\n\rREQ_BE_"
    "WATHER\020\265\3500\022\023\n\rRES_BE_WATHER\020\264\3500\022\033\n\025RES_N"
    "OTIFY_ADD_WATHER\020\263\3500\022\036\n\030RES_NOTIFY_REMOV"
    "E_WATHER\020\262\3500\022$\n\036RES_NOTIFY_DISSOLUTION_C"
    "ONNECT\020\266\204=\022\034\n\026RES_NOTIFY_CHAT_ARRIVE\020\267\204="
    "\022\016\n\010RES_CHAT\020\270\204=\022\016\n\010REQ_CHAT\020\271\204=\022\034\n\026RES_"
    "NOTIFY_BE_KICK_OUT\020\272\204=\022\031\n\023RES_EXCEPTION_"
    "CATCH\020\273\204=\022\024\n\016RES_HEART_BEAT\020\274\204=\022\024\n\016REQ_H"
    "EART_BEAT\020\275\204=\022\030\n\022RES_CONNECT_CREATE\020\276\204=\022"
    "\026\n\020RES_NOTIFY_ALERT\020\277\204=B\031\n\027com.version.p"
    "rotobuf.pb", 4410);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "MsgCode.proto", &protobuf_RegisterTypes);
  ResponseResult::default_instance_ = new ResponseResult();
  PlayerAccount::default_instance_ = new PlayerAccount();
  ResNotifyAlert::default_instance_ = new ResNotifyAlert();
  ResNotifyDissolutionConnect::default_instance_ = new ResNotifyDissolutionConnect();
  ResNotifyChatArrive::default_instance_ = new ResNotifyChatArrive();
  ResChat::default_instance_ = new ResChat();
  ReqChat::default_instance_ = new ReqChat();
  ResNotifyBeKickOut::default_instance_ = new ResNotifyBeKickOut();
  ResExceptionCatch::default_instance_ = new ResExceptionCatch();
  ResConnectCreat::default_instance_ = new ResConnectCreat();
  ReqHeartBeat::default_instance_ = new ReqHeartBeat();
  ResHeartBeat::default_instance_ = new ResHeartBeat();
  ResponseResult::default_instance_->InitAsDefaultInstance();
  PlayerAccount::default_instance_->InitAsDefaultInstance();
  ResNotifyAlert::default_instance_->InitAsDefaultInstance();
  ResNotifyDissolutionConnect::default_instance_->InitAsDefaultInstance();
  ResNotifyChatArrive::default_instance_->InitAsDefaultInstance();
  ResChat::default_instance_->InitAsDefaultInstance();
  ReqChat::default_instance_->InitAsDefaultInstance();
  ResNotifyBeKickOut::default_instance_->InitAsDefaultInstance();
  ResExceptionCatch::default_instance_->InitAsDefaultInstance();
  ResConnectCreat::default_instance_->InitAsDefaultInstance();
  ReqHeartBeat::default_instance_->InitAsDefaultInstance();
  ResHeartBeat::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_MsgCode_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_MsgCode_2eproto {
  StaticDescriptorInitializer_MsgCode_2eproto() {
    protobuf_AddDesc_MsgCode_2eproto();
  }
} static_descriptor_initializer_MsgCode_2eproto_;
const ::google::protobuf::EnumDescriptor* RoomType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoomType_descriptor_;
}
bool RoomType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* GameCode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameCode_descriptor_;
}
bool GameCode_IsValid(int value) {
  switch(value) {
    case 699989:
    case 699990:
    case 699991:
    case 699992:
    case 699993:
    case 699994:
    case 699995:
    case 699996:
    case 699997:
    case 699998:
    case 699999:
    case 799794:
    case 799795:
    case 799796:
    case 799797:
    case 799798:
    case 799799:
    case 799945:
    case 799946:
    case 799947:
    case 799948:
    case 799949:
    case 799950:
    case 799951:
    case 799952:
    case 799953:
    case 799954:
    case 799955:
    case 799956:
    case 799957:
    case 799958:
    case 799959:
    case 799960:
    case 799961:
    case 799962:
    case 799963:
    case 799964:
    case 799965:
    case 799966:
    case 799969:
    case 799970:
    case 799971:
    case 799972:
    case 799973:
    case 799974:
    case 799975:
    case 799976:
    case 799977:
    case 799978:
    case 799979:
    case 799980:
    case 799981:
    case 799982:
    case 799983:
    case 799987:
    case 799988:
    case 799989:
    case 799990:
    case 799991:
    case 799992:
    case 799993:
    case 799994:
    case 799995:
    case 799996:
    case 799997:
    case 799998:
    case 799999:
    case 899960:
    case 899961:
    case 899962:
    case 899963:
    case 899964:
    case 899965:
    case 899966:
    case 899967:
    case 899968:
    case 899969:
    case 899970:
    case 899971:
    case 899972:
    case 899973:
    case 899974:
    case 899975:
    case 899976:
    case 899977:
    case 899978:
    case 899979:
    case 899980:
    case 899981:
    case 899982:
    case 899983:
    case 899984:
    case 899985:
    case 899986:
    case 899987:
    case 899988:
    case 899989:
    case 899990:
    case 899991:
    case 899992:
    case 899993:
    case 899994:
    case 899995:
    case 899996:
    case 899997:
    case 899998:
    case 899999:
    case 999990:
    case 999991:
    case 999992:
    case 999993:
    case 999994:
    case 999995:
    case 999996:
    case 999997:
    case 999998:
    case 999999:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int ResponseResult::kCodeFieldNumber;
const int ResponseResult::kSuccessFieldNumber;
const int ResponseResult::kMsgFieldNumber;
#endif  // !_MSC_VER

ResponseResult::ResponseResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResponseResult::InitAsDefaultInstance() {
}

ResponseResult::ResponseResult(const ResponseResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResponseResult::SharedCtor() {
  _cached_size_ = 0;
  code_ = 0;
  success_ = false;
  msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResponseResult::~ResponseResult() {
  SharedDtor();
}

void ResponseResult::SharedDtor() {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_;
  }
  if (this != default_instance_) {
  }
}

void ResponseResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResponseResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResponseResult_descriptor_;
}

const ResponseResult& ResponseResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgCode_2eproto();
  return *default_instance_;
}

ResponseResult* ResponseResult::default_instance_ = NULL;

ResponseResult* ResponseResult::New() const {
  return new ResponseResult;
}

void ResponseResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    code_ = 0;
    success_ = false;
    if (has_msg()) {
      if (msg_ != &::google::protobuf::internal::kEmptyString) {
        msg_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResponseResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &code_)));
          set_has_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_success;
        break;
      }

      // required bool success = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_success:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &success_)));
          set_has_success();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_msg;
        break;
      }

      // optional string msg = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msg().data(), this->msg().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResponseResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 code = 1;
  if (has_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->code(), output);
  }

  // required bool success = 2;
  if (has_success()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->success(), output);
  }

  // optional string msg = 3;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->msg(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResponseResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 code = 1;
  if (has_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->code(), target);
  }

  // required bool success = 2;
  if (has_success()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->success(), target);
  }

  // optional string msg = 3;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->msg(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResponseResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 code = 1;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->code());
    }

    // required bool success = 2;
    if (has_success()) {
      total_size += 1 + 1;
    }

    // optional string msg = 3;
    if (has_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msg());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResponseResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResponseResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResponseResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResponseResult::MergeFrom(const ResponseResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_code()) {
      set_code(from.code());
    }
    if (from.has_success()) {
      set_success(from.success());
    }
    if (from.has_msg()) {
      set_msg(from.msg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResponseResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseResult::CopyFrom(const ResponseResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ResponseResult::Swap(ResponseResult* other) {
  if (other != this) {
    std::swap(code_, other->code_);
    std::swap(success_, other->success_);
    std::swap(msg_, other->msg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResponseResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResponseResult_descriptor_;
  metadata.reflection = ResponseResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerAccount::kTypeFieldNumber;
const int PlayerAccount::kCountFieldNumber;
const int PlayerAccount::kBankcountFieldNumber;
#endif  // !_MSC_VER

PlayerAccount::PlayerAccount()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerAccount::InitAsDefaultInstance() {
}

PlayerAccount::PlayerAccount(const PlayerAccount& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerAccount::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  count_ = 0;
  bankcount_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerAccount::~PlayerAccount() {
  SharedDtor();
}

void PlayerAccount::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PlayerAccount::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerAccount::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerAccount_descriptor_;
}

const PlayerAccount& PlayerAccount::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgCode_2eproto();
  return *default_instance_;
}

PlayerAccount* PlayerAccount::default_instance_ = NULL;

PlayerAccount* PlayerAccount::New() const {
  return new PlayerAccount;
}

void PlayerAccount::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    count_ = 0;
    bankcount_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerAccount::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_count;
        break;
      }

      // optional double count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_bankcount;
        break;
      }

      // optional double bankcount = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_bankcount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &bankcount_)));
          set_has_bankcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlayerAccount::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // optional double count = 2;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->count(), output);
  }

  // optional double bankcount = 3;
  if (has_bankcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->bankcount(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerAccount::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // optional double count = 2;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->count(), target);
  }

  // optional double bankcount = 3;
  if (has_bankcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->bankcount(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerAccount::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional double count = 2;
    if (has_count()) {
      total_size += 1 + 8;
    }

    // optional double bankcount = 3;
    if (has_bankcount()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerAccount::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerAccount* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerAccount*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerAccount::MergeFrom(const PlayerAccount& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_bankcount()) {
      set_bankcount(from.bankcount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerAccount::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerAccount::CopyFrom(const PlayerAccount& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerAccount::IsInitialized() const {

  return true;
}

void PlayerAccount::Swap(PlayerAccount* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(count_, other->count_);
    std::swap(bankcount_, other->bankcount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayerAccount::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerAccount_descriptor_;
  metadata.reflection = PlayerAccount_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResNotifyAlert::kMsgFieldNumber;
const int ResNotifyAlert::kExtendStrFieldNumber;
#endif  // !_MSC_VER

ResNotifyAlert::ResNotifyAlert()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResNotifyAlert::InitAsDefaultInstance() {
}

ResNotifyAlert::ResNotifyAlert(const ResNotifyAlert& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResNotifyAlert::SharedCtor() {
  _cached_size_ = 0;
  msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  extendstr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResNotifyAlert::~ResNotifyAlert() {
  SharedDtor();
}

void ResNotifyAlert::SharedDtor() {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_;
  }
  if (extendstr_ != &::google::protobuf::internal::kEmptyString) {
    delete extendstr_;
  }
  if (this != default_instance_) {
  }
}

void ResNotifyAlert::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResNotifyAlert::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResNotifyAlert_descriptor_;
}

const ResNotifyAlert& ResNotifyAlert::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgCode_2eproto();
  return *default_instance_;
}

ResNotifyAlert* ResNotifyAlert::default_instance_ = NULL;

ResNotifyAlert* ResNotifyAlert::New() const {
  return new ResNotifyAlert;
}

void ResNotifyAlert::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msg()) {
      if (msg_ != &::google::protobuf::internal::kEmptyString) {
        msg_->clear();
      }
    }
    if (has_extendstr()) {
      if (extendstr_ != &::google::protobuf::internal::kEmptyString) {
        extendstr_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResNotifyAlert::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string msg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msg().data(), this->msg().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_extendStr;
        break;
      }

      // required string extendStr = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_extendStr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_extendstr()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->extendstr().data(), this->extendstr().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResNotifyAlert::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string msg = 1;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msg(), output);
  }

  // required string extendStr = 2;
  if (has_extendstr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->extendstr().data(), this->extendstr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->extendstr(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResNotifyAlert::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string msg = 1;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msg(), target);
  }

  // required string extendStr = 2;
  if (has_extendstr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->extendstr().data(), this->extendstr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->extendstr(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResNotifyAlert::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string msg = 1;
    if (has_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msg());
    }

    // required string extendStr = 2;
    if (has_extendstr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->extendstr());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResNotifyAlert::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResNotifyAlert* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResNotifyAlert*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResNotifyAlert::MergeFrom(const ResNotifyAlert& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msg()) {
      set_msg(from.msg());
    }
    if (from.has_extendstr()) {
      set_extendstr(from.extendstr());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResNotifyAlert::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResNotifyAlert::CopyFrom(const ResNotifyAlert& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResNotifyAlert::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ResNotifyAlert::Swap(ResNotifyAlert* other) {
  if (other != this) {
    std::swap(msg_, other->msg_);
    std::swap(extendstr_, other->extendstr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResNotifyAlert::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResNotifyAlert_descriptor_;
  metadata.reflection = ResNotifyAlert_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResNotifyDissolutionConnect::kGameIdFieldNumber;
const int ResNotifyDissolutionConnect::kTypeFieldNumber;
const int ResNotifyDissolutionConnect::kMsgFieldNumber;
#endif  // !_MSC_VER

ResNotifyDissolutionConnect::ResNotifyDissolutionConnect()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResNotifyDissolutionConnect::InitAsDefaultInstance() {
}

ResNotifyDissolutionConnect::ResNotifyDissolutionConnect(const ResNotifyDissolutionConnect& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResNotifyDissolutionConnect::SharedCtor() {
  _cached_size_ = 0;
  gameid_ = 0;
  type_ = 0;
  msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResNotifyDissolutionConnect::~ResNotifyDissolutionConnect() {
  SharedDtor();
}

void ResNotifyDissolutionConnect::SharedDtor() {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_;
  }
  if (this != default_instance_) {
  }
}

void ResNotifyDissolutionConnect::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResNotifyDissolutionConnect::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResNotifyDissolutionConnect_descriptor_;
}

const ResNotifyDissolutionConnect& ResNotifyDissolutionConnect::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgCode_2eproto();
  return *default_instance_;
}

ResNotifyDissolutionConnect* ResNotifyDissolutionConnect::default_instance_ = NULL;

ResNotifyDissolutionConnect* ResNotifyDissolutionConnect::New() const {
  return new ResNotifyDissolutionConnect;
}

void ResNotifyDissolutionConnect::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gameid_ = 0;
    type_ = 0;
    if (has_msg()) {
      if (msg_ != &::google::protobuf::internal::kEmptyString) {
        msg_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResNotifyDissolutionConnect::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 gameId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // required int32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_msg;
        break;
      }

      // optional string msg = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msg().data(), this->msg().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResNotifyDissolutionConnect::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 gameId = 1;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->gameid(), output);
  }

  // required int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  // optional string msg = 3;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->msg(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResNotifyDissolutionConnect::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 gameId = 1;
  if (has_gameid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->gameid(), target);
  }

  // required int32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  // optional string msg = 3;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->msg(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResNotifyDissolutionConnect::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 gameId = 1;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gameid());
    }

    // required int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional string msg = 3;
    if (has_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msg());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResNotifyDissolutionConnect::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResNotifyDissolutionConnect* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResNotifyDissolutionConnect*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResNotifyDissolutionConnect::MergeFrom(const ResNotifyDissolutionConnect& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_msg()) {
      set_msg(from.msg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResNotifyDissolutionConnect::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResNotifyDissolutionConnect::CopyFrom(const ResNotifyDissolutionConnect& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResNotifyDissolutionConnect::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  return true;
}

void ResNotifyDissolutionConnect::Swap(ResNotifyDissolutionConnect* other) {
  if (other != this) {
    std::swap(gameid_, other->gameid_);
    std::swap(type_, other->type_);
    std::swap(msg_, other->msg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResNotifyDissolutionConnect::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResNotifyDissolutionConnect_descriptor_;
  metadata.reflection = ResNotifyDissolutionConnect_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResNotifyChatArrive::kMsgIdFieldNumber;
const int ResNotifyChatArrive::kMsgTypeFieldNumber;
const int ResNotifyChatArrive::kMsgFieldNumber;
const int ResNotifyChatArrive::kChanelFieldNumber;
const int ResNotifyChatArrive::kMsgCreateTimeFieldNumber;
const int ResNotifyChatArrive::kFromUniqueIdFieldNumber;
const int ResNotifyChatArrive::kPosFieldNumber;
const int ResNotifyChatArrive::kFromControllerNickFieldNumber;
const int ResNotifyChatArrive::kFromControllerHeadurlFieldNumber;
#endif  // !_MSC_VER

ResNotifyChatArrive::ResNotifyChatArrive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResNotifyChatArrive::InitAsDefaultInstance() {
}

ResNotifyChatArrive::ResNotifyChatArrive(const ResNotifyChatArrive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResNotifyChatArrive::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  msgtype_ = 0;
  msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  chanel_ = 0;
  msgcreatetime_ = GOOGLE_LONGLONG(0);
  fromuniqueid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  pos_ = 0;
  fromcontrollernick_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  fromcontrollerheadurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResNotifyChatArrive::~ResNotifyChatArrive() {
  SharedDtor();
}

void ResNotifyChatArrive::SharedDtor() {
  if (msgid_ != &::google::protobuf::internal::kEmptyString) {
    delete msgid_;
  }
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_;
  }
  if (fromuniqueid_ != &::google::protobuf::internal::kEmptyString) {
    delete fromuniqueid_;
  }
  if (fromcontrollernick_ != &::google::protobuf::internal::kEmptyString) {
    delete fromcontrollernick_;
  }
  if (fromcontrollerheadurl_ != &::google::protobuf::internal::kEmptyString) {
    delete fromcontrollerheadurl_;
  }
  if (this != default_instance_) {
  }
}

void ResNotifyChatArrive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResNotifyChatArrive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResNotifyChatArrive_descriptor_;
}

const ResNotifyChatArrive& ResNotifyChatArrive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgCode_2eproto();
  return *default_instance_;
}

ResNotifyChatArrive* ResNotifyChatArrive::default_instance_ = NULL;

ResNotifyChatArrive* ResNotifyChatArrive::New() const {
  return new ResNotifyChatArrive;
}

void ResNotifyChatArrive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgid()) {
      if (msgid_ != &::google::protobuf::internal::kEmptyString) {
        msgid_->clear();
      }
    }
    msgtype_ = 0;
    if (has_msg()) {
      if (msg_ != &::google::protobuf::internal::kEmptyString) {
        msg_->clear();
      }
    }
    chanel_ = 0;
    msgcreatetime_ = GOOGLE_LONGLONG(0);
    if (has_fromuniqueid()) {
      if (fromuniqueid_ != &::google::protobuf::internal::kEmptyString) {
        fromuniqueid_->clear();
      }
    }
    pos_ = 0;
    if (has_fromcontrollernick()) {
      if (fromcontrollernick_ != &::google::protobuf::internal::kEmptyString) {
        fromcontrollernick_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_fromcontrollerheadurl()) {
      if (fromcontrollerheadurl_ != &::google::protobuf::internal::kEmptyString) {
        fromcontrollerheadurl_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResNotifyChatArrive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string msgId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgid().data(), this->msgid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_msgType;
        break;
      }

      // required int32 msgType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_msgType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &msgtype_)));
          set_has_msgtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_msg;
        break;
      }

      // required string msg = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msg().data(), this->msg().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_chanel;
        break;
      }

      // required int32 chanel = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_chanel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chanel_)));
          set_has_chanel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_msgCreateTime;
        break;
      }

      // required int64 msgCreateTime = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_msgCreateTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &msgcreatetime_)));
          set_has_msgcreatetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_fromUniqueId;
        break;
      }

      // required string fromUniqueId = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fromUniqueId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fromuniqueid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->fromuniqueid().data(), this->fromuniqueid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_pos;
        break;
      }

      // optional int32 pos = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pos_)));
          set_has_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_fromControllerNick;
        break;
      }

      // optional string fromControllerNick = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fromControllerNick:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fromcontrollernick()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->fromcontrollernick().data(), this->fromcontrollernick().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_fromControllerHeadurl;
        break;
      }

      // optional string fromControllerHeadurl = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fromControllerHeadurl:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fromcontrollerheadurl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->fromcontrollerheadurl().data(), this->fromcontrollerheadurl().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResNotifyChatArrive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string msgId = 1;
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgid().data(), this->msgid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgid(), output);
  }

  // required int32 msgType = 2;
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->msgtype(), output);
  }

  // required string msg = 3;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->msg(), output);
  }

  // required int32 chanel = 4;
  if (has_chanel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->chanel(), output);
  }

  // required int64 msgCreateTime = 5;
  if (has_msgcreatetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->msgcreatetime(), output);
  }

  // required string fromUniqueId = 6;
  if (has_fromuniqueid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fromuniqueid().data(), this->fromuniqueid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->fromuniqueid(), output);
  }

  // optional int32 pos = 7;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->pos(), output);
  }

  // optional string fromControllerNick = 8;
  if (has_fromcontrollernick()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fromcontrollernick().data(), this->fromcontrollernick().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->fromcontrollernick(), output);
  }

  // optional string fromControllerHeadurl = 9;
  if (has_fromcontrollerheadurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fromcontrollerheadurl().data(), this->fromcontrollerheadurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->fromcontrollerheadurl(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResNotifyChatArrive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string msgId = 1;
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgid().data(), this->msgid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgid(), target);
  }

  // required int32 msgType = 2;
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->msgtype(), target);
  }

  // required string msg = 3;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->msg(), target);
  }

  // required int32 chanel = 4;
  if (has_chanel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->chanel(), target);
  }

  // required int64 msgCreateTime = 5;
  if (has_msgcreatetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->msgcreatetime(), target);
  }

  // required string fromUniqueId = 6;
  if (has_fromuniqueid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fromuniqueid().data(), this->fromuniqueid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->fromuniqueid(), target);
  }

  // optional int32 pos = 7;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->pos(), target);
  }

  // optional string fromControllerNick = 8;
  if (has_fromcontrollernick()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fromcontrollernick().data(), this->fromcontrollernick().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->fromcontrollernick(), target);
  }

  // optional string fromControllerHeadurl = 9;
  if (has_fromcontrollerheadurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fromcontrollerheadurl().data(), this->fromcontrollerheadurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->fromcontrollerheadurl(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResNotifyChatArrive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string msgId = 1;
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgid());
    }

    // required int32 msgType = 2;
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->msgtype());
    }

    // required string msg = 3;
    if (has_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msg());
    }

    // required int32 chanel = 4;
    if (has_chanel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chanel());
    }

    // required int64 msgCreateTime = 5;
    if (has_msgcreatetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->msgcreatetime());
    }

    // required string fromUniqueId = 6;
    if (has_fromuniqueid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fromuniqueid());
    }

    // optional int32 pos = 7;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pos());
    }

    // optional string fromControllerNick = 8;
    if (has_fromcontrollernick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fromcontrollernick());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string fromControllerHeadurl = 9;
    if (has_fromcontrollerheadurl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fromcontrollerheadurl());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResNotifyChatArrive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResNotifyChatArrive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResNotifyChatArrive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResNotifyChatArrive::MergeFrom(const ResNotifyChatArrive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_msg()) {
      set_msg(from.msg());
    }
    if (from.has_chanel()) {
      set_chanel(from.chanel());
    }
    if (from.has_msgcreatetime()) {
      set_msgcreatetime(from.msgcreatetime());
    }
    if (from.has_fromuniqueid()) {
      set_fromuniqueid(from.fromuniqueid());
    }
    if (from.has_pos()) {
      set_pos(from.pos());
    }
    if (from.has_fromcontrollernick()) {
      set_fromcontrollernick(from.fromcontrollernick());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_fromcontrollerheadurl()) {
      set_fromcontrollerheadurl(from.fromcontrollerheadurl());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResNotifyChatArrive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResNotifyChatArrive::CopyFrom(const ResNotifyChatArrive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResNotifyChatArrive::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void ResNotifyChatArrive::Swap(ResNotifyChatArrive* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(msgtype_, other->msgtype_);
    std::swap(msg_, other->msg_);
    std::swap(chanel_, other->chanel_);
    std::swap(msgcreatetime_, other->msgcreatetime_);
    std::swap(fromuniqueid_, other->fromuniqueid_);
    std::swap(pos_, other->pos_);
    std::swap(fromcontrollernick_, other->fromcontrollernick_);
    std::swap(fromcontrollerheadurl_, other->fromcontrollerheadurl_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResNotifyChatArrive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResNotifyChatArrive_descriptor_;
  metadata.reflection = ResNotifyChatArrive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResChat::kResultFieldNumber;
#endif  // !_MSC_VER

ResChat::ResChat()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResChat::InitAsDefaultInstance() {
  result_ = const_cast< ::ProtoNet::ResponseResult*>(&::ProtoNet::ResponseResult::default_instance());
}

ResChat::ResChat(const ResChat& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResChat::SharedCtor() {
  _cached_size_ = 0;
  result_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResChat::~ResChat() {
  SharedDtor();
}

void ResChat::SharedDtor() {
  if (this != default_instance_) {
    delete result_;
  }
}

void ResChat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResChat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResChat_descriptor_;
}

const ResChat& ResChat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgCode_2eproto();
  return *default_instance_;
}

ResChat* ResChat::default_instance_ = NULL;

ResChat* ResChat::New() const {
  return new ResChat;
}

void ResChat::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_result()) {
      if (result_ != NULL) result_->::ProtoNet::ResponseResult::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResChat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ProtoNet.ResponseResult result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResChat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .ProtoNet.ResponseResult result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResChat::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .ProtoNet.ResponseResult result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResChat::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ProtoNet.ResponseResult result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResChat::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResChat* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResChat*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResChat::MergeFrom(const ResChat& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      mutable_result()->::ProtoNet::ResponseResult::MergeFrom(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResChat::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResChat::CopyFrom(const ResChat& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResChat::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_result()) {
    if (!this->result().IsInitialized()) return false;
  }
  return true;
}

void ResChat::Swap(ResChat* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResChat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResChat_descriptor_;
  metadata.reflection = ResChat_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqChat::kMsgTypeFieldNumber;
const int ReqChat::kMsgFieldNumber;
const int ReqChat::kChanelFieldNumber;
const int ReqChat::kToUniqueIdFieldNumber;
const int ReqChat::kClubIdFieldNumber;
#endif  // !_MSC_VER

ReqChat::ReqChat()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqChat::InitAsDefaultInstance() {
}

ReqChat::ReqChat(const ReqChat& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqChat::SharedCtor() {
  _cached_size_ = 0;
  msgtype_ = 0;
  msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  chanel_ = 0;
  touniqueid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  clubid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqChat::~ReqChat() {
  SharedDtor();
}

void ReqChat::SharedDtor() {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_;
  }
  if (touniqueid_ != &::google::protobuf::internal::kEmptyString) {
    delete touniqueid_;
  }
  if (clubid_ != &::google::protobuf::internal::kEmptyString) {
    delete clubid_;
  }
  if (this != default_instance_) {
  }
}

void ReqChat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqChat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqChat_descriptor_;
}

const ReqChat& ReqChat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgCode_2eproto();
  return *default_instance_;
}

ReqChat* ReqChat::default_instance_ = NULL;

ReqChat* ReqChat::New() const {
  return new ReqChat;
}

void ReqChat::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msgtype_ = 0;
    if (has_msg()) {
      if (msg_ != &::google::protobuf::internal::kEmptyString) {
        msg_->clear();
      }
    }
    chanel_ = 0;
    if (has_touniqueid()) {
      if (touniqueid_ != &::google::protobuf::internal::kEmptyString) {
        touniqueid_->clear();
      }
    }
    if (has_clubid()) {
      if (clubid_ != &::google::protobuf::internal::kEmptyString) {
        clubid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqChat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 msgType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &msgtype_)));
          set_has_msgtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_msg;
        break;
      }

      // required string msg = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msg().data(), this->msg().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_chanel;
        break;
      }

      // required int32 chanel = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_chanel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chanel_)));
          set_has_chanel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_toUniqueId;
        break;
      }

      // optional string toUniqueId = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_toUniqueId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_touniqueid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->touniqueid().data(), this->touniqueid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_clubId;
        break;
      }

      // optional string clubId = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_clubId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_clubid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->clubid().data(), this->clubid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqChat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 msgType = 1;
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->msgtype(), output);
  }

  // required string msg = 2;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->msg(), output);
  }

  // required int32 chanel = 3;
  if (has_chanel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->chanel(), output);
  }

  // optional string toUniqueId = 4;
  if (has_touniqueid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->touniqueid().data(), this->touniqueid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->touniqueid(), output);
  }

  // optional string clubId = 5;
  if (has_clubid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->clubid().data(), this->clubid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->clubid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqChat::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 msgType = 1;
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->msgtype(), target);
  }

  // required string msg = 2;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->msg(), target);
  }

  // required int32 chanel = 3;
  if (has_chanel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->chanel(), target);
  }

  // optional string toUniqueId = 4;
  if (has_touniqueid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->touniqueid().data(), this->touniqueid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->touniqueid(), target);
  }

  // optional string clubId = 5;
  if (has_clubid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->clubid().data(), this->clubid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->clubid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqChat::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 msgType = 1;
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->msgtype());
    }

    // required string msg = 2;
    if (has_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msg());
    }

    // required int32 chanel = 3;
    if (has_chanel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chanel());
    }

    // optional string toUniqueId = 4;
    if (has_touniqueid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->touniqueid());
    }

    // optional string clubId = 5;
    if (has_clubid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->clubid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqChat::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqChat* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqChat*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqChat::MergeFrom(const ReqChat& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_msg()) {
      set_msg(from.msg());
    }
    if (from.has_chanel()) {
      set_chanel(from.chanel());
    }
    if (from.has_touniqueid()) {
      set_touniqueid(from.touniqueid());
    }
    if (from.has_clubid()) {
      set_clubid(from.clubid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqChat::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqChat::CopyFrom(const ReqChat& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqChat::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void ReqChat::Swap(ReqChat* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    std::swap(msg_, other->msg_);
    std::swap(chanel_, other->chanel_);
    std::swap(touniqueid_, other->touniqueid_);
    std::swap(clubid_, other->clubid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqChat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqChat_descriptor_;
  metadata.reflection = ReqChat_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

ResNotifyBeKickOut::ResNotifyBeKickOut()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResNotifyBeKickOut::InitAsDefaultInstance() {
}

ResNotifyBeKickOut::ResNotifyBeKickOut(const ResNotifyBeKickOut& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResNotifyBeKickOut::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResNotifyBeKickOut::~ResNotifyBeKickOut() {
  SharedDtor();
}

void ResNotifyBeKickOut::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ResNotifyBeKickOut::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResNotifyBeKickOut::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResNotifyBeKickOut_descriptor_;
}

const ResNotifyBeKickOut& ResNotifyBeKickOut::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgCode_2eproto();
  return *default_instance_;
}

ResNotifyBeKickOut* ResNotifyBeKickOut::default_instance_ = NULL;

ResNotifyBeKickOut* ResNotifyBeKickOut::New() const {
  return new ResNotifyBeKickOut;
}

void ResNotifyBeKickOut::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResNotifyBeKickOut::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void ResNotifyBeKickOut::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResNotifyBeKickOut::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResNotifyBeKickOut::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResNotifyBeKickOut::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResNotifyBeKickOut* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResNotifyBeKickOut*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResNotifyBeKickOut::MergeFrom(const ResNotifyBeKickOut& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResNotifyBeKickOut::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResNotifyBeKickOut::CopyFrom(const ResNotifyBeKickOut& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResNotifyBeKickOut::IsInitialized() const {

  return true;
}

void ResNotifyBeKickOut::Swap(ResNotifyBeKickOut* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResNotifyBeKickOut::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResNotifyBeKickOut_descriptor_;
  metadata.reflection = ResNotifyBeKickOut_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResExceptionCatch::kMsgFieldNumber;
#endif  // !_MSC_VER

ResExceptionCatch::ResExceptionCatch()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResExceptionCatch::InitAsDefaultInstance() {
}

ResExceptionCatch::ResExceptionCatch(const ResExceptionCatch& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResExceptionCatch::SharedCtor() {
  _cached_size_ = 0;
  msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResExceptionCatch::~ResExceptionCatch() {
  SharedDtor();
}

void ResExceptionCatch::SharedDtor() {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_;
  }
  if (this != default_instance_) {
  }
}

void ResExceptionCatch::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResExceptionCatch::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResExceptionCatch_descriptor_;
}

const ResExceptionCatch& ResExceptionCatch::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgCode_2eproto();
  return *default_instance_;
}

ResExceptionCatch* ResExceptionCatch::default_instance_ = NULL;

ResExceptionCatch* ResExceptionCatch::New() const {
  return new ResExceptionCatch;
}

void ResExceptionCatch::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msg()) {
      if (msg_ != &::google::protobuf::internal::kEmptyString) {
        msg_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResExceptionCatch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string msg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msg().data(), this->msg().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResExceptionCatch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string msg = 1;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msg(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResExceptionCatch::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string msg = 1;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msg(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResExceptionCatch::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string msg = 1;
    if (has_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msg());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResExceptionCatch::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResExceptionCatch* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResExceptionCatch*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResExceptionCatch::MergeFrom(const ResExceptionCatch& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msg()) {
      set_msg(from.msg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResExceptionCatch::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResExceptionCatch::CopyFrom(const ResExceptionCatch& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResExceptionCatch::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ResExceptionCatch::Swap(ResExceptionCatch* other) {
  if (other != this) {
    std::swap(msg_, other->msg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResExceptionCatch::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResExceptionCatch_descriptor_;
  metadata.reflection = ResExceptionCatch_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResConnectCreat::kNowFieldNumber;
const int ResConnectCreat::kHeartbeartTimeFieldNumber;
#endif  // !_MSC_VER

ResConnectCreat::ResConnectCreat()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResConnectCreat::InitAsDefaultInstance() {
}

ResConnectCreat::ResConnectCreat(const ResConnectCreat& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResConnectCreat::SharedCtor() {
  _cached_size_ = 0;
  now_ = GOOGLE_LONGLONG(0);
  heartbearttime_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResConnectCreat::~ResConnectCreat() {
  SharedDtor();
}

void ResConnectCreat::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ResConnectCreat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResConnectCreat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResConnectCreat_descriptor_;
}

const ResConnectCreat& ResConnectCreat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgCode_2eproto();
  return *default_instance_;
}

ResConnectCreat* ResConnectCreat::default_instance_ = NULL;

ResConnectCreat* ResConnectCreat::New() const {
  return new ResConnectCreat;
}

void ResConnectCreat::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    now_ = GOOGLE_LONGLONG(0);
    heartbearttime_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResConnectCreat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 now = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &now_)));
          set_has_now();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_heartbeartTime;
        break;
      }

      // required int64 heartbeartTime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_heartbeartTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &heartbearttime_)));
          set_has_heartbearttime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResConnectCreat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 now = 1;
  if (has_now()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->now(), output);
  }

  // required int64 heartbeartTime = 2;
  if (has_heartbearttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->heartbearttime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResConnectCreat::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 now = 1;
  if (has_now()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->now(), target);
  }

  // required int64 heartbeartTime = 2;
  if (has_heartbearttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->heartbearttime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResConnectCreat::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 now = 1;
    if (has_now()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->now());
    }

    // required int64 heartbeartTime = 2;
    if (has_heartbearttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->heartbearttime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResConnectCreat::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResConnectCreat* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResConnectCreat*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResConnectCreat::MergeFrom(const ResConnectCreat& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_now()) {
      set_now(from.now());
    }
    if (from.has_heartbearttime()) {
      set_heartbearttime(from.heartbearttime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResConnectCreat::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResConnectCreat::CopyFrom(const ResConnectCreat& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResConnectCreat::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ResConnectCreat::Swap(ResConnectCreat* other) {
  if (other != this) {
    std::swap(now_, other->now_);
    std::swap(heartbearttime_, other->heartbearttime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResConnectCreat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResConnectCreat_descriptor_;
  metadata.reflection = ResConnectCreat_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

ReqHeartBeat::ReqHeartBeat()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqHeartBeat::InitAsDefaultInstance() {
}

ReqHeartBeat::ReqHeartBeat(const ReqHeartBeat& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqHeartBeat::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqHeartBeat::~ReqHeartBeat() {
  SharedDtor();
}

void ReqHeartBeat::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqHeartBeat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqHeartBeat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqHeartBeat_descriptor_;
}

const ReqHeartBeat& ReqHeartBeat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgCode_2eproto();
  return *default_instance_;
}

ReqHeartBeat* ReqHeartBeat::default_instance_ = NULL;

ReqHeartBeat* ReqHeartBeat::New() const {
  return new ReqHeartBeat;
}

void ReqHeartBeat::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqHeartBeat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void ReqHeartBeat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqHeartBeat::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqHeartBeat::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqHeartBeat::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqHeartBeat* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqHeartBeat*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqHeartBeat::MergeFrom(const ReqHeartBeat& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqHeartBeat::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqHeartBeat::CopyFrom(const ReqHeartBeat& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqHeartBeat::IsInitialized() const {

  return true;
}

void ReqHeartBeat::Swap(ReqHeartBeat* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqHeartBeat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqHeartBeat_descriptor_;
  metadata.reflection = ReqHeartBeat_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResHeartBeat::kTimeFieldNumber;
#endif  // !_MSC_VER

ResHeartBeat::ResHeartBeat()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResHeartBeat::InitAsDefaultInstance() {
}

ResHeartBeat::ResHeartBeat(const ResHeartBeat& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResHeartBeat::SharedCtor() {
  _cached_size_ = 0;
  time_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResHeartBeat::~ResHeartBeat() {
  SharedDtor();
}

void ResHeartBeat::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ResHeartBeat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResHeartBeat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResHeartBeat_descriptor_;
}

const ResHeartBeat& ResHeartBeat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgCode_2eproto();
  return *default_instance_;
}

ResHeartBeat* ResHeartBeat::default_instance_ = NULL;

ResHeartBeat* ResHeartBeat::New() const {
  return new ResHeartBeat;
}

void ResHeartBeat::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    time_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResHeartBeat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 time = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResHeartBeat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 time = 1;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResHeartBeat::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 time = 1;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResHeartBeat::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 time = 1;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResHeartBeat::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResHeartBeat* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResHeartBeat*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResHeartBeat::MergeFrom(const ResHeartBeat& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResHeartBeat::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResHeartBeat::CopyFrom(const ResHeartBeat& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResHeartBeat::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ResHeartBeat::Swap(ResHeartBeat* other) {
  if (other != this) {
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResHeartBeat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResHeartBeat_descriptor_;
  metadata.reflection = ResHeartBeat_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ProtoNet

// @@protoc_insertion_point(global_scope)
