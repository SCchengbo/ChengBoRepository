// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MsgMatch.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "MsgMatch.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ProtoNet {

namespace {

const ::google::protobuf::Descriptor* ItemInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ItemInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* MatchSignInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MatchSignInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqGetMatchList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqGetMatchList_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResGetMatchList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResGetMatchList_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqSignUpMatch_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqSignUpMatch_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResSignUpMatch_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResSignUpMatch_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResNotifyEnterMatch_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResNotifyEnterMatch_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqCanleSignMatch_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqCanleSignMatch_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResCanleSignMatch_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResCanleSignMatch_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResNotifyMatchRoomWattingChange_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResNotifyMatchRoomWattingChange_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResNotifyTimesOver_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResNotifyTimesOver_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqContinueMatch_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqContinueMatch_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResContinueMatch_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResContinueMatch_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_MsgMatch_2eproto() {
  protobuf_AddDesc_MsgMatch_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "MsgMatch.proto");
  GOOGLE_CHECK(file != NULL);
  ItemInfo_descriptor_ = file->message_type(0);
  static const int ItemInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemInfo, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemInfo, num_),
  };
  ItemInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ItemInfo_descriptor_,
      ItemInfo::default_instance_,
      ItemInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ItemInfo));
  MatchSignInfo_descriptor_ = file->message_type(1);
  static const int MatchSignInfo_offsets_[17] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchSignInfo, matchconfigid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchSignInfo, matchname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchSignInfo, matchbigname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchSignInfo, matchdesc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchSignInfo, maxplayer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchSignInfo, currentplayernum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchSignInfo, signbegintime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchSignInfo, duringtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchSignInfo, matchbegintime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchSignInfo, rewardinfos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchSignInfo, costinfos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchSignInfo, randid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchSignInfo, selfsignup_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchSignInfo, times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchSignInfo, from_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchSignInfo, to_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchSignInfo, isstar_),
  };
  MatchSignInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MatchSignInfo_descriptor_,
      MatchSignInfo::default_instance_,
      MatchSignInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchSignInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchSignInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MatchSignInfo));
  ReqGetMatchList_descriptor_ = file->message_type(2);
  static const int ReqGetMatchList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqGetMatchList, gameid_),
  };
  ReqGetMatchList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqGetMatchList_descriptor_,
      ReqGetMatchList::default_instance_,
      ReqGetMatchList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqGetMatchList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqGetMatchList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqGetMatchList));
  ResGetMatchList_descriptor_ = file->message_type(3);
  static const int ResGetMatchList_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResGetMatchList, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResGetMatchList, matchsigninfos_),
  };
  ResGetMatchList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResGetMatchList_descriptor_,
      ResGetMatchList::default_instance_,
      ResGetMatchList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResGetMatchList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResGetMatchList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResGetMatchList));
  ReqSignUpMatch_descriptor_ = file->message_type(4);
  static const int ReqSignUpMatch_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqSignUpMatch, matchid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqSignUpMatch, randid_),
  };
  ReqSignUpMatch_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqSignUpMatch_descriptor_,
      ReqSignUpMatch::default_instance_,
      ReqSignUpMatch_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqSignUpMatch, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqSignUpMatch, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqSignUpMatch));
  ResSignUpMatch_descriptor_ = file->message_type(5);
  static const int ResSignUpMatch_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResSignUpMatch, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResSignUpMatch, matchconfigid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResSignUpMatch, randid_),
  };
  ResSignUpMatch_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResSignUpMatch_descriptor_,
      ResSignUpMatch::default_instance_,
      ResSignUpMatch_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResSignUpMatch, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResSignUpMatch, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResSignUpMatch));
  ResNotifyEnterMatch_descriptor_ = file->message_type(6);
  static const int ResNotifyEnterMatch_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResNotifyEnterMatch, roomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResNotifyEnterMatch, roomname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResNotifyEnterMatch, roomeruniqueid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResNotifyEnterMatch, roomernickname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResNotifyEnterMatch, roomerheadimg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResNotifyEnterMatch, roomerheadtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResNotifyEnterMatch, roomtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResNotifyEnterMatch, serverinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResNotifyEnterMatch, times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResNotifyEnterMatch, gameid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResNotifyEnterMatch, timestype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResNotifyEnterMatch, from_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResNotifyEnterMatch, to_),
  };
  ResNotifyEnterMatch_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResNotifyEnterMatch_descriptor_,
      ResNotifyEnterMatch::default_instance_,
      ResNotifyEnterMatch_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResNotifyEnterMatch, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResNotifyEnterMatch, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResNotifyEnterMatch));
  ReqCanleSignMatch_descriptor_ = file->message_type(7);
  static const int ReqCanleSignMatch_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqCanleSignMatch, matchid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqCanleSignMatch, randid_),
  };
  ReqCanleSignMatch_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqCanleSignMatch_descriptor_,
      ReqCanleSignMatch::default_instance_,
      ReqCanleSignMatch_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqCanleSignMatch, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqCanleSignMatch, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqCanleSignMatch));
  ResCanleSignMatch_descriptor_ = file->message_type(8);
  static const int ResCanleSignMatch_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResCanleSignMatch, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResCanleSignMatch, matchconfigid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResCanleSignMatch, randid_),
  };
  ResCanleSignMatch_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResCanleSignMatch_descriptor_,
      ResCanleSignMatch::default_instance_,
      ResCanleSignMatch_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResCanleSignMatch, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResCanleSignMatch, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResCanleSignMatch));
  ResNotifyMatchRoomWattingChange_descriptor_ = file->message_type(9);
  static const int ResNotifyMatchRoomWattingChange_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResNotifyMatchRoomWattingChange, roomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResNotifyMatchRoomWattingChange, gameid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResNotifyMatchRoomWattingChange, roomtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResNotifyMatchRoomWattingChange, timestype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResNotifyMatchRoomWattingChange, waitting_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResNotifyMatchRoomWattingChange, randid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResNotifyMatchRoomWattingChange, times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResNotifyMatchRoomWattingChange, from_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResNotifyMatchRoomWattingChange, to_),
  };
  ResNotifyMatchRoomWattingChange_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResNotifyMatchRoomWattingChange_descriptor_,
      ResNotifyMatchRoomWattingChange::default_instance_,
      ResNotifyMatchRoomWattingChange_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResNotifyMatchRoomWattingChange, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResNotifyMatchRoomWattingChange, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResNotifyMatchRoomWattingChange));
  ResNotifyTimesOver_descriptor_ = file->message_type(10);
  static const int ResNotifyTimesOver_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResNotifyTimesOver, matchconfigid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResNotifyTimesOver, gameid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResNotifyTimesOver, randid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResNotifyTimesOver, times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResNotifyTimesOver, from_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResNotifyTimesOver, to_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResNotifyTimesOver, selfrank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResNotifyTimesOver, taotai_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResNotifyTimesOver, matchover_),
  };
  ResNotifyTimesOver_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResNotifyTimesOver_descriptor_,
      ResNotifyTimesOver::default_instance_,
      ResNotifyTimesOver_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResNotifyTimesOver, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResNotifyTimesOver, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResNotifyTimesOver));
  ReqContinueMatch_descriptor_ = file->message_type(11);
  static const int ReqContinueMatch_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqContinueMatch, matchconfigid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqContinueMatch, gameid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqContinueMatch, randid_),
  };
  ReqContinueMatch_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqContinueMatch_descriptor_,
      ReqContinueMatch::default_instance_,
      ReqContinueMatch_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqContinueMatch, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqContinueMatch, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqContinueMatch));
  ResContinueMatch_descriptor_ = file->message_type(12);
  static const int ResContinueMatch_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResContinueMatch, result_),
  };
  ResContinueMatch_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResContinueMatch_descriptor_,
      ResContinueMatch::default_instance_,
      ResContinueMatch_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResContinueMatch, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResContinueMatch, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResContinueMatch));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_MsgMatch_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ItemInfo_descriptor_, &ItemInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MatchSignInfo_descriptor_, &MatchSignInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqGetMatchList_descriptor_, &ReqGetMatchList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResGetMatchList_descriptor_, &ResGetMatchList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqSignUpMatch_descriptor_, &ReqSignUpMatch::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResSignUpMatch_descriptor_, &ResSignUpMatch::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResNotifyEnterMatch_descriptor_, &ResNotifyEnterMatch::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqCanleSignMatch_descriptor_, &ReqCanleSignMatch::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResCanleSignMatch_descriptor_, &ResCanleSignMatch::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResNotifyMatchRoomWattingChange_descriptor_, &ResNotifyMatchRoomWattingChange::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResNotifyTimesOver_descriptor_, &ResNotifyTimesOver::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqContinueMatch_descriptor_, &ReqContinueMatch::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResContinueMatch_descriptor_, &ResContinueMatch::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_MsgMatch_2eproto() {
  delete ItemInfo::default_instance_;
  delete ItemInfo_reflection_;
  delete MatchSignInfo::default_instance_;
  delete MatchSignInfo_reflection_;
  delete ReqGetMatchList::default_instance_;
  delete ReqGetMatchList_reflection_;
  delete ResGetMatchList::default_instance_;
  delete ResGetMatchList_reflection_;
  delete ReqSignUpMatch::default_instance_;
  delete ReqSignUpMatch_reflection_;
  delete ResSignUpMatch::default_instance_;
  delete ResSignUpMatch_reflection_;
  delete ResNotifyEnterMatch::default_instance_;
  delete ResNotifyEnterMatch_reflection_;
  delete ReqCanleSignMatch::default_instance_;
  delete ReqCanleSignMatch_reflection_;
  delete ResCanleSignMatch::default_instance_;
  delete ResCanleSignMatch_reflection_;
  delete ResNotifyMatchRoomWattingChange::default_instance_;
  delete ResNotifyMatchRoomWattingChange_reflection_;
  delete ResNotifyTimesOver::default_instance_;
  delete ResNotifyTimesOver_reflection_;
  delete ReqContinueMatch::default_instance_;
  delete ReqContinueMatch_reflection_;
  delete ResContinueMatch::default_instance_;
  delete ResContinueMatch_reflection_;
}

void protobuf_AddDesc_MsgMatch_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::ProtoNet::protobuf_AddDesc_MsgCode_2eproto();
  ::ProtoNet::protobuf_AddDesc_MsgGate_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016MsgMatch.proto\022\010ProtoNet\032\rMsgCode.prot"
    "o\032\rMsgGate.proto\"\'\n\010ItemInfo\022\016\n\006itemId\030\001"
    " \002(\005\022\013\n\003num\030\002 \002(\005\"\377\002\n\rMatchSignInfo\022\025\n\rm"
    "atchConfigId\030\001 \002(\005\022\021\n\tmatchName\030\002 \002(\t\022\024\n"
    "\014matchBigName\030\003 \002(\t\022\021\n\tmatchDesc\030\004 \002(\t\022\021"
    "\n\tmaxPlayer\030\005 \002(\005\022\030\n\020currentPlayerNum\030\006 "
    "\002(\005\022\025\n\rsignBeginTime\030\007 \002(\003\022\022\n\nduringTime"
    "\030\010 \002(\003\022\026\n\016matchBeginTime\030\t \002(\003\022\'\n\013reward"
    "Infos\030\n \003(\0132\022.ProtoNet.ItemInfo\022%\n\tcostI"
    "nfos\030\013 \003(\0132\022.ProtoNet.ItemInfo\022\016\n\006randId"
    "\030\014 \002(\t\022\022\n\nselfSignUp\030\r \001(\005\022\r\n\005times\030\016 \002("
    "\005\022\014\n\004from\030\017 \002(\t\022\n\n\002to\030\020 \002(\t\022\016\n\006isStar\030\021 "
    "\002(\005\"!\n\017ReqGetMatchList\022\016\n\006gameId\030\001 \002(\005\"l"
    "\n\017ResGetMatchList\022(\n\006result\030\001 \002(\0132\030.Prot"
    "oNet.ResponseResult\022/\n\016matchSignInfos\030\002 "
    "\003(\0132\027.ProtoNet.MatchSignInfo\"1\n\016ReqSignU"
    "pMatch\022\017\n\007matchId\030\001 \002(\005\022\016\n\006randId\030\002 \002(\t\""
    "a\n\016ResSignUpMatch\022(\n\006result\030\001 \002(\0132\030.Prot"
    "oNet.ResponseResult\022\025\n\rmatchConfigId\030\002 \001"
    "(\005\022\016\n\006randId\030\003 \001(\t\"\253\002\n\023ResNotifyEnterMat"
    "ch\022\016\n\006roomId\030\001 \002(\t\022\020\n\010roomName\030\002 \002(\t\022\026\n\016"
    "roomerUniqueId\030\003 \002(\t\022\026\n\016roomerNickName\030\004"
    " \002(\t\022\025\n\rroomerHeadImg\030\005 \002(\t\022\026\n\016roomerHea"
    "dType\030\006 \002(\005\022\020\n\010roomType\030\007 \002(\005\0225\n\nserverI"
    "nfo\030\010 \002(\0132!.ProtoNet.ServerInfoIpsSafeDe"
    "tail\022\r\n\005times\030\t \002(\005\022\016\n\006gameId\030\n \002(\005\022\021\n\tt"
    "imesType\030\013 \002(\005\022\014\n\004from\030\014 \002(\t\022\n\n\002to\030\r \002(\t"
    "\"4\n\021ReqCanleSignMatch\022\017\n\007matchId\030\001 \002(\005\022\016"
    "\n\006randId\030\002 \002(\t\"d\n\021ResCanleSignMatch\022(\n\006r"
    "esult\030\001 \002(\0132\030.ProtoNet.ResponseResult\022\025\n"
    "\rmatchConfigId\030\002 \001(\005\022\016\n\006randId\030\003 \001(\t\"\261\001\n"
    "\037ResNotifyMatchRoomWattingChange\022\016\n\006room"
    "Id\030\001 \002(\t\022\016\n\006gameId\030\002 \002(\005\022\020\n\010roomType\030\003 \002"
    "(\005\022\021\n\ttimesType\030\004 \002(\005\022\020\n\010waitting\030\005 \002(\005\022"
    "\016\n\006randId\030\006 \002(\t\022\r\n\005times\030\007 \002(\005\022\014\n\004from\030\010"
    " \002(\t\022\n\n\002to\030\t \002(\t\"\251\001\n\022ResNotifyTimesOver\022"
    "\025\n\rmatchConfigId\030\001 \002(\005\022\016\n\006gameId\030\002 \002(\005\022\016"
    "\n\006randId\030\003 \002(\t\022\r\n\005times\030\004 \002(\005\022\014\n\004from\030\005 "
    "\002(\t\022\n\n\002to\030\006 \002(\t\022\020\n\010selfRank\030\007 \002(\005\022\016\n\006tao"
    "tai\030\010 \002(\005\022\021\n\tmatchOver\030\t \002(\005\"I\n\020ReqConti"
    "nueMatch\022\025\n\rmatchConfigId\030\001 \002(\005\022\016\n\006gameI"
    "d\030\002 \002(\005\022\016\n\006randId\030\003 \002(\t\"<\n\020ResContinueMa"
    "tch\022(\n\006result\030\001 \002(\0132\030.ProtoNet.ResponseR"
    "esultB\031\n\027com.version.protobuf.pb", 1752);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "MsgMatch.proto", &protobuf_RegisterTypes);
  ItemInfo::default_instance_ = new ItemInfo();
  MatchSignInfo::default_instance_ = new MatchSignInfo();
  ReqGetMatchList::default_instance_ = new ReqGetMatchList();
  ResGetMatchList::default_instance_ = new ResGetMatchList();
  ReqSignUpMatch::default_instance_ = new ReqSignUpMatch();
  ResSignUpMatch::default_instance_ = new ResSignUpMatch();
  ResNotifyEnterMatch::default_instance_ = new ResNotifyEnterMatch();
  ReqCanleSignMatch::default_instance_ = new ReqCanleSignMatch();
  ResCanleSignMatch::default_instance_ = new ResCanleSignMatch();
  ResNotifyMatchRoomWattingChange::default_instance_ = new ResNotifyMatchRoomWattingChange();
  ResNotifyTimesOver::default_instance_ = new ResNotifyTimesOver();
  ReqContinueMatch::default_instance_ = new ReqContinueMatch();
  ResContinueMatch::default_instance_ = new ResContinueMatch();
  ItemInfo::default_instance_->InitAsDefaultInstance();
  MatchSignInfo::default_instance_->InitAsDefaultInstance();
  ReqGetMatchList::default_instance_->InitAsDefaultInstance();
  ResGetMatchList::default_instance_->InitAsDefaultInstance();
  ReqSignUpMatch::default_instance_->InitAsDefaultInstance();
  ResSignUpMatch::default_instance_->InitAsDefaultInstance();
  ResNotifyEnterMatch::default_instance_->InitAsDefaultInstance();
  ReqCanleSignMatch::default_instance_->InitAsDefaultInstance();
  ResCanleSignMatch::default_instance_->InitAsDefaultInstance();
  ResNotifyMatchRoomWattingChange::default_instance_->InitAsDefaultInstance();
  ResNotifyTimesOver::default_instance_->InitAsDefaultInstance();
  ReqContinueMatch::default_instance_->InitAsDefaultInstance();
  ResContinueMatch::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_MsgMatch_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_MsgMatch_2eproto {
  StaticDescriptorInitializer_MsgMatch_2eproto() {
    protobuf_AddDesc_MsgMatch_2eproto();
  }
} static_descriptor_initializer_MsgMatch_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int ItemInfo::kItemIdFieldNumber;
const int ItemInfo::kNumFieldNumber;
#endif  // !_MSC_VER

ItemInfo::ItemInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ItemInfo::InitAsDefaultInstance() {
}

ItemInfo::ItemInfo(const ItemInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ItemInfo::SharedCtor() {
  _cached_size_ = 0;
  itemid_ = 0;
  num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ItemInfo::~ItemInfo() {
  SharedDtor();
}

void ItemInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ItemInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ItemInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ItemInfo_descriptor_;
}

const ItemInfo& ItemInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgMatch_2eproto();
  return *default_instance_;
}

ItemInfo* ItemInfo::default_instance_ = NULL;

ItemInfo* ItemInfo::New() const {
  return new ItemInfo;
}

void ItemInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    itemid_ = 0;
    num_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ItemInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 itemId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_num;
        break;
      }

      // required int32 num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ItemInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 itemId = 1;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->itemid(), output);
  }

  // required int32 num = 2;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ItemInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 itemId = 1;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->itemid(), target);
  }

  // required int32 num = 2;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ItemInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 itemId = 1;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemid());
    }

    // required int32 num = 2;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ItemInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ItemInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ItemInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ItemInfo::MergeFrom(const ItemInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ItemInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ItemInfo::CopyFrom(const ItemInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ItemInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ItemInfo::Swap(ItemInfo* other) {
  if (other != this) {
    std::swap(itemid_, other->itemid_);
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ItemInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ItemInfo_descriptor_;
  metadata.reflection = ItemInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MatchSignInfo::kMatchConfigIdFieldNumber;
const int MatchSignInfo::kMatchNameFieldNumber;
const int MatchSignInfo::kMatchBigNameFieldNumber;
const int MatchSignInfo::kMatchDescFieldNumber;
const int MatchSignInfo::kMaxPlayerFieldNumber;
const int MatchSignInfo::kCurrentPlayerNumFieldNumber;
const int MatchSignInfo::kSignBeginTimeFieldNumber;
const int MatchSignInfo::kDuringTimeFieldNumber;
const int MatchSignInfo::kMatchBeginTimeFieldNumber;
const int MatchSignInfo::kRewardInfosFieldNumber;
const int MatchSignInfo::kCostInfosFieldNumber;
const int MatchSignInfo::kRandIdFieldNumber;
const int MatchSignInfo::kSelfSignUpFieldNumber;
const int MatchSignInfo::kTimesFieldNumber;
const int MatchSignInfo::kFromFieldNumber;
const int MatchSignInfo::kToFieldNumber;
const int MatchSignInfo::kIsStarFieldNumber;
#endif  // !_MSC_VER

MatchSignInfo::MatchSignInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MatchSignInfo::InitAsDefaultInstance() {
}

MatchSignInfo::MatchSignInfo(const MatchSignInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MatchSignInfo::SharedCtor() {
  _cached_size_ = 0;
  matchconfigid_ = 0;
  matchname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  matchbigname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  matchdesc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  maxplayer_ = 0;
  currentplayernum_ = 0;
  signbegintime_ = GOOGLE_LONGLONG(0);
  duringtime_ = GOOGLE_LONGLONG(0);
  matchbegintime_ = GOOGLE_LONGLONG(0);
  randid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  selfsignup_ = 0;
  times_ = 0;
  from_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  to_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  isstar_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MatchSignInfo::~MatchSignInfo() {
  SharedDtor();
}

void MatchSignInfo::SharedDtor() {
  if (matchname_ != &::google::protobuf::internal::kEmptyString) {
    delete matchname_;
  }
  if (matchbigname_ != &::google::protobuf::internal::kEmptyString) {
    delete matchbigname_;
  }
  if (matchdesc_ != &::google::protobuf::internal::kEmptyString) {
    delete matchdesc_;
  }
  if (randid_ != &::google::protobuf::internal::kEmptyString) {
    delete randid_;
  }
  if (from_ != &::google::protobuf::internal::kEmptyString) {
    delete from_;
  }
  if (to_ != &::google::protobuf::internal::kEmptyString) {
    delete to_;
  }
  if (this != default_instance_) {
  }
}

void MatchSignInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MatchSignInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MatchSignInfo_descriptor_;
}

const MatchSignInfo& MatchSignInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgMatch_2eproto();
  return *default_instance_;
}

MatchSignInfo* MatchSignInfo::default_instance_ = NULL;

MatchSignInfo* MatchSignInfo::New() const {
  return new MatchSignInfo;
}

void MatchSignInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    matchconfigid_ = 0;
    if (has_matchname()) {
      if (matchname_ != &::google::protobuf::internal::kEmptyString) {
        matchname_->clear();
      }
    }
    if (has_matchbigname()) {
      if (matchbigname_ != &::google::protobuf::internal::kEmptyString) {
        matchbigname_->clear();
      }
    }
    if (has_matchdesc()) {
      if (matchdesc_ != &::google::protobuf::internal::kEmptyString) {
        matchdesc_->clear();
      }
    }
    maxplayer_ = 0;
    currentplayernum_ = 0;
    signbegintime_ = GOOGLE_LONGLONG(0);
    duringtime_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    matchbegintime_ = GOOGLE_LONGLONG(0);
    if (has_randid()) {
      if (randid_ != &::google::protobuf::internal::kEmptyString) {
        randid_->clear();
      }
    }
    selfsignup_ = 0;
    times_ = 0;
    if (has_from()) {
      if (from_ != &::google::protobuf::internal::kEmptyString) {
        from_->clear();
      }
    }
    if (has_to()) {
      if (to_ != &::google::protobuf::internal::kEmptyString) {
        to_->clear();
      }
    }
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    isstar_ = 0;
  }
  rewardinfos_.Clear();
  costinfos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MatchSignInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 matchConfigId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &matchconfigid_)));
          set_has_matchconfigid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_matchName;
        break;
      }

      // required string matchName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_matchName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_matchname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->matchname().data(), this->matchname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_matchBigName;
        break;
      }

      // required string matchBigName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_matchBigName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_matchbigname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->matchbigname().data(), this->matchbigname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_matchDesc;
        break;
      }

      // required string matchDesc = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_matchDesc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_matchdesc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->matchdesc().data(), this->matchdesc().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_maxPlayer;
        break;
      }

      // required int32 maxPlayer = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_maxPlayer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxplayer_)));
          set_has_maxplayer();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_currentPlayerNum;
        break;
      }

      // required int32 currentPlayerNum = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_currentPlayerNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &currentplayernum_)));
          set_has_currentplayernum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_signBeginTime;
        break;
      }

      // required int64 signBeginTime = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_signBeginTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &signbegintime_)));
          set_has_signbegintime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_duringTime;
        break;
      }

      // required int64 duringTime = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_duringTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &duringtime_)));
          set_has_duringtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_matchBeginTime;
        break;
      }

      // required int64 matchBeginTime = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_matchBeginTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &matchbegintime_)));
          set_has_matchbegintime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_rewardInfos;
        break;
      }

      // repeated .ProtoNet.ItemInfo rewardInfos = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rewardInfos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rewardinfos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_rewardInfos;
        if (input->ExpectTag(90)) goto parse_costInfos;
        break;
      }

      // repeated .ProtoNet.ItemInfo costInfos = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_costInfos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_costinfos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_costInfos;
        if (input->ExpectTag(98)) goto parse_randId;
        break;
      }

      // required string randId = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_randId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_randid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->randid().data(), this->randid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_selfSignUp;
        break;
      }

      // optional int32 selfSignUp = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_selfSignUp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &selfsignup_)));
          set_has_selfsignup();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_times;
        break;
      }

      // required int32 times = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &times_)));
          set_has_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_from;
        break;
      }

      // required string from = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_from:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_from()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->from().data(), this->from().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_to;
        break;
      }

      // required string to = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_to:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_to()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->to().data(), this->to().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_isStar;
        break;
      }

      // required int32 isStar = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isStar:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &isstar_)));
          set_has_isstar();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MatchSignInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 matchConfigId = 1;
  if (has_matchconfigid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->matchconfigid(), output);
  }

  // required string matchName = 2;
  if (has_matchname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->matchname().data(), this->matchname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->matchname(), output);
  }

  // required string matchBigName = 3;
  if (has_matchbigname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->matchbigname().data(), this->matchbigname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->matchbigname(), output);
  }

  // required string matchDesc = 4;
  if (has_matchdesc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->matchdesc().data(), this->matchdesc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->matchdesc(), output);
  }

  // required int32 maxPlayer = 5;
  if (has_maxplayer()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->maxplayer(), output);
  }

  // required int32 currentPlayerNum = 6;
  if (has_currentplayernum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->currentplayernum(), output);
  }

  // required int64 signBeginTime = 7;
  if (has_signbegintime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->signbegintime(), output);
  }

  // required int64 duringTime = 8;
  if (has_duringtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->duringtime(), output);
  }

  // required int64 matchBeginTime = 9;
  if (has_matchbegintime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->matchbegintime(), output);
  }

  // repeated .ProtoNet.ItemInfo rewardInfos = 10;
  for (int i = 0; i < this->rewardinfos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->rewardinfos(i), output);
  }

  // repeated .ProtoNet.ItemInfo costInfos = 11;
  for (int i = 0; i < this->costinfos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->costinfos(i), output);
  }

  // required string randId = 12;
  if (has_randid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->randid().data(), this->randid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->randid(), output);
  }

  // optional int32 selfSignUp = 13;
  if (has_selfsignup()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->selfsignup(), output);
  }

  // required int32 times = 14;
  if (has_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->times(), output);
  }

  // required string from = 15;
  if (has_from()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->from().data(), this->from().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      15, this->from(), output);
  }

  // required string to = 16;
  if (has_to()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->to().data(), this->to().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      16, this->to(), output);
  }

  // required int32 isStar = 17;
  if (has_isstar()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->isstar(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MatchSignInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 matchConfigId = 1;
  if (has_matchconfigid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->matchconfigid(), target);
  }

  // required string matchName = 2;
  if (has_matchname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->matchname().data(), this->matchname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->matchname(), target);
  }

  // required string matchBigName = 3;
  if (has_matchbigname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->matchbigname().data(), this->matchbigname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->matchbigname(), target);
  }

  // required string matchDesc = 4;
  if (has_matchdesc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->matchdesc().data(), this->matchdesc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->matchdesc(), target);
  }

  // required int32 maxPlayer = 5;
  if (has_maxplayer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->maxplayer(), target);
  }

  // required int32 currentPlayerNum = 6;
  if (has_currentplayernum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->currentplayernum(), target);
  }

  // required int64 signBeginTime = 7;
  if (has_signbegintime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->signbegintime(), target);
  }

  // required int64 duringTime = 8;
  if (has_duringtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->duringtime(), target);
  }

  // required int64 matchBeginTime = 9;
  if (has_matchbegintime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->matchbegintime(), target);
  }

  // repeated .ProtoNet.ItemInfo rewardInfos = 10;
  for (int i = 0; i < this->rewardinfos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->rewardinfos(i), target);
  }

  // repeated .ProtoNet.ItemInfo costInfos = 11;
  for (int i = 0; i < this->costinfos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->costinfos(i), target);
  }

  // required string randId = 12;
  if (has_randid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->randid().data(), this->randid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->randid(), target);
  }

  // optional int32 selfSignUp = 13;
  if (has_selfsignup()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->selfsignup(), target);
  }

  // required int32 times = 14;
  if (has_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->times(), target);
  }

  // required string from = 15;
  if (has_from()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->from().data(), this->from().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->from(), target);
  }

  // required string to = 16;
  if (has_to()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->to().data(), this->to().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->to(), target);
  }

  // required int32 isStar = 17;
  if (has_isstar()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->isstar(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MatchSignInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 matchConfigId = 1;
    if (has_matchconfigid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->matchconfigid());
    }

    // required string matchName = 2;
    if (has_matchname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->matchname());
    }

    // required string matchBigName = 3;
    if (has_matchbigname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->matchbigname());
    }

    // required string matchDesc = 4;
    if (has_matchdesc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->matchdesc());
    }

    // required int32 maxPlayer = 5;
    if (has_maxplayer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxplayer());
    }

    // required int32 currentPlayerNum = 6;
    if (has_currentplayernum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->currentplayernum());
    }

    // required int64 signBeginTime = 7;
    if (has_signbegintime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->signbegintime());
    }

    // required int64 duringTime = 8;
    if (has_duringtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->duringtime());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int64 matchBeginTime = 9;
    if (has_matchbegintime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->matchbegintime());
    }

    // required string randId = 12;
    if (has_randid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->randid());
    }

    // optional int32 selfSignUp = 13;
    if (has_selfsignup()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->selfsignup());
    }

    // required int32 times = 14;
    if (has_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->times());
    }

    // required string from = 15;
    if (has_from()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->from());
    }

    // required string to = 16;
    if (has_to()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->to());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // required int32 isStar = 17;
    if (has_isstar()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->isstar());
    }

  }
  // repeated .ProtoNet.ItemInfo rewardInfos = 10;
  total_size += 1 * this->rewardinfos_size();
  for (int i = 0; i < this->rewardinfos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rewardinfos(i));
  }

  // repeated .ProtoNet.ItemInfo costInfos = 11;
  total_size += 1 * this->costinfos_size();
  for (int i = 0; i < this->costinfos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->costinfos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MatchSignInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MatchSignInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MatchSignInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MatchSignInfo::MergeFrom(const MatchSignInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  rewardinfos_.MergeFrom(from.rewardinfos_);
  costinfos_.MergeFrom(from.costinfos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_matchconfigid()) {
      set_matchconfigid(from.matchconfigid());
    }
    if (from.has_matchname()) {
      set_matchname(from.matchname());
    }
    if (from.has_matchbigname()) {
      set_matchbigname(from.matchbigname());
    }
    if (from.has_matchdesc()) {
      set_matchdesc(from.matchdesc());
    }
    if (from.has_maxplayer()) {
      set_maxplayer(from.maxplayer());
    }
    if (from.has_currentplayernum()) {
      set_currentplayernum(from.currentplayernum());
    }
    if (from.has_signbegintime()) {
      set_signbegintime(from.signbegintime());
    }
    if (from.has_duringtime()) {
      set_duringtime(from.duringtime());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_matchbegintime()) {
      set_matchbegintime(from.matchbegintime());
    }
    if (from.has_randid()) {
      set_randid(from.randid());
    }
    if (from.has_selfsignup()) {
      set_selfsignup(from.selfsignup());
    }
    if (from.has_times()) {
      set_times(from.times());
    }
    if (from.has_from()) {
      set_from(from.from());
    }
    if (from.has_to()) {
      set_to(from.to());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_isstar()) {
      set_isstar(from.isstar());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MatchSignInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MatchSignInfo::CopyFrom(const MatchSignInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MatchSignInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0001e9ff) != 0x0001e9ff) return false;

  for (int i = 0; i < rewardinfos_size(); i++) {
    if (!this->rewardinfos(i).IsInitialized()) return false;
  }
  for (int i = 0; i < costinfos_size(); i++) {
    if (!this->costinfos(i).IsInitialized()) return false;
  }
  return true;
}

void MatchSignInfo::Swap(MatchSignInfo* other) {
  if (other != this) {
    std::swap(matchconfigid_, other->matchconfigid_);
    std::swap(matchname_, other->matchname_);
    std::swap(matchbigname_, other->matchbigname_);
    std::swap(matchdesc_, other->matchdesc_);
    std::swap(maxplayer_, other->maxplayer_);
    std::swap(currentplayernum_, other->currentplayernum_);
    std::swap(signbegintime_, other->signbegintime_);
    std::swap(duringtime_, other->duringtime_);
    std::swap(matchbegintime_, other->matchbegintime_);
    rewardinfos_.Swap(&other->rewardinfos_);
    costinfos_.Swap(&other->costinfos_);
    std::swap(randid_, other->randid_);
    std::swap(selfsignup_, other->selfsignup_);
    std::swap(times_, other->times_);
    std::swap(from_, other->from_);
    std::swap(to_, other->to_);
    std::swap(isstar_, other->isstar_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MatchSignInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MatchSignInfo_descriptor_;
  metadata.reflection = MatchSignInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqGetMatchList::kGameIdFieldNumber;
#endif  // !_MSC_VER

ReqGetMatchList::ReqGetMatchList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqGetMatchList::InitAsDefaultInstance() {
}

ReqGetMatchList::ReqGetMatchList(const ReqGetMatchList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqGetMatchList::SharedCtor() {
  _cached_size_ = 0;
  gameid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqGetMatchList::~ReqGetMatchList() {
  SharedDtor();
}

void ReqGetMatchList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqGetMatchList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqGetMatchList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqGetMatchList_descriptor_;
}

const ReqGetMatchList& ReqGetMatchList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgMatch_2eproto();
  return *default_instance_;
}

ReqGetMatchList* ReqGetMatchList::default_instance_ = NULL;

ReqGetMatchList* ReqGetMatchList::New() const {
  return new ReqGetMatchList;
}

void ReqGetMatchList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gameid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqGetMatchList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 gameId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqGetMatchList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 gameId = 1;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->gameid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqGetMatchList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 gameId = 1;
  if (has_gameid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->gameid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqGetMatchList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 gameId = 1;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gameid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqGetMatchList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqGetMatchList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqGetMatchList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqGetMatchList::MergeFrom(const ReqGetMatchList& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqGetMatchList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqGetMatchList::CopyFrom(const ReqGetMatchList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqGetMatchList::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ReqGetMatchList::Swap(ReqGetMatchList* other) {
  if (other != this) {
    std::swap(gameid_, other->gameid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqGetMatchList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqGetMatchList_descriptor_;
  metadata.reflection = ReqGetMatchList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResGetMatchList::kResultFieldNumber;
const int ResGetMatchList::kMatchSignInfosFieldNumber;
#endif  // !_MSC_VER

ResGetMatchList::ResGetMatchList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResGetMatchList::InitAsDefaultInstance() {
  result_ = const_cast< ::ProtoNet::ResponseResult*>(&::ProtoNet::ResponseResult::default_instance());
}

ResGetMatchList::ResGetMatchList(const ResGetMatchList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResGetMatchList::SharedCtor() {
  _cached_size_ = 0;
  result_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResGetMatchList::~ResGetMatchList() {
  SharedDtor();
}

void ResGetMatchList::SharedDtor() {
  if (this != default_instance_) {
    delete result_;
  }
}

void ResGetMatchList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResGetMatchList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResGetMatchList_descriptor_;
}

const ResGetMatchList& ResGetMatchList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgMatch_2eproto();
  return *default_instance_;
}

ResGetMatchList* ResGetMatchList::default_instance_ = NULL;

ResGetMatchList* ResGetMatchList::New() const {
  return new ResGetMatchList;
}

void ResGetMatchList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_result()) {
      if (result_ != NULL) result_->::ProtoNet::ResponseResult::Clear();
    }
  }
  matchsigninfos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResGetMatchList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ProtoNet.ResponseResult result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_matchSignInfos;
        break;
      }

      // repeated .ProtoNet.MatchSignInfo matchSignInfos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_matchSignInfos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_matchsigninfos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_matchSignInfos;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResGetMatchList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .ProtoNet.ResponseResult result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->result(), output);
  }

  // repeated .ProtoNet.MatchSignInfo matchSignInfos = 2;
  for (int i = 0; i < this->matchsigninfos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->matchsigninfos(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResGetMatchList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .ProtoNet.ResponseResult result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->result(), target);
  }

  // repeated .ProtoNet.MatchSignInfo matchSignInfos = 2;
  for (int i = 0; i < this->matchsigninfos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->matchsigninfos(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResGetMatchList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ProtoNet.ResponseResult result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->result());
    }

  }
  // repeated .ProtoNet.MatchSignInfo matchSignInfos = 2;
  total_size += 1 * this->matchsigninfos_size();
  for (int i = 0; i < this->matchsigninfos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->matchsigninfos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResGetMatchList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResGetMatchList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResGetMatchList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResGetMatchList::MergeFrom(const ResGetMatchList& from) {
  GOOGLE_CHECK_NE(&from, this);
  matchsigninfos_.MergeFrom(from.matchsigninfos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      mutable_result()->::ProtoNet::ResponseResult::MergeFrom(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResGetMatchList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResGetMatchList::CopyFrom(const ResGetMatchList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResGetMatchList::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_result()) {
    if (!this->result().IsInitialized()) return false;
  }
  for (int i = 0; i < matchsigninfos_size(); i++) {
    if (!this->matchsigninfos(i).IsInitialized()) return false;
  }
  return true;
}

void ResGetMatchList::Swap(ResGetMatchList* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    matchsigninfos_.Swap(&other->matchsigninfos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResGetMatchList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResGetMatchList_descriptor_;
  metadata.reflection = ResGetMatchList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqSignUpMatch::kMatchIdFieldNumber;
const int ReqSignUpMatch::kRandIdFieldNumber;
#endif  // !_MSC_VER

ReqSignUpMatch::ReqSignUpMatch()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqSignUpMatch::InitAsDefaultInstance() {
}

ReqSignUpMatch::ReqSignUpMatch(const ReqSignUpMatch& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqSignUpMatch::SharedCtor() {
  _cached_size_ = 0;
  matchid_ = 0;
  randid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqSignUpMatch::~ReqSignUpMatch() {
  SharedDtor();
}

void ReqSignUpMatch::SharedDtor() {
  if (randid_ != &::google::protobuf::internal::kEmptyString) {
    delete randid_;
  }
  if (this != default_instance_) {
  }
}

void ReqSignUpMatch::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqSignUpMatch::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqSignUpMatch_descriptor_;
}

const ReqSignUpMatch& ReqSignUpMatch::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgMatch_2eproto();
  return *default_instance_;
}

ReqSignUpMatch* ReqSignUpMatch::default_instance_ = NULL;

ReqSignUpMatch* ReqSignUpMatch::New() const {
  return new ReqSignUpMatch;
}

void ReqSignUpMatch::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    matchid_ = 0;
    if (has_randid()) {
      if (randid_ != &::google::protobuf::internal::kEmptyString) {
        randid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqSignUpMatch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 matchId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &matchid_)));
          set_has_matchid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_randId;
        break;
      }

      // required string randId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_randId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_randid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->randid().data(), this->randid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqSignUpMatch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 matchId = 1;
  if (has_matchid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->matchid(), output);
  }

  // required string randId = 2;
  if (has_randid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->randid().data(), this->randid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->randid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqSignUpMatch::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 matchId = 1;
  if (has_matchid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->matchid(), target);
  }

  // required string randId = 2;
  if (has_randid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->randid().data(), this->randid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->randid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqSignUpMatch::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 matchId = 1;
    if (has_matchid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->matchid());
    }

    // required string randId = 2;
    if (has_randid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->randid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqSignUpMatch::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqSignUpMatch* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqSignUpMatch*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqSignUpMatch::MergeFrom(const ReqSignUpMatch& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_matchid()) {
      set_matchid(from.matchid());
    }
    if (from.has_randid()) {
      set_randid(from.randid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqSignUpMatch::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqSignUpMatch::CopyFrom(const ReqSignUpMatch& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqSignUpMatch::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ReqSignUpMatch::Swap(ReqSignUpMatch* other) {
  if (other != this) {
    std::swap(matchid_, other->matchid_);
    std::swap(randid_, other->randid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqSignUpMatch::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqSignUpMatch_descriptor_;
  metadata.reflection = ReqSignUpMatch_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResSignUpMatch::kResultFieldNumber;
const int ResSignUpMatch::kMatchConfigIdFieldNumber;
const int ResSignUpMatch::kRandIdFieldNumber;
#endif  // !_MSC_VER

ResSignUpMatch::ResSignUpMatch()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResSignUpMatch::InitAsDefaultInstance() {
  result_ = const_cast< ::ProtoNet::ResponseResult*>(&::ProtoNet::ResponseResult::default_instance());
}

ResSignUpMatch::ResSignUpMatch(const ResSignUpMatch& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResSignUpMatch::SharedCtor() {
  _cached_size_ = 0;
  result_ = NULL;
  matchconfigid_ = 0;
  randid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResSignUpMatch::~ResSignUpMatch() {
  SharedDtor();
}

void ResSignUpMatch::SharedDtor() {
  if (randid_ != &::google::protobuf::internal::kEmptyString) {
    delete randid_;
  }
  if (this != default_instance_) {
    delete result_;
  }
}

void ResSignUpMatch::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResSignUpMatch::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResSignUpMatch_descriptor_;
}

const ResSignUpMatch& ResSignUpMatch::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgMatch_2eproto();
  return *default_instance_;
}

ResSignUpMatch* ResSignUpMatch::default_instance_ = NULL;

ResSignUpMatch* ResSignUpMatch::New() const {
  return new ResSignUpMatch;
}

void ResSignUpMatch::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_result()) {
      if (result_ != NULL) result_->::ProtoNet::ResponseResult::Clear();
    }
    matchconfigid_ = 0;
    if (has_randid()) {
      if (randid_ != &::google::protobuf::internal::kEmptyString) {
        randid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResSignUpMatch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ProtoNet.ResponseResult result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_matchConfigId;
        break;
      }

      // optional int32 matchConfigId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_matchConfigId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &matchconfigid_)));
          set_has_matchconfigid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_randId;
        break;
      }

      // optional string randId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_randId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_randid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->randid().data(), this->randid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResSignUpMatch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .ProtoNet.ResponseResult result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->result(), output);
  }

  // optional int32 matchConfigId = 2;
  if (has_matchconfigid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->matchconfigid(), output);
  }

  // optional string randId = 3;
  if (has_randid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->randid().data(), this->randid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->randid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResSignUpMatch::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .ProtoNet.ResponseResult result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->result(), target);
  }

  // optional int32 matchConfigId = 2;
  if (has_matchconfigid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->matchconfigid(), target);
  }

  // optional string randId = 3;
  if (has_randid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->randid().data(), this->randid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->randid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResSignUpMatch::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ProtoNet.ResponseResult result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->result());
    }

    // optional int32 matchConfigId = 2;
    if (has_matchconfigid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->matchconfigid());
    }

    // optional string randId = 3;
    if (has_randid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->randid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResSignUpMatch::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResSignUpMatch* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResSignUpMatch*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResSignUpMatch::MergeFrom(const ResSignUpMatch& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      mutable_result()->::ProtoNet::ResponseResult::MergeFrom(from.result());
    }
    if (from.has_matchconfigid()) {
      set_matchconfigid(from.matchconfigid());
    }
    if (from.has_randid()) {
      set_randid(from.randid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResSignUpMatch::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResSignUpMatch::CopyFrom(const ResSignUpMatch& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResSignUpMatch::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_result()) {
    if (!this->result().IsInitialized()) return false;
  }
  return true;
}

void ResSignUpMatch::Swap(ResSignUpMatch* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(matchconfigid_, other->matchconfigid_);
    std::swap(randid_, other->randid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResSignUpMatch::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResSignUpMatch_descriptor_;
  metadata.reflection = ResSignUpMatch_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResNotifyEnterMatch::kRoomIdFieldNumber;
const int ResNotifyEnterMatch::kRoomNameFieldNumber;
const int ResNotifyEnterMatch::kRoomerUniqueIdFieldNumber;
const int ResNotifyEnterMatch::kRoomerNickNameFieldNumber;
const int ResNotifyEnterMatch::kRoomerHeadImgFieldNumber;
const int ResNotifyEnterMatch::kRoomerHeadTypeFieldNumber;
const int ResNotifyEnterMatch::kRoomTypeFieldNumber;
const int ResNotifyEnterMatch::kServerInfoFieldNumber;
const int ResNotifyEnterMatch::kTimesFieldNumber;
const int ResNotifyEnterMatch::kGameIdFieldNumber;
const int ResNotifyEnterMatch::kTimesTypeFieldNumber;
const int ResNotifyEnterMatch::kFromFieldNumber;
const int ResNotifyEnterMatch::kToFieldNumber;
#endif  // !_MSC_VER

ResNotifyEnterMatch::ResNotifyEnterMatch()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResNotifyEnterMatch::InitAsDefaultInstance() {
  serverinfo_ = const_cast< ::ProtoNet::ServerInfoIpsSafeDetail*>(&::ProtoNet::ServerInfoIpsSafeDetail::default_instance());
}

ResNotifyEnterMatch::ResNotifyEnterMatch(const ResNotifyEnterMatch& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResNotifyEnterMatch::SharedCtor() {
  _cached_size_ = 0;
  roomid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  roomname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  roomeruniqueid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  roomernickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  roomerheadimg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  roomerheadtype_ = 0;
  roomtype_ = 0;
  serverinfo_ = NULL;
  times_ = 0;
  gameid_ = 0;
  timestype_ = 0;
  from_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  to_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResNotifyEnterMatch::~ResNotifyEnterMatch() {
  SharedDtor();
}

void ResNotifyEnterMatch::SharedDtor() {
  if (roomid_ != &::google::protobuf::internal::kEmptyString) {
    delete roomid_;
  }
  if (roomname_ != &::google::protobuf::internal::kEmptyString) {
    delete roomname_;
  }
  if (roomeruniqueid_ != &::google::protobuf::internal::kEmptyString) {
    delete roomeruniqueid_;
  }
  if (roomernickname_ != &::google::protobuf::internal::kEmptyString) {
    delete roomernickname_;
  }
  if (roomerheadimg_ != &::google::protobuf::internal::kEmptyString) {
    delete roomerheadimg_;
  }
  if (from_ != &::google::protobuf::internal::kEmptyString) {
    delete from_;
  }
  if (to_ != &::google::protobuf::internal::kEmptyString) {
    delete to_;
  }
  if (this != default_instance_) {
    delete serverinfo_;
  }
}

void ResNotifyEnterMatch::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResNotifyEnterMatch::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResNotifyEnterMatch_descriptor_;
}

const ResNotifyEnterMatch& ResNotifyEnterMatch::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgMatch_2eproto();
  return *default_instance_;
}

ResNotifyEnterMatch* ResNotifyEnterMatch::default_instance_ = NULL;

ResNotifyEnterMatch* ResNotifyEnterMatch::New() const {
  return new ResNotifyEnterMatch;
}

void ResNotifyEnterMatch::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_roomid()) {
      if (roomid_ != &::google::protobuf::internal::kEmptyString) {
        roomid_->clear();
      }
    }
    if (has_roomname()) {
      if (roomname_ != &::google::protobuf::internal::kEmptyString) {
        roomname_->clear();
      }
    }
    if (has_roomeruniqueid()) {
      if (roomeruniqueid_ != &::google::protobuf::internal::kEmptyString) {
        roomeruniqueid_->clear();
      }
    }
    if (has_roomernickname()) {
      if (roomernickname_ != &::google::protobuf::internal::kEmptyString) {
        roomernickname_->clear();
      }
    }
    if (has_roomerheadimg()) {
      if (roomerheadimg_ != &::google::protobuf::internal::kEmptyString) {
        roomerheadimg_->clear();
      }
    }
    roomerheadtype_ = 0;
    roomtype_ = 0;
    if (has_serverinfo()) {
      if (serverinfo_ != NULL) serverinfo_->::ProtoNet::ServerInfoIpsSafeDetail::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    times_ = 0;
    gameid_ = 0;
    timestype_ = 0;
    if (has_from()) {
      if (from_ != &::google::protobuf::internal::kEmptyString) {
        from_->clear();
      }
    }
    if (has_to()) {
      if (to_ != &::google::protobuf::internal::kEmptyString) {
        to_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResNotifyEnterMatch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string roomId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_roomid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->roomid().data(), this->roomid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_roomName;
        break;
      }

      // required string roomName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_roomName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_roomname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->roomname().data(), this->roomname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_roomerUniqueId;
        break;
      }

      // required string roomerUniqueId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_roomerUniqueId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_roomeruniqueid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->roomeruniqueid().data(), this->roomeruniqueid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_roomerNickName;
        break;
      }

      // required string roomerNickName = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_roomerNickName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_roomernickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->roomernickname().data(), this->roomernickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_roomerHeadImg;
        break;
      }

      // required string roomerHeadImg = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_roomerHeadImg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_roomerheadimg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->roomerheadimg().data(), this->roomerheadimg().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_roomerHeadType;
        break;
      }

      // required int32 roomerHeadType = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roomerHeadType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomerheadtype_)));
          set_has_roomerheadtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_roomType;
        break;
      }

      // required int32 roomType = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roomType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomtype_)));
          set_has_roomtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_serverInfo;
        break;
      }

      // required .ProtoNet.ServerInfoIpsSafeDetail serverInfo = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_serverInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_serverinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_times;
        break;
      }

      // required int32 times = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &times_)));
          set_has_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_gameId;
        break;
      }

      // required int32 gameId = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gameId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_timesType;
        break;
      }

      // required int32 timesType = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_timesType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &timestype_)));
          set_has_timestype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_from;
        break;
      }

      // required string from = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_from:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_from()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->from().data(), this->from().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_to;
        break;
      }

      // required string to = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_to:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_to()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->to().data(), this->to().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResNotifyEnterMatch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string roomId = 1;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->roomid().data(), this->roomid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->roomid(), output);
  }

  // required string roomName = 2;
  if (has_roomname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->roomname().data(), this->roomname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->roomname(), output);
  }

  // required string roomerUniqueId = 3;
  if (has_roomeruniqueid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->roomeruniqueid().data(), this->roomeruniqueid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->roomeruniqueid(), output);
  }

  // required string roomerNickName = 4;
  if (has_roomernickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->roomernickname().data(), this->roomernickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->roomernickname(), output);
  }

  // required string roomerHeadImg = 5;
  if (has_roomerheadimg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->roomerheadimg().data(), this->roomerheadimg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->roomerheadimg(), output);
  }

  // required int32 roomerHeadType = 6;
  if (has_roomerheadtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->roomerheadtype(), output);
  }

  // required int32 roomType = 7;
  if (has_roomtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->roomtype(), output);
  }

  // required .ProtoNet.ServerInfoIpsSafeDetail serverInfo = 8;
  if (has_serverinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->serverinfo(), output);
  }

  // required int32 times = 9;
  if (has_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->times(), output);
  }

  // required int32 gameId = 10;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->gameid(), output);
  }

  // required int32 timesType = 11;
  if (has_timestype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->timestype(), output);
  }

  // required string from = 12;
  if (has_from()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->from().data(), this->from().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->from(), output);
  }

  // required string to = 13;
  if (has_to()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->to().data(), this->to().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      13, this->to(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResNotifyEnterMatch::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string roomId = 1;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->roomid().data(), this->roomid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->roomid(), target);
  }

  // required string roomName = 2;
  if (has_roomname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->roomname().data(), this->roomname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->roomname(), target);
  }

  // required string roomerUniqueId = 3;
  if (has_roomeruniqueid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->roomeruniqueid().data(), this->roomeruniqueid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->roomeruniqueid(), target);
  }

  // required string roomerNickName = 4;
  if (has_roomernickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->roomernickname().data(), this->roomernickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->roomernickname(), target);
  }

  // required string roomerHeadImg = 5;
  if (has_roomerheadimg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->roomerheadimg().data(), this->roomerheadimg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->roomerheadimg(), target);
  }

  // required int32 roomerHeadType = 6;
  if (has_roomerheadtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->roomerheadtype(), target);
  }

  // required int32 roomType = 7;
  if (has_roomtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->roomtype(), target);
  }

  // required .ProtoNet.ServerInfoIpsSafeDetail serverInfo = 8;
  if (has_serverinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->serverinfo(), target);
  }

  // required int32 times = 9;
  if (has_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->times(), target);
  }

  // required int32 gameId = 10;
  if (has_gameid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->gameid(), target);
  }

  // required int32 timesType = 11;
  if (has_timestype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->timestype(), target);
  }

  // required string from = 12;
  if (has_from()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->from().data(), this->from().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->from(), target);
  }

  // required string to = 13;
  if (has_to()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->to().data(), this->to().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->to(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResNotifyEnterMatch::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string roomId = 1;
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->roomid());
    }

    // required string roomName = 2;
    if (has_roomname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->roomname());
    }

    // required string roomerUniqueId = 3;
    if (has_roomeruniqueid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->roomeruniqueid());
    }

    // required string roomerNickName = 4;
    if (has_roomernickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->roomernickname());
    }

    // required string roomerHeadImg = 5;
    if (has_roomerheadimg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->roomerheadimg());
    }

    // required int32 roomerHeadType = 6;
    if (has_roomerheadtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roomerheadtype());
    }

    // required int32 roomType = 7;
    if (has_roomtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roomtype());
    }

    // required .ProtoNet.ServerInfoIpsSafeDetail serverInfo = 8;
    if (has_serverinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->serverinfo());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int32 times = 9;
    if (has_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->times());
    }

    // required int32 gameId = 10;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gameid());
    }

    // required int32 timesType = 11;
    if (has_timestype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->timestype());
    }

    // required string from = 12;
    if (has_from()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->from());
    }

    // required string to = 13;
    if (has_to()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->to());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResNotifyEnterMatch::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResNotifyEnterMatch* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResNotifyEnterMatch*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResNotifyEnterMatch::MergeFrom(const ResNotifyEnterMatch& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
    if (from.has_roomname()) {
      set_roomname(from.roomname());
    }
    if (from.has_roomeruniqueid()) {
      set_roomeruniqueid(from.roomeruniqueid());
    }
    if (from.has_roomernickname()) {
      set_roomernickname(from.roomernickname());
    }
    if (from.has_roomerheadimg()) {
      set_roomerheadimg(from.roomerheadimg());
    }
    if (from.has_roomerheadtype()) {
      set_roomerheadtype(from.roomerheadtype());
    }
    if (from.has_roomtype()) {
      set_roomtype(from.roomtype());
    }
    if (from.has_serverinfo()) {
      mutable_serverinfo()->::ProtoNet::ServerInfoIpsSafeDetail::MergeFrom(from.serverinfo());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_times()) {
      set_times(from.times());
    }
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_timestype()) {
      set_timestype(from.timestype());
    }
    if (from.has_from()) {
      set_from(from.from());
    }
    if (from.has_to()) {
      set_to(from.to());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResNotifyEnterMatch::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResNotifyEnterMatch::CopyFrom(const ResNotifyEnterMatch& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResNotifyEnterMatch::IsInitialized() const {
  if ((_has_bits_[0] & 0x00001fff) != 0x00001fff) return false;

  return true;
}

void ResNotifyEnterMatch::Swap(ResNotifyEnterMatch* other) {
  if (other != this) {
    std::swap(roomid_, other->roomid_);
    std::swap(roomname_, other->roomname_);
    std::swap(roomeruniqueid_, other->roomeruniqueid_);
    std::swap(roomernickname_, other->roomernickname_);
    std::swap(roomerheadimg_, other->roomerheadimg_);
    std::swap(roomerheadtype_, other->roomerheadtype_);
    std::swap(roomtype_, other->roomtype_);
    std::swap(serverinfo_, other->serverinfo_);
    std::swap(times_, other->times_);
    std::swap(gameid_, other->gameid_);
    std::swap(timestype_, other->timestype_);
    std::swap(from_, other->from_);
    std::swap(to_, other->to_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResNotifyEnterMatch::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResNotifyEnterMatch_descriptor_;
  metadata.reflection = ResNotifyEnterMatch_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqCanleSignMatch::kMatchIdFieldNumber;
const int ReqCanleSignMatch::kRandIdFieldNumber;
#endif  // !_MSC_VER

ReqCanleSignMatch::ReqCanleSignMatch()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqCanleSignMatch::InitAsDefaultInstance() {
}

ReqCanleSignMatch::ReqCanleSignMatch(const ReqCanleSignMatch& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqCanleSignMatch::SharedCtor() {
  _cached_size_ = 0;
  matchid_ = 0;
  randid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqCanleSignMatch::~ReqCanleSignMatch() {
  SharedDtor();
}

void ReqCanleSignMatch::SharedDtor() {
  if (randid_ != &::google::protobuf::internal::kEmptyString) {
    delete randid_;
  }
  if (this != default_instance_) {
  }
}

void ReqCanleSignMatch::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqCanleSignMatch::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqCanleSignMatch_descriptor_;
}

const ReqCanleSignMatch& ReqCanleSignMatch::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgMatch_2eproto();
  return *default_instance_;
}

ReqCanleSignMatch* ReqCanleSignMatch::default_instance_ = NULL;

ReqCanleSignMatch* ReqCanleSignMatch::New() const {
  return new ReqCanleSignMatch;
}

void ReqCanleSignMatch::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    matchid_ = 0;
    if (has_randid()) {
      if (randid_ != &::google::protobuf::internal::kEmptyString) {
        randid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqCanleSignMatch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 matchId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &matchid_)));
          set_has_matchid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_randId;
        break;
      }

      // required string randId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_randId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_randid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->randid().data(), this->randid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqCanleSignMatch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 matchId = 1;
  if (has_matchid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->matchid(), output);
  }

  // required string randId = 2;
  if (has_randid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->randid().data(), this->randid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->randid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqCanleSignMatch::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 matchId = 1;
  if (has_matchid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->matchid(), target);
  }

  // required string randId = 2;
  if (has_randid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->randid().data(), this->randid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->randid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqCanleSignMatch::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 matchId = 1;
    if (has_matchid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->matchid());
    }

    // required string randId = 2;
    if (has_randid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->randid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqCanleSignMatch::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqCanleSignMatch* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqCanleSignMatch*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqCanleSignMatch::MergeFrom(const ReqCanleSignMatch& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_matchid()) {
      set_matchid(from.matchid());
    }
    if (from.has_randid()) {
      set_randid(from.randid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqCanleSignMatch::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqCanleSignMatch::CopyFrom(const ReqCanleSignMatch& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqCanleSignMatch::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ReqCanleSignMatch::Swap(ReqCanleSignMatch* other) {
  if (other != this) {
    std::swap(matchid_, other->matchid_);
    std::swap(randid_, other->randid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqCanleSignMatch::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqCanleSignMatch_descriptor_;
  metadata.reflection = ReqCanleSignMatch_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResCanleSignMatch::kResultFieldNumber;
const int ResCanleSignMatch::kMatchConfigIdFieldNumber;
const int ResCanleSignMatch::kRandIdFieldNumber;
#endif  // !_MSC_VER

ResCanleSignMatch::ResCanleSignMatch()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResCanleSignMatch::InitAsDefaultInstance() {
  result_ = const_cast< ::ProtoNet::ResponseResult*>(&::ProtoNet::ResponseResult::default_instance());
}

ResCanleSignMatch::ResCanleSignMatch(const ResCanleSignMatch& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResCanleSignMatch::SharedCtor() {
  _cached_size_ = 0;
  result_ = NULL;
  matchconfigid_ = 0;
  randid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResCanleSignMatch::~ResCanleSignMatch() {
  SharedDtor();
}

void ResCanleSignMatch::SharedDtor() {
  if (randid_ != &::google::protobuf::internal::kEmptyString) {
    delete randid_;
  }
  if (this != default_instance_) {
    delete result_;
  }
}

void ResCanleSignMatch::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResCanleSignMatch::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResCanleSignMatch_descriptor_;
}

const ResCanleSignMatch& ResCanleSignMatch::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgMatch_2eproto();
  return *default_instance_;
}

ResCanleSignMatch* ResCanleSignMatch::default_instance_ = NULL;

ResCanleSignMatch* ResCanleSignMatch::New() const {
  return new ResCanleSignMatch;
}

void ResCanleSignMatch::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_result()) {
      if (result_ != NULL) result_->::ProtoNet::ResponseResult::Clear();
    }
    matchconfigid_ = 0;
    if (has_randid()) {
      if (randid_ != &::google::protobuf::internal::kEmptyString) {
        randid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResCanleSignMatch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ProtoNet.ResponseResult result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_matchConfigId;
        break;
      }

      // optional int32 matchConfigId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_matchConfigId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &matchconfigid_)));
          set_has_matchconfigid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_randId;
        break;
      }

      // optional string randId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_randId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_randid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->randid().data(), this->randid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResCanleSignMatch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .ProtoNet.ResponseResult result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->result(), output);
  }

  // optional int32 matchConfigId = 2;
  if (has_matchconfigid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->matchconfigid(), output);
  }

  // optional string randId = 3;
  if (has_randid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->randid().data(), this->randid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->randid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResCanleSignMatch::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .ProtoNet.ResponseResult result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->result(), target);
  }

  // optional int32 matchConfigId = 2;
  if (has_matchconfigid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->matchconfigid(), target);
  }

  // optional string randId = 3;
  if (has_randid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->randid().data(), this->randid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->randid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResCanleSignMatch::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ProtoNet.ResponseResult result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->result());
    }

    // optional int32 matchConfigId = 2;
    if (has_matchconfigid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->matchconfigid());
    }

    // optional string randId = 3;
    if (has_randid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->randid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResCanleSignMatch::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResCanleSignMatch* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResCanleSignMatch*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResCanleSignMatch::MergeFrom(const ResCanleSignMatch& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      mutable_result()->::ProtoNet::ResponseResult::MergeFrom(from.result());
    }
    if (from.has_matchconfigid()) {
      set_matchconfigid(from.matchconfigid());
    }
    if (from.has_randid()) {
      set_randid(from.randid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResCanleSignMatch::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResCanleSignMatch::CopyFrom(const ResCanleSignMatch& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResCanleSignMatch::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_result()) {
    if (!this->result().IsInitialized()) return false;
  }
  return true;
}

void ResCanleSignMatch::Swap(ResCanleSignMatch* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(matchconfigid_, other->matchconfigid_);
    std::swap(randid_, other->randid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResCanleSignMatch::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResCanleSignMatch_descriptor_;
  metadata.reflection = ResCanleSignMatch_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResNotifyMatchRoomWattingChange::kRoomIdFieldNumber;
const int ResNotifyMatchRoomWattingChange::kGameIdFieldNumber;
const int ResNotifyMatchRoomWattingChange::kRoomTypeFieldNumber;
const int ResNotifyMatchRoomWattingChange::kTimesTypeFieldNumber;
const int ResNotifyMatchRoomWattingChange::kWaittingFieldNumber;
const int ResNotifyMatchRoomWattingChange::kRandIdFieldNumber;
const int ResNotifyMatchRoomWattingChange::kTimesFieldNumber;
const int ResNotifyMatchRoomWattingChange::kFromFieldNumber;
const int ResNotifyMatchRoomWattingChange::kToFieldNumber;
#endif  // !_MSC_VER

ResNotifyMatchRoomWattingChange::ResNotifyMatchRoomWattingChange()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResNotifyMatchRoomWattingChange::InitAsDefaultInstance() {
}

ResNotifyMatchRoomWattingChange::ResNotifyMatchRoomWattingChange(const ResNotifyMatchRoomWattingChange& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResNotifyMatchRoomWattingChange::SharedCtor() {
  _cached_size_ = 0;
  roomid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  gameid_ = 0;
  roomtype_ = 0;
  timestype_ = 0;
  waitting_ = 0;
  randid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  times_ = 0;
  from_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  to_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResNotifyMatchRoomWattingChange::~ResNotifyMatchRoomWattingChange() {
  SharedDtor();
}

void ResNotifyMatchRoomWattingChange::SharedDtor() {
  if (roomid_ != &::google::protobuf::internal::kEmptyString) {
    delete roomid_;
  }
  if (randid_ != &::google::protobuf::internal::kEmptyString) {
    delete randid_;
  }
  if (from_ != &::google::protobuf::internal::kEmptyString) {
    delete from_;
  }
  if (to_ != &::google::protobuf::internal::kEmptyString) {
    delete to_;
  }
  if (this != default_instance_) {
  }
}

void ResNotifyMatchRoomWattingChange::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResNotifyMatchRoomWattingChange::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResNotifyMatchRoomWattingChange_descriptor_;
}

const ResNotifyMatchRoomWattingChange& ResNotifyMatchRoomWattingChange::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgMatch_2eproto();
  return *default_instance_;
}

ResNotifyMatchRoomWattingChange* ResNotifyMatchRoomWattingChange::default_instance_ = NULL;

ResNotifyMatchRoomWattingChange* ResNotifyMatchRoomWattingChange::New() const {
  return new ResNotifyMatchRoomWattingChange;
}

void ResNotifyMatchRoomWattingChange::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_roomid()) {
      if (roomid_ != &::google::protobuf::internal::kEmptyString) {
        roomid_->clear();
      }
    }
    gameid_ = 0;
    roomtype_ = 0;
    timestype_ = 0;
    waitting_ = 0;
    if (has_randid()) {
      if (randid_ != &::google::protobuf::internal::kEmptyString) {
        randid_->clear();
      }
    }
    times_ = 0;
    if (has_from()) {
      if (from_ != &::google::protobuf::internal::kEmptyString) {
        from_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_to()) {
      if (to_ != &::google::protobuf::internal::kEmptyString) {
        to_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResNotifyMatchRoomWattingChange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string roomId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_roomid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->roomid().data(), this->roomid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gameId;
        break;
      }

      // required int32 gameId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gameId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_roomType;
        break;
      }

      // required int32 roomType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roomType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomtype_)));
          set_has_roomtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_timesType;
        break;
      }

      // required int32 timesType = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_timesType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &timestype_)));
          set_has_timestype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_waitting;
        break;
      }

      // required int32 waitting = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_waitting:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &waitting_)));
          set_has_waitting();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_randId;
        break;
      }

      // required string randId = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_randId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_randid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->randid().data(), this->randid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_times;
        break;
      }

      // required int32 times = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &times_)));
          set_has_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_from;
        break;
      }

      // required string from = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_from:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_from()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->from().data(), this->from().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_to;
        break;
      }

      // required string to = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_to:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_to()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->to().data(), this->to().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResNotifyMatchRoomWattingChange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string roomId = 1;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->roomid().data(), this->roomid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->roomid(), output);
  }

  // required int32 gameId = 2;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->gameid(), output);
  }

  // required int32 roomType = 3;
  if (has_roomtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->roomtype(), output);
  }

  // required int32 timesType = 4;
  if (has_timestype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->timestype(), output);
  }

  // required int32 waitting = 5;
  if (has_waitting()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->waitting(), output);
  }

  // required string randId = 6;
  if (has_randid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->randid().data(), this->randid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->randid(), output);
  }

  // required int32 times = 7;
  if (has_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->times(), output);
  }

  // required string from = 8;
  if (has_from()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->from().data(), this->from().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->from(), output);
  }

  // required string to = 9;
  if (has_to()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->to().data(), this->to().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->to(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResNotifyMatchRoomWattingChange::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string roomId = 1;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->roomid().data(), this->roomid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->roomid(), target);
  }

  // required int32 gameId = 2;
  if (has_gameid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->gameid(), target);
  }

  // required int32 roomType = 3;
  if (has_roomtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->roomtype(), target);
  }

  // required int32 timesType = 4;
  if (has_timestype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->timestype(), target);
  }

  // required int32 waitting = 5;
  if (has_waitting()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->waitting(), target);
  }

  // required string randId = 6;
  if (has_randid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->randid().data(), this->randid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->randid(), target);
  }

  // required int32 times = 7;
  if (has_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->times(), target);
  }

  // required string from = 8;
  if (has_from()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->from().data(), this->from().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->from(), target);
  }

  // required string to = 9;
  if (has_to()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->to().data(), this->to().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->to(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResNotifyMatchRoomWattingChange::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string roomId = 1;
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->roomid());
    }

    // required int32 gameId = 2;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gameid());
    }

    // required int32 roomType = 3;
    if (has_roomtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roomtype());
    }

    // required int32 timesType = 4;
    if (has_timestype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->timestype());
    }

    // required int32 waitting = 5;
    if (has_waitting()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->waitting());
    }

    // required string randId = 6;
    if (has_randid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->randid());
    }

    // required int32 times = 7;
    if (has_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->times());
    }

    // required string from = 8;
    if (has_from()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->from());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required string to = 9;
    if (has_to()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->to());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResNotifyMatchRoomWattingChange::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResNotifyMatchRoomWattingChange* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResNotifyMatchRoomWattingChange*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResNotifyMatchRoomWattingChange::MergeFrom(const ResNotifyMatchRoomWattingChange& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_roomtype()) {
      set_roomtype(from.roomtype());
    }
    if (from.has_timestype()) {
      set_timestype(from.timestype());
    }
    if (from.has_waitting()) {
      set_waitting(from.waitting());
    }
    if (from.has_randid()) {
      set_randid(from.randid());
    }
    if (from.has_times()) {
      set_times(from.times());
    }
    if (from.has_from()) {
      set_from(from.from());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_to()) {
      set_to(from.to());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResNotifyMatchRoomWattingChange::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResNotifyMatchRoomWattingChange::CopyFrom(const ResNotifyMatchRoomWattingChange& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResNotifyMatchRoomWattingChange::IsInitialized() const {
  if ((_has_bits_[0] & 0x000001ff) != 0x000001ff) return false;

  return true;
}

void ResNotifyMatchRoomWattingChange::Swap(ResNotifyMatchRoomWattingChange* other) {
  if (other != this) {
    std::swap(roomid_, other->roomid_);
    std::swap(gameid_, other->gameid_);
    std::swap(roomtype_, other->roomtype_);
    std::swap(timestype_, other->timestype_);
    std::swap(waitting_, other->waitting_);
    std::swap(randid_, other->randid_);
    std::swap(times_, other->times_);
    std::swap(from_, other->from_);
    std::swap(to_, other->to_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResNotifyMatchRoomWattingChange::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResNotifyMatchRoomWattingChange_descriptor_;
  metadata.reflection = ResNotifyMatchRoomWattingChange_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResNotifyTimesOver::kMatchConfigIdFieldNumber;
const int ResNotifyTimesOver::kGameIdFieldNumber;
const int ResNotifyTimesOver::kRandIdFieldNumber;
const int ResNotifyTimesOver::kTimesFieldNumber;
const int ResNotifyTimesOver::kFromFieldNumber;
const int ResNotifyTimesOver::kToFieldNumber;
const int ResNotifyTimesOver::kSelfRankFieldNumber;
const int ResNotifyTimesOver::kTaotaiFieldNumber;
const int ResNotifyTimesOver::kMatchOverFieldNumber;
#endif  // !_MSC_VER

ResNotifyTimesOver::ResNotifyTimesOver()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResNotifyTimesOver::InitAsDefaultInstance() {
}

ResNotifyTimesOver::ResNotifyTimesOver(const ResNotifyTimesOver& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResNotifyTimesOver::SharedCtor() {
  _cached_size_ = 0;
  matchconfigid_ = 0;
  gameid_ = 0;
  randid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  times_ = 0;
  from_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  to_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  selfrank_ = 0;
  taotai_ = 0;
  matchover_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResNotifyTimesOver::~ResNotifyTimesOver() {
  SharedDtor();
}

void ResNotifyTimesOver::SharedDtor() {
  if (randid_ != &::google::protobuf::internal::kEmptyString) {
    delete randid_;
  }
  if (from_ != &::google::protobuf::internal::kEmptyString) {
    delete from_;
  }
  if (to_ != &::google::protobuf::internal::kEmptyString) {
    delete to_;
  }
  if (this != default_instance_) {
  }
}

void ResNotifyTimesOver::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResNotifyTimesOver::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResNotifyTimesOver_descriptor_;
}

const ResNotifyTimesOver& ResNotifyTimesOver::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgMatch_2eproto();
  return *default_instance_;
}

ResNotifyTimesOver* ResNotifyTimesOver::default_instance_ = NULL;

ResNotifyTimesOver* ResNotifyTimesOver::New() const {
  return new ResNotifyTimesOver;
}

void ResNotifyTimesOver::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    matchconfigid_ = 0;
    gameid_ = 0;
    if (has_randid()) {
      if (randid_ != &::google::protobuf::internal::kEmptyString) {
        randid_->clear();
      }
    }
    times_ = 0;
    if (has_from()) {
      if (from_ != &::google::protobuf::internal::kEmptyString) {
        from_->clear();
      }
    }
    if (has_to()) {
      if (to_ != &::google::protobuf::internal::kEmptyString) {
        to_->clear();
      }
    }
    selfrank_ = 0;
    taotai_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    matchover_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResNotifyTimesOver::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 matchConfigId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &matchconfigid_)));
          set_has_matchconfigid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gameId;
        break;
      }

      // required int32 gameId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gameId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_randId;
        break;
      }

      // required string randId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_randId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_randid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->randid().data(), this->randid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_times;
        break;
      }

      // required int32 times = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &times_)));
          set_has_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_from;
        break;
      }

      // required string from = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_from:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_from()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->from().data(), this->from().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_to;
        break;
      }

      // required string to = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_to:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_to()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->to().data(), this->to().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_selfRank;
        break;
      }

      // required int32 selfRank = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_selfRank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &selfrank_)));
          set_has_selfrank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_taotai;
        break;
      }

      // required int32 taotai = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_taotai:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &taotai_)));
          set_has_taotai();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_matchOver;
        break;
      }

      // required int32 matchOver = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_matchOver:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &matchover_)));
          set_has_matchover();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResNotifyTimesOver::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 matchConfigId = 1;
  if (has_matchconfigid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->matchconfigid(), output);
  }

  // required int32 gameId = 2;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->gameid(), output);
  }

  // required string randId = 3;
  if (has_randid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->randid().data(), this->randid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->randid(), output);
  }

  // required int32 times = 4;
  if (has_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->times(), output);
  }

  // required string from = 5;
  if (has_from()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->from().data(), this->from().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->from(), output);
  }

  // required string to = 6;
  if (has_to()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->to().data(), this->to().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->to(), output);
  }

  // required int32 selfRank = 7;
  if (has_selfrank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->selfrank(), output);
  }

  // required int32 taotai = 8;
  if (has_taotai()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->taotai(), output);
  }

  // required int32 matchOver = 9;
  if (has_matchover()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->matchover(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResNotifyTimesOver::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 matchConfigId = 1;
  if (has_matchconfigid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->matchconfigid(), target);
  }

  // required int32 gameId = 2;
  if (has_gameid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->gameid(), target);
  }

  // required string randId = 3;
  if (has_randid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->randid().data(), this->randid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->randid(), target);
  }

  // required int32 times = 4;
  if (has_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->times(), target);
  }

  // required string from = 5;
  if (has_from()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->from().data(), this->from().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->from(), target);
  }

  // required string to = 6;
  if (has_to()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->to().data(), this->to().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->to(), target);
  }

  // required int32 selfRank = 7;
  if (has_selfrank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->selfrank(), target);
  }

  // required int32 taotai = 8;
  if (has_taotai()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->taotai(), target);
  }

  // required int32 matchOver = 9;
  if (has_matchover()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->matchover(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResNotifyTimesOver::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 matchConfigId = 1;
    if (has_matchconfigid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->matchconfigid());
    }

    // required int32 gameId = 2;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gameid());
    }

    // required string randId = 3;
    if (has_randid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->randid());
    }

    // required int32 times = 4;
    if (has_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->times());
    }

    // required string from = 5;
    if (has_from()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->from());
    }

    // required string to = 6;
    if (has_to()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->to());
    }

    // required int32 selfRank = 7;
    if (has_selfrank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->selfrank());
    }

    // required int32 taotai = 8;
    if (has_taotai()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->taotai());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int32 matchOver = 9;
    if (has_matchover()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->matchover());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResNotifyTimesOver::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResNotifyTimesOver* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResNotifyTimesOver*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResNotifyTimesOver::MergeFrom(const ResNotifyTimesOver& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_matchconfigid()) {
      set_matchconfigid(from.matchconfigid());
    }
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_randid()) {
      set_randid(from.randid());
    }
    if (from.has_times()) {
      set_times(from.times());
    }
    if (from.has_from()) {
      set_from(from.from());
    }
    if (from.has_to()) {
      set_to(from.to());
    }
    if (from.has_selfrank()) {
      set_selfrank(from.selfrank());
    }
    if (from.has_taotai()) {
      set_taotai(from.taotai());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_matchover()) {
      set_matchover(from.matchover());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResNotifyTimesOver::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResNotifyTimesOver::CopyFrom(const ResNotifyTimesOver& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResNotifyTimesOver::IsInitialized() const {
  if ((_has_bits_[0] & 0x000001ff) != 0x000001ff) return false;

  return true;
}

void ResNotifyTimesOver::Swap(ResNotifyTimesOver* other) {
  if (other != this) {
    std::swap(matchconfigid_, other->matchconfigid_);
    std::swap(gameid_, other->gameid_);
    std::swap(randid_, other->randid_);
    std::swap(times_, other->times_);
    std::swap(from_, other->from_);
    std::swap(to_, other->to_);
    std::swap(selfrank_, other->selfrank_);
    std::swap(taotai_, other->taotai_);
    std::swap(matchover_, other->matchover_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResNotifyTimesOver::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResNotifyTimesOver_descriptor_;
  metadata.reflection = ResNotifyTimesOver_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqContinueMatch::kMatchConfigIdFieldNumber;
const int ReqContinueMatch::kGameIdFieldNumber;
const int ReqContinueMatch::kRandIdFieldNumber;
#endif  // !_MSC_VER

ReqContinueMatch::ReqContinueMatch()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqContinueMatch::InitAsDefaultInstance() {
}

ReqContinueMatch::ReqContinueMatch(const ReqContinueMatch& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqContinueMatch::SharedCtor() {
  _cached_size_ = 0;
  matchconfigid_ = 0;
  gameid_ = 0;
  randid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqContinueMatch::~ReqContinueMatch() {
  SharedDtor();
}

void ReqContinueMatch::SharedDtor() {
  if (randid_ != &::google::protobuf::internal::kEmptyString) {
    delete randid_;
  }
  if (this != default_instance_) {
  }
}

void ReqContinueMatch::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqContinueMatch::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqContinueMatch_descriptor_;
}

const ReqContinueMatch& ReqContinueMatch::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgMatch_2eproto();
  return *default_instance_;
}

ReqContinueMatch* ReqContinueMatch::default_instance_ = NULL;

ReqContinueMatch* ReqContinueMatch::New() const {
  return new ReqContinueMatch;
}

void ReqContinueMatch::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    matchconfigid_ = 0;
    gameid_ = 0;
    if (has_randid()) {
      if (randid_ != &::google::protobuf::internal::kEmptyString) {
        randid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqContinueMatch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 matchConfigId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &matchconfigid_)));
          set_has_matchconfigid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gameId;
        break;
      }

      // required int32 gameId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gameId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_randId;
        break;
      }

      // required string randId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_randId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_randid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->randid().data(), this->randid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqContinueMatch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 matchConfigId = 1;
  if (has_matchconfigid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->matchconfigid(), output);
  }

  // required int32 gameId = 2;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->gameid(), output);
  }

  // required string randId = 3;
  if (has_randid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->randid().data(), this->randid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->randid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqContinueMatch::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 matchConfigId = 1;
  if (has_matchconfigid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->matchconfigid(), target);
  }

  // required int32 gameId = 2;
  if (has_gameid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->gameid(), target);
  }

  // required string randId = 3;
  if (has_randid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->randid().data(), this->randid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->randid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqContinueMatch::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 matchConfigId = 1;
    if (has_matchconfigid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->matchconfigid());
    }

    // required int32 gameId = 2;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gameid());
    }

    // required string randId = 3;
    if (has_randid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->randid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqContinueMatch::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqContinueMatch* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqContinueMatch*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqContinueMatch::MergeFrom(const ReqContinueMatch& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_matchconfigid()) {
      set_matchconfigid(from.matchconfigid());
    }
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_randid()) {
      set_randid(from.randid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqContinueMatch::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqContinueMatch::CopyFrom(const ReqContinueMatch& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqContinueMatch::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void ReqContinueMatch::Swap(ReqContinueMatch* other) {
  if (other != this) {
    std::swap(matchconfigid_, other->matchconfigid_);
    std::swap(gameid_, other->gameid_);
    std::swap(randid_, other->randid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqContinueMatch::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqContinueMatch_descriptor_;
  metadata.reflection = ReqContinueMatch_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResContinueMatch::kResultFieldNumber;
#endif  // !_MSC_VER

ResContinueMatch::ResContinueMatch()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResContinueMatch::InitAsDefaultInstance() {
  result_ = const_cast< ::ProtoNet::ResponseResult*>(&::ProtoNet::ResponseResult::default_instance());
}

ResContinueMatch::ResContinueMatch(const ResContinueMatch& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResContinueMatch::SharedCtor() {
  _cached_size_ = 0;
  result_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResContinueMatch::~ResContinueMatch() {
  SharedDtor();
}

void ResContinueMatch::SharedDtor() {
  if (this != default_instance_) {
    delete result_;
  }
}

void ResContinueMatch::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResContinueMatch::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResContinueMatch_descriptor_;
}

const ResContinueMatch& ResContinueMatch::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgMatch_2eproto();
  return *default_instance_;
}

ResContinueMatch* ResContinueMatch::default_instance_ = NULL;

ResContinueMatch* ResContinueMatch::New() const {
  return new ResContinueMatch;
}

void ResContinueMatch::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_result()) {
      if (result_ != NULL) result_->::ProtoNet::ResponseResult::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResContinueMatch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ProtoNet.ResponseResult result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResContinueMatch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .ProtoNet.ResponseResult result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResContinueMatch::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .ProtoNet.ResponseResult result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResContinueMatch::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ProtoNet.ResponseResult result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResContinueMatch::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResContinueMatch* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResContinueMatch*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResContinueMatch::MergeFrom(const ResContinueMatch& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      mutable_result()->::ProtoNet::ResponseResult::MergeFrom(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResContinueMatch::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResContinueMatch::CopyFrom(const ResContinueMatch& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResContinueMatch::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_result()) {
    if (!this->result().IsInitialized()) return false;
  }
  return true;
}

void ResContinueMatch::Swap(ResContinueMatch* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResContinueMatch::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResContinueMatch_descriptor_;
  metadata.reflection = ResContinueMatch_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ProtoNet

// @@protoc_insertion_point(global_scope)
